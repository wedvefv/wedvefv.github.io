<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Androids on 学而时习之</title>
    <link>http://wlw-5g.cn/android/</link>
    <description>Recent content in Androids on 学而时习之</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 25 Jun 2021 12:00:00 +0800</lastBuildDate><atom:link href="http://wlw-5g.cn/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. 工程目录文件</title>
      <link>http://wlw-5g.cn/android/1/</link>
      <pubDate>Fri, 25 Jun 2021 12:00:00 +0800</pubDate>
      
      <guid>http://wlw-5g.cn/android/1/</guid>
      <description>目录结构 默认是创建一个project 默认创建一个app的module，相当于一个应用 app/build 编译生成的目录 app/src 代码文件 app/src/androidTest 测试目录，要运行在device上，比较慢 app/src/main 应用代码文件 app/src/main/java 业务代码 app/src/main/res 资源代码 app/src/main/res/drawable 存放各种位图文件，(.png，.jpg，.9png，.gif等)除此之外可能是一些其他的dr</description>
    </item>
    
    <item>
      <title>2 签名打包</title>
      <link>http://wlw-5g.cn/android/2/</link>
      <pubDate>Fri, 25 Jun 2021 12:00:00 +0800</pubDate>
      
      <guid>http://wlw-5g.cn/android/2/</guid>
      <description>对apk进行签名 应用升级: 同一个证书会升级，不同的话会认为是新应用。 程序模块化: Android系统可以允许同一个证书签名的多个应用程序在一个进程里运行，系统实际把他们作为一个单个的应用程序，此时就可以把我们的应用程序以模块的方式进行部署，而用户可以独立的升级其中的一个模块。 代码或</description>
    </item>
    
    <item>
      <title>3 view和viewGroup的概念</title>
      <link>http://wlw-5g.cn/android/3/</link>
      <pubDate>Fri, 25 Jun 2021 12:00:00 +0800</pubDate>
      
      <guid>http://wlw-5g.cn/android/3/</guid>
      <description>所有控件的父类是view和GroupView 线性布局的例子 1 2 3 4 5 6 7 8 9 10 11 12 13 14 &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;LinearLayout xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34; android:layout_width=&amp;#34;fill_parent&amp;#34; android:layout_height=&amp;#34;fill_parent&amp;#34; android:orientation=&amp;#34;vertical&amp;#34; &amp;gt; &amp;lt;TextView android:id=&amp;#34;@+id/text&amp;#34; android:layout_width=&amp;#34;wrap_content&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34; android:text=&amp;#34;I am a TextView&amp;#34; /&amp;gt; &amp;lt;Button android:id=&amp;#34;@+id/button&amp;#34; android:layout_width=&amp;#34;wrap_content&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34; android:text=&amp;#34;I am a Button&amp;#34; /&amp;gt; &amp;lt;/LinearLayout&amp;gt;</description>
    </item>
    
    <item>
      <title>4 LinearLayout布局</title>
      <link>http://wlw-5g.cn/android/4/</link>
      <pubDate>Fri, 25 Jun 2021 12:00:00 +0800</pubDate>
      
      <guid>http://wlw-5g.cn/android/4/</guid>
      <description>LinearLayout(线性布局) 属性 orientation 组件排列方式，水平和垂直 gravity 组件包含子元素的对其方式 layout_gravity 控制组件在父元素中的对其方式 layout_width layout_height id 组件资源id background 组件设置的背景图片，或者直接设置颜色 组件的weight权重 布局方向的比例划分 wrap_content ，则按权重值直接按比例划分 如果子元素都是fill_conte</description>
    </item>
    
    <item>
      <title>5 RelativeLayout布局</title>
      <link>http://wlw-5g.cn/android/5/</link>
      <pubDate>Fri, 25 Jun 2021 12:00:00 +0800</pubDate>
      
      <guid>http://wlw-5g.cn/android/5/</guid>
      <description>基本属性 gravity 设置容器内组件的对其方式 ignoreGravity 设置为true，将不受gravity影响 根据父容器定位 layout_alignParentLeft 左对齐 layout_alignParentRight 右对齐 layout_alignParentBotton 底部对齐 layout_alignParentTop 顶部对齐 layout_centerHorizontal 水平居中 layout_centerVertical 垂直居中 layout_centerParent 中间位置 根据兄弟组件定位 layout_toLeftOf 参考组件的左边 layout_toRightOf 参考组件的右边 layout_above 参考组件的上方 layout_below 参考组件的下方 layout_alignTop/bottom/Left/Right 对齐参考组件的上边界&amp;hellip; mar</description>
    </item>
    
  </channel>
</rss>
