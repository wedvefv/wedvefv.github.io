<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on 学而时习之</title>
    <link>http://codesource.online/categories/python/</link>
    <description>Recent content in python on 学而时习之</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 13 Jun 2020 14:00:00 +0800</lastBuildDate><atom:link href="http://codesource.online/categories/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>python http请求</title>
      <link>http://codesource.online/python%E7%AC%94%E8%AE%B0/5_http/</link>
      <pubDate>Sat, 13 Jun 2020 14:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/python%E7%AC%94%E8%AE%B0/5_http/</guid>
      <description>urlib 模块 urlib.urlopen(url) 只由url参数，不能设置header等信息 urllib有urlencode函数，可以把字典编码转成get参数（&amp;amp;方式连接）, urllib2 没有 urllib.quote(s, safe=&#39;/&#39;) 是转义编码用的, 默认不编码/, 且把空格转成%20 urllib.quote_plus(s, safe=&#39;&#39;) 默认全部编码, 会调用quote(s, safe=&#39; &amp;lsquo;) 不编码空格, 最后替换s中的空格为+ 号。</description>
    </item>
    
    <item>
      <title>scrapy笔记</title>
      <link>http://codesource.online/python%E7%AC%94%E8%AE%B0/4_scrapy/</link>
      <pubDate>Wed, 12 Jun 2019 21:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/python%E7%AC%94%E8%AE%B0/4_scrapy/</guid>
      <description>1.初识爬虫 开启项目: scrapy startproject example 定义爬虫文件: cd example; scrapy genspider book_psider http://books.toscrape.com/ 定义数据最终需要的字段, 修改items.py。 如果不用pipeline处理，则yeild item， 直接 -o 到文件json文件即可。 执行爬虫 scrapy crawl book_spider -o book.json 2. 核心概念 爬虫组件 组件 描述 类型 ENGINE 引擎，框架核心组件 内部组件 SCHEDULER 调度器 内部组件 DOWNLOADER 下载</description>
    </item>
    
    <item>
      <title>python 编码reload(sys)的作用</title>
      <link>http://codesource.online/python%E7%AC%94%E8%AE%B0/3_reload_sys/</link>
      <pubDate>Thu, 02 May 2019 14:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/python%E7%AC%94%E8%AE%B0/3_reload_sys/</guid>
      <description>为什么需要sys.setdefaultencoding(&amp;ldquo;utf-8&amp;rdquo;) 因为python转码是通过unicode作为中间码的。 比如字符串 x = &amp;ldquo;你们&amp;rdquo;，本身是str， 首先我们指定了文件编码uft8，所以x是utf8编码的。 如果要转化g</description>
    </item>
    
    <item>
      <title>python模块导入</title>
      <link>http://codesource.online/python%E7%AC%94%E8%AE%B0/2__init__%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%9C%E7%94%A8/</link>
      <pubDate>Thu, 14 Feb 2019 14:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/python%E7%AC%94%E8%AE%B0/2__init__%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%9C%E7%94%A8/</guid>
      <description>python 导入模块文件的2中方式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import lib or from lib import * # 导入子目录中模块 import tmp.lib3 or from tmp.lib3 import * # 导入上级目录 import sys sys.path.append(&amp;#39;home/app/&amp;#39;) import mod import xxxx 与import类似, 被导入的module仍然会执行且仅执行一次 from *** import 的实质 当以 &amp;ldquo;from *** import &amp;quot; 方式导入module时, python会在当前module 的命名空间</description>
    </item>
    
    <item>
      <title>python类的三种装饰器</title>
      <link>http://codesource.online/python%E7%AC%94%E8%AE%B0/1_%E4%B8%89%E7%A7%8D%E8%A3%85%E9%A5%B0%E5%99%A8/</link>
      <pubDate>Thu, 14 Feb 2019 14:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/python%E7%AC%94%E8%AE%B0/1_%E4%B8%89%E7%A7%8D%E8%A3%85%E9%A5%B0%E5%99%A8/</guid>
      <description>property装饰器作用和原理 我们知道c++中有public,projected,private等修饰类私有属性的作用，这样就限定了某些属性只能读取，不能修改；有些能读也能需改。 设置C++类中的一个属性可以自定义方法get和set方法。 python中实现这种原理，就需要装饰器p</description>
    </item>
    
  </channel>
</rss>
