<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Htmls on 学而时习之</title>
    <link>http://codesource.online/html/</link>
    <description>Recent content in Htmls on 学而时习之</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 06 Jun 2020 10:04:30 +0800</lastBuildDate>
    
	<atom:link href="http://codesource.online/html/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>axios为什么拿不到结果</title>
      <link>http://codesource.online/html/axios_that/</link>
      <pubDate>Sat, 06 Jun 2020 10:04:30 +0800</pubDate>
      
      <guid>http://codesource.online/html/axios_that/</guid>
      <description>第一版的写法 request.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import axios from &amp;#39;axios&amp;#39; var getReq = function(url){ var ret axios .get(url) .then(function(res){ console.log(res.data, &amp;#39;打印api返回值的json&amp;#39;) ret = res.data }) .catch( function(error) { console.log(&amp;#34;错误：&amp;#34;,error) } ) } vue 组件调用 1 2 3 4 5 6 7 8 9 10 data: function() { return { data: [] } }, methods: { updateDay(m) { this.data = getReq(&amp;#34;/mock/data&amp;#34;) } } 本来的</description>
    </item>
    
    <item>
      <title>css浮动</title>
      <link>http://codesource.online/html/css/1_float/</link>
      <pubDate>Thu, 21 May 2020 20:04:30 +0800</pubDate>
      
      <guid>http://codesource.online/html/css/1_float/</guid>
      <description>主要知识点 不管元素是行内元素还是块元素，只要设置float属性，就会变成块级框， 可以设置wieth和height。</description>
    </item>
    
    <item>
      <title>如何解释js闭包</title>
      <link>http://codesource.online/html/bibao/</link>
      <pubDate>Fri, 06 Mar 2020 14:47:30 +0800</pubDate>
      
      <guid>http://codesource.online/html/bibao/</guid>
      <description>看个例子 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 function assert (condition, msg) { if (condition) { console.log(msg, &amp;#39;&amp;#39;) } else { console.log(error, &amp;#39;&amp;#39;) } } var outerValue = &amp;#34;samurai&amp;#34;; var later; function outerFunc() { var innerValue = &amp;#34;ninja&amp;#34;; function innerFunc(){ var a = 90; assert(outerValue === &amp;#34;samurai&amp;#34;, &amp;#34;i can see your&amp;#34;); assert(innerValue === &amp;#34;ninja&amp;#34;, &amp;#34;i can see the ninja&amp;#34;); } later = innerFunc; } function animate() { var timer = setInterval(function () { console.log(&amp;#39;time-----&amp;#39;, &amp;#39;&amp;#39;) },5) } outerFunc(); later(); x和outerFunc函数都属于全局作用域 y和innerFunc是属于</description>
    </item>
    
    <item>
      <title>js 对象和原型链</title>
      <link>http://codesource.online/html/js_obj/</link>
      <pubDate>Sat, 22 Jun 2019 20:04:30 +0800</pubDate>
      
      <guid>http://codesource.online/html/js_obj/</guid>
      <description>js 对象和原型链</description>
    </item>
    
    <item>
      <title>微信支付流程</title>
      <link>http://codesource.online/html/weixin/</link>
      <pubDate>Sat, 13 Apr 2019 09:40:00 +0800</pubDate>
      
      <guid>http://codesource.online/html/weixin/</guid>
      <description>三个平台都有什么？ 微信公众平台: 微信官方平台，功能： 群发推送、自动回复、二维码订阅，用途：消息推送、品牌传播、分享 微信开放平台: 为第三方提供接口，比如分享朋友圈，发送给微信好友等 微信商户平台：主要是用于微信支付的，比如APP和公众号需要接入支付功能，就需要申请一个商户号。 前提 在开</description>
    </item>
    
    <item>
      <title>ajax简介</title>
      <link>http://codesource.online/html/ajax/</link>
      <pubDate>Thu, 06 Oct 2016 20:04:30 +0800</pubDate>
      
      <guid>http://codesource.online/html/ajax/</guid>
      <description>1.ajax 简介 ajax = 异步javascript+XML AAJAX是基于现有的Internet标准，并且联合使用它们： XMLHttpRequest 对象 (异步的与服务器交换数据) JavaScript/DOM (信息显示/交互) CSS (给数据定义样式) XML (作为转换数据的格式) lamp AJAX应用程序与浏览器和平台无关的！ 实现不刷新整个页面，实现页面动态更新的技</description>
    </item>
    
    <item>
      <title>html5标签</title>
      <link>http://codesource.online/html/html5_tags/</link>
      <pubDate>Wed, 10 Aug 2016 11:30:55 +0800</pubDate>
      
      <guid>http://codesource.online/html/html5_tags/</guid>
      <description>html5标签总结 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131</description>
    </item>
    
  </channel>
</rss>