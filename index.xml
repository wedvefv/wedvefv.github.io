<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学而时习之</title>
    <link>http://codesource.online/</link>
    <description>Recent content on 学而时习之</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 25 Aug 2021 12:00:00 +0800</lastBuildDate><atom:link href="http://codesource.online/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>mysql float类型</title>
      <link>http://codesource.online/mysql_float/</link>
      <pubDate>Wed, 25 Aug 2021 12:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/mysql_float/</guid>
      <description>浮点数的解释 https://www.cnblogs.com/fengju/p/6336162.html 默认的float表示范围 默认范围是6个有效数字（小数部分和整数部分的个数加起来不能大于6个数） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86</description>
    </item>
    
    <item>
      <title>32位cpu为什么只能寻址4G空间</title>
      <link>http://codesource.online/32%E4%BD%8D%E5%92%8C64%E4%BD%8Dcpu/</link>
      <pubDate>Thu, 19 Aug 2021 12:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/32%E4%BD%8D%E5%92%8C64%E4%BD%8Dcpu/</guid>
      <description>不同架构的cpu 16位cpu int是2个字节 long是4个字节 32位cpu Int 是4个字节 long是4个字节 只能装32位操作系统 64位cpu int是4个直接（为了兼容32程序） long是8个字节 可以装32位系统或者64位系统。 time_t为什么是long 因为时间戳是10位，目前来说必</description>
    </item>
    
    <item>
      <title>docker安装mysql</title>
      <link>http://codesource.online/mysql-%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7/</link>
      <pubDate>Thu, 19 Aug 2021 12:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/mysql-%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7/</guid>
      <description># docker 安装mysql5.6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 docker pull mysql:latest docker images docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql docker run -itd -p 3306:3306 --name mysql5 -e MYSQL_ROOT_PASSWORD=123456 -d mysql5.5.41 // 5.5版本 - 映射本地目录 docker run -p 3306:3306 --name mysql5.5 -v /opt/docker/mysql/conf:/etc/mysql -v /opt/docker/mysql/logs:/var/log/mysql -v /opt/docker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.5 docker ps 查看进程 docker ps -a 查看全部容器 docker exec -it 621b7a3e9 /bin/bash 进入容器 docker cp /etc/mysql5.cnf mysql5:/etc/mysql/my.cnf // 复制本地文件到容器内 docker start</description>
    </item>
    
    <item>
      <title>hugo模板语法</title>
      <link>http://codesource.online/hugo%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Thu, 19 Aug 2021 12:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/hugo%E6%A8%A1%E6%9D%BF/</guid>
      <description>single模板 如果在markdown前面指定了type和layout，会优先选择顺序，一般使用single.html /layouts/TYPE-or-SECTION/LAYOUT.html /layouts/TYPE-or-SECTION/single.html /layouts/_default/single.html /themes/THEME/layouts/TYPE-or-SECTION/LAYOUT.html /themes/THEME/layouts/TYPE-or-SECTION/single.html /themes/THEME/layouts/_default/single.html list 模板 如果是content目录下的子目录，则比如post目录 访问 http://localhost:1313/post/ ， 则会渲染list.html 模板 post就是section类型的页面 模板嵌套规则 hu</description>
    </item>
    
    <item>
      <title>mysql优化</title>
      <link>http://codesource.online/mysql5.6-%E4%BC%98%E5%8C%96/</link>
      <pubDate>Thu, 19 Aug 2021 12:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/mysql5.6-%E4%BC%98%E5%8C%96/</guid>
      <description>数据库层级优化 数据库性能取决于几个因素，比如表，查询，数据库配置。 必须考虑cpu和磁盘io的情况，研究数据库性能需要学习高级规则，和性能测试。 恰当的使用表字段类型，多列少表还是，多表少列 正确的使用索引 使用选择合适的引擎 innodb或者MyISAM(非事务) 每个表的行格式， 压缩表能</description>
    </item>
    
    <item>
      <title>mysql锁表问题测试</title>
      <link>http://codesource.online/mysql%E9%94%81%E8%A1%A8%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 19 Aug 2021 12:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/mysql%E9%94%81%E8%A1%A8%E9%97%AE%E9%A2%98/</guid>
      <description>mysql锁表问题 修改表结构的时候: 添加索引， 添加字段，删除字段 对于mysql5.5以及以前的版本都是会锁表的，不允许insert update等写操作. 因此处出现了好多在线迁移工具。 对于mysql5.6版本以上，允许在线修DDL了。 整理空间碎片 MyISAM引擎 才支持修复表repa</description>
    </item>
    
    <item>
      <title>smartsvn无法查看log的问题</title>
      <link>http://codesource.online/smartsvn/</link>
      <pubDate>Thu, 19 Aug 2021 12:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/smartsvn/</guid>
      <description>smartsvn 提示无法查看log的错误 解决方法是。 删除log缓存 project -&amp;gt; manager log Caches</description>
    </item>
    
    <item>
      <title>1. 工程目录文件</title>
      <link>http://codesource.online/android/1/</link>
      <pubDate>Fri, 25 Jun 2021 12:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/android/1/</guid>
      <description>目录结构 默认是创建一个project 默认创建一个app的module，相当于一个应用 app/build 编译生成的目录 app/src 代码文件 app/src/androidTest 测试目录，要运行在device上，比较慢 app/src/main 应用代码文件 app/src/main/java 业务代码 app/src/main/res 资源代码 app/src/main/res/drawable 存放各种位图文件，(.png，.jpg，.9png，.gif等)除此之外可能是一些其他的dr</description>
    </item>
    
    <item>
      <title>2 签名打包</title>
      <link>http://codesource.online/android/2/</link>
      <pubDate>Fri, 25 Jun 2021 12:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/android/2/</guid>
      <description>对apk进行签名 应用升级: 同一个证书会升级，不同的话会认为是新应用。 程序模块化: Android系统可以允许同一个证书签名的多个应用程序在一个进程里运行，系统实际把他们作为一个单个的应用程序，此时就可以把我们的应用程序以模块的方式进行部署，而用户可以独立的升级其中的一个模块。 代码或</description>
    </item>
    
    <item>
      <title>3 view和viewGroup的概念</title>
      <link>http://codesource.online/android/3/</link>
      <pubDate>Fri, 25 Jun 2021 12:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/android/3/</guid>
      <description>所有控件的父类是view和GroupView 线性布局的例子 1 2 3 4 5 6 7 8 9 10 11 12 13 14 &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;LinearLayout xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34; android:layout_width=&amp;#34;fill_parent&amp;#34; android:layout_height=&amp;#34;fill_parent&amp;#34; android:orientation=&amp;#34;vertical&amp;#34; &amp;gt; &amp;lt;TextView android:id=&amp;#34;@+id/text&amp;#34; android:layout_width=&amp;#34;wrap_content&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34; android:text=&amp;#34;I am a TextView&amp;#34; /&amp;gt; &amp;lt;Button android:id=&amp;#34;@+id/button&amp;#34; android:layout_width=&amp;#34;wrap_content&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34; android:text=&amp;#34;I am a Button&amp;#34; /&amp;gt; &amp;lt;/LinearLayout&amp;gt;</description>
    </item>
    
    <item>
      <title>4 LinearLayout布局</title>
      <link>http://codesource.online/android/4/</link>
      <pubDate>Fri, 25 Jun 2021 12:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/android/4/</guid>
      <description>LinearLayout(线性布局) 属性 orientation 组件排列方式，水平和垂直 gravity 组件包含子元素的对其方式 layout_gravity 控制组件在父元素中的对其方式 layout_width layout_height id 组件资源id background 组件设置的背景图片，或者直接设置颜色 组件的weight权重 布局方向的比例划分 wrap_content ，则按权重值直接按比例划分 如果子元素都是fill_conte</description>
    </item>
    
    <item>
      <title>5 RelativeLayout布局</title>
      <link>http://codesource.online/android/5/</link>
      <pubDate>Fri, 25 Jun 2021 12:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/android/5/</guid>
      <description>基本属性 gravity 设置容器内组件的对其方式 ignoreGravity 设置为true，将不受gravity影响 根据父容器定位 layout_alignParentLeft 左对齐 layout_alignParentRight 右对齐 layout_alignParentBotton 底部对齐 layout_alignParentTop 顶部对齐 layout_centerHorizontal 水平居中 layout_centerVertical 垂直居中 layout_centerParent 中间位置 根据兄弟组件定位 layout_toLeftOf 参考组件的左边 layout_toRightOf 参考组件的右边 layout_above 参考组件的上方 layout_below 参考组件的下方 layout_alignTop/bottom/Left/Right 对齐参考组件的上边界&amp;hellip; mar</description>
    </item>
    
    <item>
      <title>2021 06 20</title>
      <link>http://codesource.online/day/2021-06-21/</link>
      <pubDate>Sun, 20 Jun 2021 18:50:32 +0800</pubDate>
      
      <guid>http://codesource.online/day/2021-06-21/</guid>
      <description>天气 北京天气 18-36度 淮滨天气 19-29度 周日 事情 今天是父亲节， 中午给爸爸打了个电话。 依依已经854天了，28个月了。</description>
    </item>
    
    <item>
      <title>proto转lua</title>
      <link>http://codesource.online/lua/proto%E6%96%87%E4%BB%B6%E8%BD%AClua%E6%96%87%E4%BB%B6/</link>
      <pubDate>Sat, 12 Jun 2021 12:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/lua/proto%E6%96%87%E4%BB%B6%E8%BD%AClua%E6%96%87%E4%BB%B6/</guid>
      <description>记录安装笔记 方法一: 将proto文件转成lua文件 安装protoc工具 源码下载地址 下载第一个 protobuf-all-3.17.3.tar.gz tar -xf protobuf-all-3.17.3.tar.gz cd protobuf-3.17.3 make &amp;amp;&amp;amp; make install 安装protoc-gen-lua 工具 python扩展 pip install protobuf git clone https://github.com/sean-lin/protoc-gen-lua.git 进入 protoc-gen-lua/protobuf 编译pb.c 得到pb.so 按理说直接make即可 解决pb.so 编译错误 一般会报错 , 提示lua5.1</description>
    </item>
    
    <item>
      <title>tp5url和路由</title>
      <link>http://codesource.online/2url%E5%92%8C%E8%B7%AF%E7%94%B1/</link>
      <pubDate>Sat, 12 Jun 2021 12:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/2url%E5%92%8C%E8%B7%AF%E7%94%B1/</guid>
      <description>ngxin配置文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 server { listen 81; set $root /usr/local/openresty/nginx/php/tp5/public; #access_log /usr/local/openresty/nginx/logs/access.log; #默认请求 location / { root $root; #index index.php index.html index.htm; #定义首页索引文件的名称 #if ( -f $request_filename) { # echo $request_filename; # break; #} # 隐藏index.php if ( !-e $request_filename) { rewrite ^(.*)$ /index.php?s=/$1 last; break; } } location ~ .+\.php($|/) { set $script $uri; set $path_info &amp;#34;&amp;#34;; if ($uri ~ &amp;#34;^(.+\.php)(/.+)&amp;#34;) { set $script $1; set $path_info $2; } fastcgi_pass 127.0.0.1:9000;</description>
    </item>
    
    <item>
      <title>mysql join查询优化</title>
      <link>http://codesource.online/nginx%E7%AC%94%E8%AE%B0/mysql%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</link>
      <pubDate>Fri, 25 Dec 2020 00:33:58 +0800</pubDate>
      
      <guid>http://codesource.online/nginx%E7%AC%94%E8%AE%B0/mysql%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</guid>
      <description>mysql join 方式 外连接 可以省略outer关键字 A left join B 按on条件取交集，在加上A剩余部分， A是主表。 A right join B 按on条件取交集，再加上B剩余部分，b是主表。 内连接 inner join 两个表按on条件取交集的意思。 select * from A inner join B ON A.x = b.x select *from A, B where A.x = b.x 第一中方式mysql会默认转成下面的方式。 外连接 （ful</description>
    </item>
    
    <item>
      <title>Elasticsearch总结</title>
      <link>http://codesource.online/linux%E7%AC%94%E8%AE%B0/Elasticsearch_note/</link>
      <pubDate>Sat, 21 Nov 2020 20:10:00 +0800</pubDate>
      
      <guid>http://codesource.online/linux%E7%AC%94%E8%AE%B0/Elasticsearch_note/</guid>
      <description>常见操作 以下操作都是在kibana可视化工具中执行的。 创建索引，并设置字段类型(mapping) mapping 可以单独设置，必须是创建index之后，设置了就不能修改了。 1 2 3 4 5 6 POST /city_index/_mapping { properties&amp;#34;{ ... } } 也可以创建索引时，一并设置， 如下 城市信息索引 city_index 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</description>
    </item>
    
    <item>
      <title>Elasticsearch pinyin插件</title>
      <link>http://codesource.online/linux%E7%AC%94%E8%AE%B0/Elasticsearch_pinyin/</link>
      <pubDate>Tue, 17 Nov 2020 23:10:00 +0800</pubDate>
      
      <guid>http://codesource.online/linux%E7%AC%94%E8%AE%B0/Elasticsearch_pinyin/</guid>
      <description>插件安装 ./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.9.3/elasticsearch-analysis-ik-7.9.3.zip ./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-pinyin/releases/download/v7.9.3/elasticsearch-analysis-pinyin-7.9.3.zip pinyin插件 keep_first_letter 选项默认true，刘德华-&amp;gt; ldh keep_separate_first_letter 选项默认fasle ， 刘德华 -&amp;gt; l,d,h limit_first_letter_length 首字母默认长度 16 keep_full_pinyin 默认true， 刘德华 -&amp;gt; [liu, de, hua] keep_joined_full_pinyin 默认false 刘德华-&amp;gt; [liudehua] keep_none_chinese 默认true， 保持非中问的字符或数字 keep_none_chinese_together 需要keep_none_chinese=true； D</description>
    </item>
    
    <item>
      <title>lua捕获</title>
      <link>http://codesource.online/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/lua_string/</link>
      <pubDate>Mon, 02 Nov 2020 12:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/lua_string/</guid>
      <description>直接上代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135</description>
    </item>
    
    <item>
      <title>ipv6配置</title>
      <link>http://codesource.online/linux%E7%AC%94%E8%AE%B0/ipv6/</link>
      <pubDate>Fri, 18 Sep 2020 20:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/linux%E7%AC%94%E8%AE%B0/ipv6/</guid>
      <description>ipv6格式 冒号分割， 每一段都是16位，一般显示4个16进制数， xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx 连续的0 可以用两个冒号表示 就会出现 fe80::315:b3ba:674b:3fdc的 ，实际上是 fe80:0000:0000:0000:0315:b3ba:674b:3fdc linux中的ipv6有两种类型 Scope:Global Scope:Link 这种方式是由mac地址按照一定格式转换出来的全球唯一本地链路 ping Scope:Link 这种方式直接pin</description>
    </item>
    
    <item>
      <title>coc如何补全vim的</title>
      <link>http://codesource.online/vim%E7%AC%94%E8%AE%B0/nvim%E9%85%8D%E7%BD%AEcoc%E8%A1%A5%E5%85%A8/</link>
      <pubDate>Sat, 29 Aug 2020 21:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/vim%E7%AC%94%E8%AE%B0/nvim%E9%85%8D%E7%BD%AEcoc%E8%A1%A5%E5%85%A8/</guid>
      <description>coc插件原理 vscode 补全利用的是LSP (language server protocol), 简单理解就是编辑时启动一个进程，补全果过程就类似app请求服务器得到补全数据。这就是为什么要装node，服务进程都是node启动。 第一步 安装nvim 首先你需要 安装vim8 或者nvim 我测试的是macos 如果是nvim， 需要把nvim 的配置文</description>
    </item>
    
    <item>
      <title>linux常用命令</title>
      <link>http://codesource.online/linux%E7%AC%94%E8%AE%B0/linux%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Thu, 27 Aug 2020 14:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/linux%E7%AC%94%E8%AE%B0/linux%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/</guid>
      <description>查看centos版本 rpm -q centos-release 查看是否安装ssh rpm -qa | grep ssh 没有则 yum install openssh-server /etc/init.d/sshd status|start|stop netstat -antp | grep sshd 查看运行级别 chkconfig &amp;ndash;list sshd 开启 chkconfig &amp;ndash;level 2345 sshd on 开机启动 chkconfig sshd on 安装go语言 通过源 rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm yum install golang -y 查看go所在目录然后配置环境变量 export PATH=$PATH:$GOPATH/bin 升级centos6的gcc到4.8 wget http://people.centos.org/tru/devtools-2/devtools-2.repo mv devtools-2.repo /etc/yum.repos.d yum install devtoolset-2-gcc devtoolset-2-binutils devtoolset-2-gcc-c++ 保存以前的gcc mv /usr/bin/gcc /usr/bin/gcc-4.4.7 mv /usr/bin/g++ /usr/bin/g++-4.4.7 mv /usr/bin/c++</description>
    </item>
    
    <item>
      <title>nginx如何server_name和http版本</title>
      <link>http://codesource.online/nginx%E7%AC%94%E8%AE%B0/nginx%E4%BD%BF%E7%94%A8http%E7%89%88%E6%9C%AC/</link>
      <pubDate>Mon, 03 Aug 2020 23:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/nginx%E7%AC%94%E8%AE%B0/nginx%E4%BD%BF%E7%94%A8http%E7%89%88%E6%9C%AC/</guid>
      <description>nginx 的http版本的问题 http1.0 需要客户端请求header 指明 connection：keep-alive 表明长链接， 请求完不会立刻关闭。 http1.1 默认就是connection: keep-alive的， 大部分脚本语言发送http默认都是1.1了。 问题来了： 如果访问的域名没有配置到server_na</description>
    </item>
    
    <item>
      <title>lua正则表达式使用</title>
      <link>http://codesource.online/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/lua%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Sat, 25 Jul 2020 12:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/lua%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>lua正则特别之处 并未使用POSIX规范的正则表达式，主要是太大，4000行 lua自己实现了模式匹配只有400行，基本满足要求 lua 使用%转义字符，其他语言貌似都是\ 模式 lua支持一下字符类 字符类 说明 . 任意字符 %a 字母 %c 控制字符 %d 数字 %l 小写字母 %p 标点字符 %s 空白符 %u 大写字母 %w 字母和数字 %x</description>
    </item>
    
    <item>
      <title>正则表达式原理</title>
      <link>http://codesource.online/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95%E5%92%8C%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 25 Jul 2020 12:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95%E5%92%8C%E5%8E%9F%E7%90%86/</guid>
      <description>什么是正则表达式 起源于神经网络研究，由数学家Stephen Kleene总结 Warren McCulloch和Walter Pitts早期工作基础之上,发表了一篇题目是《神经网事件的表示法》的论文, 利用称之为正则集合的数学符号来描述此模型，引入了正则表达式的概念 unix之父Ken Thompson 将其利用到搜索</description>
    </item>
    
    <item>
      <title>python http请求</title>
      <link>http://codesource.online/python%E7%AC%94%E8%AE%B0/5_http/</link>
      <pubDate>Sat, 13 Jun 2020 14:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/python%E7%AC%94%E8%AE%B0/5_http/</guid>
      <description>urlib 模块 urlib.urlopen(url) 只由url参数，不能设置header等信息 urllib有urlencode函数，可以把字典编码转成get参数（&amp;amp;方式连接）, urllib2 没有 urllib.quote(s, safe=&#39;/&#39;) 是转义编码用的, 默认不编码/, 且把空格转成%20 urllib.quote_plus(s, safe=&#39;&#39;) 默认全部编码, 会调用quote(s, safe=&#39; &amp;lsquo;) 不编码空格, 最后替换s中的空格为+ 号。</description>
    </item>
    
    <item>
      <title>mongodb编译安装</title>
      <link>http://codesource.online/linux%E7%AC%94%E8%AE%B0/mongodb%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</link>
      <pubDate>Fri, 05 Jun 2020 20:06:30 +0800</pubDate>
      
      <guid>http://codesource.online/linux%E7%AC%94%E8%AE%B0/mongodb%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140</description>
    </item>
    
    <item>
      <title>如何解释js闭包</title>
      <link>http://codesource.online/js%E7%AC%94%E8%AE%B0/%E9%97%AD%E5%8C%85/</link>
      <pubDate>Fri, 06 Mar 2020 14:47:30 +0800</pubDate>
      
      <guid>http://codesource.online/js%E7%AC%94%E8%AE%B0/%E9%97%AD%E5%8C%85/</guid>
      <description>看个例子 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 function assert (condition, msg) { if (condition) { console.log(msg, &amp;#39;&amp;#39;) } else { console.log(error, &amp;#39;&amp;#39;) } } var outerValue = &amp;#34;samurai&amp;#34;; var later; function outerFunc() { var innerValue = &amp;#34;ninja&amp;#34;; function innerFunc(){ var a = 90; assert(outerValue === &amp;#34;samurai&amp;#34;, &amp;#34;i can see your&amp;#34;); assert(innerValue === &amp;#34;ninja&amp;#34;, &amp;#34;i can see the ninja&amp;#34;); } later = innerFunc; } function animate() { var timer = setInterval(function () { console.log(&amp;#39;time-----&amp;#39;, &amp;#39;&amp;#39;) },5) } outerFunc(); later(); later和outerFunc函数都属于全局作用域 innerValue</description>
    </item>
    
    <item>
      <title>nginx 配置免费的ssl证书</title>
      <link>http://codesource.online/nginx%E7%AC%94%E8%AE%B0/%E9%85%8D%E7%BD%AEssl%E8%AF%81%E4%B9%A6/</link>
      <pubDate>Mon, 03 Feb 2020 14:33:58 +0800</pubDate>
      
      <guid>http://codesource.online/nginx%E7%AC%94%E8%AE%B0/%E9%85%8D%E7%BD%AEssl%E8%AF%81%E4%B9%A6/</guid>
      <description>免费证书申请 1 2 3 4 5 6 7 8 9 10 11 12 wget https://dl.eff.org/certbot-auto chmod a+x ./certbot-auto ./certbot-auto certonly --manual --preferred-challenge dns -d &amp;#39;xxxx.cn&amp;#39; -d &amp;#39;xxxxx.com&amp;#39; 会提示验证你的域名，如果你在腾讯云或者阿里云注册的域名，需要添加一个TXT类型的记录: 主机记录：_acme-challenge 记录类型： TXT 记录值： foRfz_Vr2vLVGw3U8WsFc4ohMWfk4oETX89vCi-0Lx4 （这个随机生成的，看你自己的是多少） 填写完保存，然后回到终端按下 回车</description>
    </item>
    
    <item>
      <title>nginx配置跨域资源共享CORS</title>
      <link>http://codesource.online/nginx%E7%AC%94%E8%AE%B0/%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB/</link>
      <pubDate>Sat, 01 Feb 2020 20:04:30 +0800</pubDate>
      
      <guid>http://codesource.online/nginx%E7%AC%94%E8%AE%B0/%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB/</guid>
      <description>跨域 浏览器为了安全，有个策略: 同源策略， 页面中的链接必须域名一致。 为什么跨域 页面请求的接口可能位于独立api服务器， 所以就会有跨域存在。 解决问题 代理，没怎么研究 jsonp，构造javascrit 标签，利用src属性请求这个链接，返回body是可执行的js代码，代码中的函数需要本地</description>
    </item>
    
    <item>
      <title>mac挂载NTFS磁盘</title>
      <link>http://codesource.online/linux%E7%AC%94%E8%AE%B0/mac%E6%8C%82%E8%BD%BDNTFS%E7%A3%81%E7%9B%98/</link>
      <pubDate>Sat, 13 Jul 2019 10:15:00 +0800</pubDate>
      
      <guid>http://codesource.online/linux%E7%AC%94%E8%AE%B0/mac%E6%8C%82%E8%BD%BDNTFS%E7%A3%81%E7%9B%98/</guid>
      <description>查看移动硬盘的信息 diskutil list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 /dev/disk0 (internal): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme 121.3 GB disk0 1: EFI EFI 314.6 MB disk0s1 2: Apple_APFS Container disk1 121.0 GB disk0s2 /dev/disk1 (synthesized): #: TYPE NAME SIZE IDENTIFIER 0: APFS Container Scheme - +121.0 GB disk1 Physical Store disk0s2 1: APFS Volume Macintosh HD 97.9 GB disk1s1 2: APFS Volume Preboot 44.2 MB disk1s2 3: APFS Volume Recovery 509.7 MB disk1s3 4: APFS Volume VM 1.1 GB disk1s4 /dev/disk2 (external, physical): #: TYPE NAME SIZE IDENTIFIER 0: FDisk_partition_scheme *500.1 GB disk2 1: Windows_NTFS C_224 224.4 GB disk2s5 2: Windows_NTFS D_138 138.5 GB disk2s6 3: Windows_NTFS E_137 137.2 GB disk2s7 磁盘 /dev/disk2 就</description>
    </item>
    
    <item>
      <title>openresty 变量</title>
      <link>http://codesource.online/nginx%E7%AC%94%E8%AE%B0/openresty%E5%8F%98%E9%87%8F%E8%8C%83%E5%9B%B4/</link>
      <pubDate>Sun, 30 Jun 2019 14:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/nginx%E7%AC%94%E8%AE%B0/openresty%E5%8F%98%E9%87%8F%E8%8C%83%E5%9B%B4/</guid>
      <description>NGX_LUA的三种变量范围 进程间共享， nginx的所有work进程共享，使用lua_shared_dict定义，这样高并发就出触发锁。 进程内共享，lua代码中不加local关键字就是全局变量，这样的变量在同一个进程的所有请求之间共享,因为开启了lua缓存，每个work的VM虚拟</description>
    </item>
    
    <item>
      <title>Elasticsearch 安装笔记</title>
      <link>http://codesource.online/linux%E7%AC%94%E8%AE%B0/Elasticsearch_install/</link>
      <pubDate>Sat, 29 Jun 2019 23:10:00 +0800</pubDate>
      
      <guid>http://codesource.online/linux%E7%AC%94%E8%AE%B0/Elasticsearch_install/</guid>
      <description>1.概况 图片是elasticsearch-head插件查看的集群状态 这是一台虚拟机，创建了index为megacorp, ES默认是5个分片，然后每个分片一个副本，也就是10个分片;三个节点，就会出现如图的样子。 同一个分片必然不在一个节点，不然副本就没意义了。 绿色表示状态健康，黄色</description>
    </item>
    
    <item>
      <title>scrapy笔记</title>
      <link>http://codesource.online/python%E7%AC%94%E8%AE%B0/4_scrapy/</link>
      <pubDate>Wed, 12 Jun 2019 21:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/python%E7%AC%94%E8%AE%B0/4_scrapy/</guid>
      <description>1.初识爬虫 开启项目: scrapy startproject example 定义爬虫文件: cd example; scrapy genspider book_psider http://books.toscrape.com/ 定义数据最终需要的字段, 修改items.py。 如果不用pipeline处理，则yeild item， 直接 -o 到文件json文件即可。 执行爬虫 scrapy crawl book_spider -o book.json 2. 核心概念 爬虫组件 组件 描述 类型 ENGINE 引擎，框架核心组件 内部组件 SCHEDULER 调度器 内部组件 DOWNLOADER 下载</description>
    </item>
    
    <item>
      <title>一张导图了解cookie和session</title>
      <link>http://codesource.online/php%E7%AC%94%E8%AE%B0/cookie_and_session/</link>
      <pubDate>Sun, 09 Jun 2019 21:50:00 +0800</pubDate>
      
      <guid>http://codesource.online/php%E7%AC%94%E8%AE%B0/cookie_and_session/</guid>
      <description>cookie和session的区别</description>
    </item>
    
    <item>
      <title>一张图看懂centos6和7的启动流程区别</title>
      <link>http://codesource.online/linux%E7%AC%94%E8%AE%B0/centos6%E5%92%8C7%E7%9A%84%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Sun, 09 Jun 2019 10:34:58 +0800</pubDate>
      
      <guid>http://codesource.online/linux%E7%AC%94%E8%AE%B0/centos6%E5%92%8C7%E7%9A%84%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</guid>
      <description>启动流程</description>
    </item>
    
    <item>
      <title>了解一下linux开机启动</title>
      <link>http://codesource.online/linux%E7%AC%94%E8%AE%B0/%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8Blinux%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/</link>
      <pubDate>Sat, 08 Jun 2019 10:34:58 +0800</pubDate>
      
      <guid>http://codesource.online/linux%E7%AC%94%E8%AE%B0/%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8Blinux%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/</guid>
      <description>1. linux的启动等级 0 关机模式 1 单用户模式 2 无网络多用户模式 3 有网络多用户模式，如果没网络和2一样。 4.系统保留，未使用 5.GUI图形界面 6.重启模式，默认不能是这个级别，否则就会无限循环重启 正常默认就是3了, 命令行模式，有桌面的，应该默认是5. 关机就可以终端输入init 0，重</description>
    </item>
    
    <item>
      <title>python 编码reload(sys)的作用</title>
      <link>http://codesource.online/python%E7%AC%94%E8%AE%B0/3_reload_sys/</link>
      <pubDate>Thu, 02 May 2019 14:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/python%E7%AC%94%E8%AE%B0/3_reload_sys/</guid>
      <description>为什么需要sys.setdefaultencoding(&amp;ldquo;utf-8&amp;rdquo;) 因为python转码是通过unicode作为中间码的。 比如字符串 x = &amp;ldquo;你们&amp;rdquo;，本身是str， 首先我们指定了文件编码uft8，所以x是utf8编码的。 如果要转化g</description>
    </item>
    
    <item>
      <title>git_linux搭建服务器</title>
      <link>http://codesource.online/git%E7%AC%94%E8%AE%B0/linux%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E7%AB%AF/</link>
      <pubDate>Sat, 02 Mar 2019 12:01:00 +0800</pubDate>
      
      <guid>http://codesource.online/git%E7%AC%94%E8%AE%B0/linux%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E7%AB%AF/</guid>
      <description>服务端创建git用户(centos7) 1 2 3 4 5 id git # 查看是否存在git用户，存在就不创建了。 useradd git passwd git 输入密码，我设置的是xxx@123 客户端开启公钥认证认证，免密push/pull 首先服务端需要开启ssh服务 1 2 3 4 5 6 7 8 9 vim /etc/ssh/sshd_config RSAAuthentication yes PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys 如果是centos7.4以上（含7.</description>
    </item>
    
    <item>
      <title>git_tag用法</title>
      <link>http://codesource.online/git%E7%AC%94%E8%AE%B0/git%E7%9A%84tag%E5%92%8Cbranch%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sat, 02 Mar 2019 12:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/git%E7%AC%94%E8%AE%B0/git%E7%9A%84tag%E5%92%8Cbranch%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>tag 和branch的区别 Git tag是一系列commit的中的一个点，只能查看，不能移动。 branch是一系列串联的commit的线。 git tag的用法 我们常常在代码封板时,使用git 创建一个tag ,这样一个不可修改的历史代码版本就像被我们封存起来一样,不论是运维发布拉取,或者以后的代码版</description>
    </item>
    
    <item>
      <title>了解一下加密名词AES-DES-RAS-DSA-ECDSA-ECC </title>
      <link>http://codesource.online/linux%E7%AC%94%E8%AE%B0/%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B%E5%8A%A0%E5%AF%86%E5%90%8D%E8%AF%8D/</link>
      <pubDate>Sat, 02 Mar 2019 12:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/linux%E7%AC%94%E8%AE%B0/%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B%E5%8A%A0%E5%AF%86%E5%90%8D%E8%AF%8D/</guid>
      <description>加密体系 对称加密算法，加密和机密密钥一样，加密方和解密方都持有. DES加密 56位密钥长度，美国数据加密标准，DES算法的入口参数有三个：Key、Data、Mode。其中Key为7个字节共56位，是DES算法的工作密钥；Data为8个字节64位，是要被加密或被解密的数据；Mode为</description>
    </item>
    
    <item>
      <title>了解一下VM虚拟机的三种联网模式</title>
      <link>http://codesource.online/linux%E7%AC%94%E8%AE%B0/%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8BVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E4%B8%89%E7%A7%8D%E8%81%94%E7%BD%91%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 21 Feb 2019 16:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/linux%E7%AC%94%E8%AE%B0/%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8BVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E4%B8%89%E7%A7%8D%E8%81%94%E7%BD%91%E6%A8%A1%E5%BC%8F/</guid>
      <description>1.HOST-ONLY 对应图中的private to my Mac 选项 这种模式不能联网，能通过DHCP分配到ip地址，使用VMnet1网卡作为交换机，默认网关就是VMnet1的地址，能和主机通信，不能连接外网。 VMnet1网卡作为交换机，一个连接主机HOST，一个端口连接DHCP服务器（一个VM组件），剩下的链接</description>
    </item>
    
    <item>
      <title>tcp连接过程，半连接队列和全连接队列</title>
      <link>http://codesource.online/linux%E7%AC%94%E8%AE%B0/%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8Btcp%E5%8D%8A%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97%E5%92%8C%E5%85%A8%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97/</link>
      <pubDate>Fri, 15 Feb 2019 12:06:00 +0800</pubDate>
      
      <guid>http://codesource.online/linux%E7%AC%94%E8%AE%B0/%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8Btcp%E5%8D%8A%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97%E5%92%8C%E5%85%A8%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97/</guid>
      <description>tcp三次握手的过程 第一次：客户端发送SYN(Synchronize Sequence Numbers)报文，标志位SYN=1,序列号seq=j。 第二次：服务端收到SYN报文后，回应ACK(Acknowledgement)，标志位ACK=1,确认号ack为j+1， 同时自己也发送一个SYN报文，SY</description>
    </item>
    
    <item>
      <title>python模块导入</title>
      <link>http://codesource.online/python%E7%AC%94%E8%AE%B0/2__init__%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%9C%E7%94%A8/</link>
      <pubDate>Thu, 14 Feb 2019 14:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/python%E7%AC%94%E8%AE%B0/2__init__%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%9C%E7%94%A8/</guid>
      <description>python 导入模块文件的2中方式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import lib or from lib import * # 导入子目录中模块 import tmp.lib3 or from tmp.lib3 import * # 导入上级目录 import sys sys.path.append(&amp;#39;home/app/&amp;#39;) import mod import xxxx 与import类似, 被导入的module仍然会执行且仅执行一次 from *** import 的实质 当以 &amp;ldquo;from *** import &amp;quot; 方式导入module时, python会在当前module 的命名空间</description>
    </item>
    
    <item>
      <title>python类的三种装饰器</title>
      <link>http://codesource.online/python%E7%AC%94%E8%AE%B0/1_%E4%B8%89%E7%A7%8D%E8%A3%85%E9%A5%B0%E5%99%A8/</link>
      <pubDate>Thu, 14 Feb 2019 14:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/python%E7%AC%94%E8%AE%B0/1_%E4%B8%89%E7%A7%8D%E8%A3%85%E9%A5%B0%E5%99%A8/</guid>
      <description>property装饰器作用和原理 我们知道c++中有public,projected,private等修饰类私有属性的作用，这样就限定了某些属性只能读取，不能修改；有些能读也能需改。 设置C++类中的一个属性可以自定义方法get和set方法。 python中实现这种原理，就需要装饰器p</description>
    </item>
    
    <item>
      <title>ip地址和子网掩码，广播地址关系</title>
      <link>http://codesource.online/linux%E7%AC%94%E8%AE%B0/ip%E5%9C%B0%E5%9D%80%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81%E7%9A%84%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Tue, 12 Feb 2019 14:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/linux%E7%AC%94%E8%AE%B0/ip%E5%9C%B0%E5%9D%80%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81%E7%9A%84%E5%85%B3%E7%B3%BB/</guid>
      <description>什么是ip地址？ ip是在一个网段中的一台计算机的ip地址（192.168.1.2） 如果你家的联通宽带给你家的公网ip地址是10.10.123.234(假设的)，那么接到你家路由器，首先路由器需要有一个ip地址，一般是192.168.1.1（也可能是192.168.0.1），这个应</description>
    </item>
    
    <item>
      <title>linux虚拟机配置静态ip</title>
      <link>http://codesource.online/linux%E7%AC%94%E8%AE%B0/linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip/</link>
      <pubDate>Tue, 12 Feb 2019 14:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/linux%E7%AC%94%E8%AE%B0/linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip/</guid>
      <description>1. mac上的虚拟机使用（自动模式）就是桥接模式。 2. 查看自己的网卡名 ifconfig 命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 [root@localhost ~]# ifconfig ens33: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500 inet 192.168.2.132 netmask 255.255.255.0 broadcast 192.168.2.255 inet6 fe80::315:b3ba:674b:3fdc prefixlen 64 scopeid 0x20&amp;lt;link&amp;gt; ether 00:0c:29:14:d2:38 txqueuelen 1000 (Ethernet) RX packets 56630 bytes 20928797 (19.9 MiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 24078 bytes 2636531 (2.5 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 lo: flags=73&amp;lt;UP,LOOPBACK,RUNNING&amp;gt; mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10&amp;lt;host&amp;gt; loop txqueuelen 1 (Local Loopback) RX packets 2517 bytes 223561 (218.3 KiB)</description>
    </item>
    
    <item>
      <title>最小化安装centos7配置问题 </title>
      <link>http://codesource.online/linux%E7%AC%94%E8%AE%B0/2018-10-05_linux/</link>
      <pubDate>Fri, 05 Oct 2018 10:34:58 +0800</pubDate>
      
      <guid>http://codesource.online/linux%E7%AC%94%E8%AE%B0/2018-10-05_linux/</guid>
      <description>最小化安装启用网卡 1 2 3 4 5 vi /etc/sysconfig/network-scripts/ifcfg-[网卡] 修改 ONBOOT=yes service network restart ip 命令替代了config, 常见用法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 ip link show # 显示网络接口信息 ip link set eth0 upi # 开启网卡 ip link set eth0 down # 关闭网卡 ip link</description>
    </item>
    
    <item>
      <title>centos6.4 升级python到2.7</title>
      <link>http://codesource.online/linux%E7%AC%94%E8%AE%B0/centos6.4%E5%8D%87%E7%BA%A7python/</link>
      <pubDate>Sat, 30 Jun 2018 10:15:00 +0800</pubDate>
      
      <guid>http://codesource.online/linux%E7%AC%94%E8%AE%B0/centos6.4%E5%8D%87%E7%BA%A7python/</guid>
      <description>1. download source 1 2 wget https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tgz 2. compire and install 1 2 3 4 tar zxvf Python-2.7.12.tgz cd Python-2.7.12 ./configure --prefix=/usr/local/python27 &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install &amp;amp;&amp;amp; echo $? 如果以上输出为0，说明没有报错，安装正常 3. add path and backup the python2.6 1 2 3 4 5 6 7 移除以前的版本 mv /usr/bin/python /usr/bin/python26 创建软连接 ln -s /usr/local/python27/bin/python /usr/bin/python 查看版本是否升级成功 python -V Python 2.7.12 4. modify yum 1 2 3 4 如果不修改此项，会导致yum无法使用 vim /usr/bin/yum 修改第一行即可，将环境变量指向以</description>
    </item>
    
    <item>
      <title>centos6.4 安装python mysql扩展</title>
      <link>http://codesource.online/linux%E7%AC%94%E8%AE%B0/centos6.4install-mysql-python/</link>
      <pubDate>Sat, 30 Jun 2018 10:15:00 +0800</pubDate>
      
      <guid>http://codesource.online/linux%E7%AC%94%E8%AE%B0/centos6.4install-mysql-python/</guid>
      <description>要想使python可以操作mysql 就需要MySQL-python驱动，它是python 操作mysql必不可少的模块。 下载地址：https://pypi.python.org/pypi/MySQL-python/ 下载MySQL-python-1.2.5.zip 文件之后直接解压。进</description>
    </item>
    
    <item>
      <title>git 常见操作</title>
      <link>http://codesource.online/git%E7%AC%94%E8%AE%B0/git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sat, 26 May 2018 12:00:00 +0800</pubDate>
      
      <guid>http://codesource.online/git%E7%AC%94%E8%AE%B0/git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid>
      <description>创建分支 1 git branch new_branch 本地删除分支 1 git branch -D delete_branch 更新到远程删除分支 1 2 git checkout master git pull -u -u origin :delete_branch git pull 失败提示fatal: refusing to merge unrelated histories ,处理方法 1 2 git pull origin master --allow-unrelated-historiesn 查看提交提记录 1 2 3 4 5 git log git log -p -2 #查看最近两次的提交差异 git log --stat #仅仅现实行数的变更 git log --pretty=oneline #每次提交，在一行显示 git log --pretty=format:&amp;#34;%h - %an, %ar : %s&amp;#34; #格式显示 选项</description>
    </item>
    
    <item>
      <title>nginx支持php</title>
      <link>http://codesource.online/php%E7%AC%94%E8%AE%B0/nginx_install_php/</link>
      <pubDate>Sat, 10 Dec 2016 11:30:55 +0800</pubDate>
      
      <guid>http://codesource.online/php%E7%AC%94%E8%AE%B0/nginx_install_php/</guid>
      <description>ubuntu14.04 +nginx+php5-fpm 一安装Nginx apt-get install nginx - 配置nginx nginx所有的配置在 /etc/nginx/nginx.conf中 nginx.conf配置里面包括了 include /etc/nginx/conf.d/*.conf; include /etc/nginx/sites-enabled/*; 这两个配置，所以这里面的配置也是有效的。 错误日志 error_log /var/log/nginx/error.log; 这里我们把配置写在 /etc/nginx/sites-available/def</description>
    </item>
    
    <item>
      <title>DLL导出方法</title>
      <link>http://codesource.online/linux%E7%AC%94%E8%AE%B0/dll_export/</link>
      <pubDate>Thu, 06 Oct 2016 20:04:30 +0800</pubDate>
      
      <guid>http://codesource.online/linux%E7%AC%94%E8%AE%B0/dll_export/</guid>
      <description>DLL导出方法 dll导出方法1 ： 模块定义def文件，不支持c++的重载，以c的方式编译，导出的函数名不被修改，这样 显示调用dll取得函数地址就没事。提供给vb，python等语言,需要_stdcall约定(函数自己清理堆栈)，这样无论是c文件还是c++文件，导出函数都会被改名字。</description>
    </item>
    
    <item>
      <title>linux常用函数手册</title>
      <link>http://codesource.online/linux%E7%AC%94%E8%AE%B0/linux_c_help/</link>
      <pubDate>Wed, 05 Oct 2016 20:06:30 +0800</pubDate>
      
      <guid>http://codesource.online/linux%E7%AC%94%E8%AE%B0/linux_c_help/</guid>
      <description>linux linux常用函数手册</description>
    </item>
    
    <item>
      <title>LinuxFTP的建立</title>
      <link>http://codesource.online/linux%E7%AC%94%E8%AE%B0/LinuxFTP/</link>
      <pubDate>Sun, 31 Jul 2016 11:30:55 +0800</pubDate>
      
      <guid>http://codesource.online/linux%E7%AC%94%E8%AE%B0/LinuxFTP/</guid>
      <description>linux FTP建立，条件： 安装vsftpd： 配置vsftpd的配置文件： vim /etc/vsftpd.conf anonymous_enbale =NO //关闭匿名登录 local_enbale=YES //允许本地用户，就是ftp建立者的用户名和密码 write_enbale=YES //允许写入，就是上传文件到ftp 反注释掉： ascii_upload_enbale=YES ascii_download_enbale=YES 默认的ftp目录就是home下的user目录，包含桌面，下载等等文件夹。</description>
    </item>
    
    <item>
      <title>常见加密方式</title>
      <link>http://codesource.online/linux%E7%AC%94%E8%AE%B0/%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B%E5%8A%A0%E5%AF%86/</link>
      <pubDate>Thu, 21 Jul 2016 14:35:58 +0800</pubDate>
      
      <guid>http://codesource.online/linux%E7%AC%94%E8%AE%B0/%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B%E5%8A%A0%E5%AF%86/</guid>
      <description>* 加密密钥和解密密钥是一样的。 非对称加密： 1 2 * (也叫公钥加密) * 两个密钥在加密和解密中配合使用，密钥对具有特殊的互补关系，密钥对在数学上存在特殊关系。 邮件的电子签名过程： 1 2 * 捕获邮件正文--&amp;gt;计算邮件哈希值--&amp;gt;检索发件人私钥--&amp;gt;用发件人私钥加密哈希值--</description>
    </item>
    
    <item>
      <title>git 配置文件</title>
      <link>http://codesource.online/git%E7%AC%94%E8%AE%B0/git%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 28 Jun 2016 14:33:58 +0800</pubDate>
      
      <guid>http://codesource.online/git%E7%AC%94%E8%AE%B0/git%E9%85%8D%E7%BD%AE/</guid>
      <description>基于公司是代理上网的，所以配置windows下的.gitconfig文件如下： 1 2 3 4 5 6 7 [http] proxy = 代理ip:代理port [user] email = xxxxx@gmail.com name =xxxxxhhh [gui] encoding = utf-8 #代码库统一使用utf-8 由于本人电脑是日语版OS，所以GIT终端显示中文字体是乱码，所以索性设置全部 使用utf-8编码。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://codesource.online/hugo/hugo_template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://codesource.online/hugo/hugo_template/</guid>
      <description>介绍hugo的模板 hugo 使用go的html/template 和text/templete 库为基础进行模板操作 下面只是基础的go template操作，为了更深度的了解请看 go文档 go 模板提供了一种非常简单的模板语言，他坚信只有最基本的逻辑才是属于模板和视图层。 基本语法 go 模板是html文件</description>
    </item>
    
    <item>
      <title></title>
      <link>http://codesource.online/vue%E7%AC%94%E8%AE%B0/vue%E8%B7%AF%E7%94%B1%E5%99%A8%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://codesource.online/vue%E7%AC%94%E8%AE%B0/vue%E8%B7%AF%E7%94%B1%E5%99%A8%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
      <description>1. 起步 vue路由是为了什么 为了单页面应用，切换不同的组件进行渲染展示 前后端没有分离的时候，比如thinkphp，django这些后端框架做的web，切换功能时基本都是， 每个url请求一次后端服务器数据，然后浏览器渲染页面 vue 既然是单页面，每个功能切换都只变动需要渲染的组件，这样避免</description>
    </item>
    
  </channel>
</rss>
