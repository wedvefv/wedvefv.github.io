(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{414:function(t,a,i){"use strict";i.r(a);var v=i(56),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,i=t._self._c||a;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h2",{attrs:{id:"tag-和branch的区别"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#tag-和branch的区别"}},[t._v("#")]),t._v(" tag 和branch的区别")]),t._v(" "),i("ul",[i("li",[t._v("Git tag是一系列commit的中的一个点，只能查看，不能移动。")]),t._v(" "),i("li",[t._v("branch是一系列串联的commit的线。")])]),t._v(" "),i("h3",{attrs:{id:"git-tag的用法"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-tag的用法"}},[t._v("#")]),t._v(" git tag的用法")]),t._v(" "),i("ul",[i("li",[t._v("我们常常在代码封板时,使用git 创建一个tag ,这样一个不可修改的历史代码版本就像被我们封存起来一样,不论是运维发布拉取,或者以后的代码版本管理,都是十分方便的")])]),t._v(" "),i("h3",{attrs:{id:"git的tag功能"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git的tag功能"}},[t._v("#")]),t._v(" git的tag功能")]),t._v(" "),i("ul",[i("li",[t._v("git 下打标签其实有2种情况\n轻量级的：它其实是一个独立的分支,或者说是一个不可变的分支.指向特定提交对象的引用")]),t._v(" "),i("li",[t._v("带附注的：实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证,电子邮件地址和日期，一般我们都建议使用含附注型的标签，以便保留相关信息\n所以我们推荐使用第二种标签形式")])]),t._v(" "),i("h3",{attrs:{id:"创建tag"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#创建tag"}},[t._v("#")]),t._v(" 创建tag")]),t._v(" "),i("ul",[i("li",[t._v("git tag -a V1.2 -m 'release 1.2'")]),t._v(" "),i("li",[t._v("上面的命令我们成功创建了本地一个版本 V1.2 ,并且添加了附注信息 'release 1.2'")])]),t._v(" "),i("h2",{attrs:{id:"查看tag"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#查看tag"}},[t._v("#")]),t._v(" 查看tag")]),t._v(" "),i("ul",[i("li",[i("p",[t._v("git tag")])]),t._v(" "),i("li",[i("p",[t._v("要显示附注信息,我们需要用 show 指令来查看")])]),t._v(" "),i("li",[i("p",[t._v("git show V1.2")])]),t._v(" "),i("li",[i("p",[t._v("但是目前这个标签仅仅是提交到了本地git仓库.如何同步到远程代码库")])]),t._v(" "),i("li",[i("p",[t._v("git push origin --tags")])]),t._v(" "),i("li",[i("p",[t._v("如果刚刚同步上去,你缺发现一个致命bug ,需要重新打版本,现在还为时不晚.")])]),t._v(" "),i("li",[i("p",[t._v("git tag -d V1.2")])]),t._v(" "),i("li",[i("p",[t._v("到这一步我们只是删除了本地 V1.2的版本,可是线上V1.2的版本还是存在,如何办?这时我们可以推送的空的同名版本到线下,达到删除线上版本的目标:")])]),t._v(" "),i("li",[i("p",[t._v("git push origin :refs/tags/V1.2")])]),t._v(" "),i("li",[i("p",[t._v("如何获取远程版本?")])]),t._v(" "),i("li",[i("p",[t._v("git fetch origin tag V1.2")])]),t._v(" "),i("li",[i("p",[t._v("这样我们可以精准拉取指定的某一个版本.适用于运维同学部署指定版本.")])])])])}),[],!1,null,null,null);a.default=_.exports}}]);