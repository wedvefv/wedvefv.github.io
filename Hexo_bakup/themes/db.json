{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/head_icon.png","path":"images/head_icon.png","modified":0,"renderable":0},{"_id":"themes/jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","path":"js/jquery.qrcode-0.12.0.min.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by.svg","path":"img/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/jacman.jpg","path":"img/jacman.jpg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":0,"renderable":1},{"_id":"source/images/vmnet.png","path":"images/vmnet.png","modified":0,"renderable":0},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/author.jpg","path":"img/author.jpg","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/banner.jpg","path":"img/banner.jpg","modified":0,"renderable":1},{"_id":"source/images/centos6.png","path":"images/centos6.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"57a1dac4f84cacfe9b27c171a1b334cf5b687625","modified":1551521797953},{"_id":"themes/jacman/LICENSE","hash":"931516aa36c53eb7843c83d82662eb50cc3c4367","modified":1551521799059},{"_id":"themes/jacman/README.md","hash":"098545637b0aeb27b14707c15e429470c603d78d","modified":1551521799133},{"_id":"themes/jacman/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1551521799133},{"_id":"themes/jacman/README_zh.md","hash":"9c73931bca4883de13eedd4be254da547d4ca52e","modified":1551521799134},{"_id":"themes/jacman/_config.yml","hash":"df61051747295c56bca81fa0f8fdfdd4ebdce682","modified":1558278033865},{"_id":"source/.idea/misc.xml","hash":"7df46872d1421797d543d0323da2e81710cc573d","modified":1555207947587},{"_id":"source/.idea/modules.xml","hash":"0d4d6df4a6d19c6b58126de4ec6d858fb56ee699","modified":1555207947613},{"_id":"source/.idea/workspace.xml","hash":"50a36de0f5895e777970f493d426cb94fd08e499","modified":1557493759380},{"_id":"source/.idea/source.iml","hash":"980957b57c4f1eae5e85d664d8375f83d47d3e5a","modified":1555207947565},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1560094083417},{"_id":"source/_posts/.vscode-upload.json","hash":"2e69b61f6f51c158c3fb6adee6c26eb8d92d87bb","modified":1551521797980},{"_id":"source/about/index.md","hash":"1f7a5ff6188e797e26546401aff8a03c57367701","modified":1551521798005},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1551521797955},{"_id":"source/images/head_icon.png","hash":"a82e07e691b9f57f86c475facad1d5aa5bbbd3f4","modified":1551521797957},{"_id":"source/tags/index.md","hash":"11cfc7d4413e791aaf7a35355578351f0fdaf4de","modified":1558277461293},{"_id":"themes/jacman/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1551521799148},{"_id":"themes/jacman/.git/config","hash":"71a17f0848f3cb95bfe3e9ca9596648be30c46ff","modified":1551521799137},{"_id":"themes/jacman/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1551521799143},{"_id":"themes/jacman/languages/default.yml","hash":"eea72d6138497287c0b3f4bd93e4f6f62b7aff37","modified":1551521799132},{"_id":"themes/jacman/.git/packed-refs","hash":"872b592ab4bac2713bb4bfe4ab6c15f54c75eae1","modified":1551521799157},{"_id":"themes/jacman/languages/zh-CN.yml","hash":"1f3b9d00dd4322352b0c9c82a76dc9865a616d41","modified":1551521799133},{"_id":"themes/jacman/.git/index","hash":"fe9230d6c24fa26d1c017dfa5ab81f87e5970d82","modified":1555167738405},{"_id":"themes/jacman/languages/zh-TW.yml","hash":"61a02ba818d641579a86fcd7f5926ab1e6ab5f70","modified":1551521799132},{"_id":"themes/jacman/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1551521799062},{"_id":"themes/jacman/layout/layout.ejs","hash":"5b4289a4526899809b9c2facea535367ff51ba2b","modified":1551521799064},{"_id":"themes/jacman/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1551521799075},{"_id":"themes/jacman/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1551521799135},{"_id":"themes/jacman/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1551521799061},{"_id":"themes/jacman/layout/index.ejs","hash":"75cef2172c286994af412e11ab7f4f5a0daaf1f5","modified":1551521799062},{"_id":"themes/jacman/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1551521799062},{"_id":"themes/jacman/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1551521799063},{"_id":"source/_posts/.vscode/settings.json","hash":"a30febd21ccfe4e21bbb0cca934f36fa00f4327e","modified":1551521797998},{"_id":"source/_posts/db/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1558276217030},{"_id":"source/_posts/linux/2018-10-05_linux.md","hash":"f9586b23b7cd0cf9d8f2f35f4ee7d73b93632b9c","modified":1551521797992},{"_id":"source/_posts/linux/AES_RSA_DSA.md","hash":"667d9593e57edc1dfd5e9c1d569d4641a3853d57","modified":1558275518605},{"_id":"source/_posts/linux/Vm虚拟机的三种联网模式区别.md","hash":"6fc70349152748de472026216173d5138036b625","modified":1551521797987},{"_id":"source/_posts/linux/LinuxFTP.md","hash":"b0ed9c5f3475017d4a09d11fa0d47a970d6cb67f","modified":1551521797991},{"_id":"source/_posts/linux/apache_wsgi.md","hash":"44d54bc3376c538e7bee754f0e8419e70051f840","modified":1551521797993},{"_id":"source/_posts/linux/atom.md","hash":"8ff576f96e0670a80c31abc6ca76dfc3c890fc64","modified":1558275518610},{"_id":"source/_posts/linux/centos6.4install-mysql-python.md","hash":"c6bd2d76b207e88e2afb144c11ec2b9abba944dd","modified":1558276217032},{"_id":"source/_posts/linux/centos6.4升级python.md","hash":"206fce35b1f8e720f5181888579adfbecf1f3d80","modified":1551521797993},{"_id":"source/_posts/linux/centos6和7的启动流程.md","hash":"7e2d9b400e2b686129e7584e204fe8354211c085","modified":1560074932957},{"_id":"source/_posts/linux/dll_export.md","hash":"ac15f9838743520425710881b98abde886b6cad3","modified":1558276217032},{"_id":"source/_posts/linux/git_1_config.md","hash":"d56fec46c86f0dea8f165e181211e2a4f1d6df6d","modified":1558275518607},{"_id":"source/_posts/linux/git_2_operate.md","hash":"5fc5f3d280237b7eb8866bb4ca74b4869f85a1cb","modified":1558275518607},{"_id":"source/_posts/linux/git_linux搭建服务器.md","hash":"d490ab85f99d85b32b337a7fe4c828ecaacdd3a1","modified":1558275518608},{"_id":"source/_posts/linux/git_tag用法.md","hash":"a04560b5c6273b2ab0850a79f6e04a3b23a1ff2c","modified":1558275518608},{"_id":"source/_posts/linux/ip地址子网掩码的关系.md","hash":"96bb48796c69b4104ca669a416d89ed5ba0373e8","modified":1551521797989},{"_id":"source/_posts/linux/linux_c_help.md","hash":"bc005906b9f8912aa5c9e57b6506441cfa3b5549","modified":1551521797986},{"_id":"source/_posts/linux/linux虚拟机配置静态ip.md","hash":"0e8535f717c88a23d8b9c173b3d41da922303b00","modified":1551521797986},{"_id":"source/_posts/linux/nginx_config.md","hash":"d45f765e6401319e3062f147388bd5b0a1c7aa26","modified":1551521797988},{"_id":"source/_posts/linux/public_key_encryption.md","hash":"cf293ca0beaa93219c29c2616d016a603e55f27b","modified":1558276217033},{"_id":"source/_posts/linux/nginx连接数和内核参数关系.md","hash":"d31c282624db23951c1f68bbc85c0690a18349d3","modified":1551521797984},{"_id":"source/_posts/linux/tcp半连接队列和全连接队列.md","hash":"58092a4652e2fcb2319d2d9da8b21b4e9fe90eb7","modified":1551521797984},{"_id":"source/_posts/linux/vim-emmet.md","hash":"2a5620f1c5559a638d65da49e22a3442ca24b54b","modified":1558275518610},{"_id":"source/_posts/linux/vim-markdown.md","hash":"18a1634ed2dd627248966246390f2c7244c72f9d","modified":1558275518610},{"_id":"source/_posts/linux/vim_luanma.md","hash":"45f838b952c27a3c5592b4d040875c992ee752aa","modified":1558275518610},{"_id":"source/_posts/linux/vim_nerdtree.md","hash":"6fdd763864013934c451963816c7e2216bd20b25","modified":1558275518611},{"_id":"source/_posts/linux/vim_syntastic.md","hash":"399c076735b15da78ce27e68f9736776189c6c2b","modified":1558275518611},{"_id":"source/_posts/linux/win_time_func.md","hash":"42ef46bc359ec8f77b04c87393ba91a2b027afc9","modified":1558276217033},{"_id":"source/_posts/linux/windowsFTP.md","hash":"d79698cf214e488976c2f7339b96dc2386bb43ff","modified":1558276217033},{"_id":"source/_posts/linux/windows_pipe.md","hash":"498adadb385e6db8243d3e155b17f975e5e84e78","modified":1558276217033},{"_id":"source/_posts/ngx_lua/cookie_and_session.md","hash":"59fea8bcd3e0cea9f680ecd541d9101d68bf810f","modified":1560088371990},{"_id":"source/_posts/linux/一文了解linux开机启动.md","hash":"6ce631acefa70712dc2490e11927b37b01eba357","modified":1560040431058},{"_id":"themes/jacman/.git/logs/HEAD","hash":"d3d26d4d6f5639d87daa4d53bb23f32f4170c3af","modified":1551521799146},{"_id":"themes/jacman/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1551521799145},{"_id":"themes/jacman/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1551521799149},{"_id":"themes/jacman/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1551521799152},{"_id":"themes/jacman/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1551521799150},{"_id":"themes/jacman/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1551521799151},{"_id":"themes/jacman/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1551521799153},{"_id":"themes/jacman/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1551521799152},{"_id":"themes/jacman/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1551521799150},{"_id":"themes/jacman/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1551521799149},{"_id":"themes/jacman/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1551521799151},{"_id":"themes/jacman/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1551521799153},{"_id":"themes/jacman/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1551521799151},{"_id":"themes/jacman/layout/_partial/archive.ejs","hash":"2c7395e7563fe016521712a645c28a13f952d52a","modified":1551521799069},{"_id":"themes/jacman/layout/_partial/analytics.ejs","hash":"697601996220fe0a0f9cd628be67dec3c86ae2aa","modified":1551521799071},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","hash":"3e1f1d8dc38b1e17c523d1176f7ee503fc648045","modified":1551521799073},{"_id":"themes/jacman/layout/_partial/article.ejs","hash":"261ecacb8456f4cb972632b6a9103860fa63b9a3","modified":1551521799074},{"_id":"themes/jacman/layout/_partial/article_row.ejs","hash":"4cb855d91ece7f67b2ca0992fffa55472d0b9c93","modified":1551521799069},{"_id":"themes/jacman/layout/_partial/footer.ejs","hash":"5f80bf6c6ddcf8c28c4599cd1540b14b25d54f18","modified":1551521799072},{"_id":"themes/jacman/layout/_partial/head.ejs","hash":"99cce716476db52004d4ffeb6a2f47eea5286130","modified":1551521799071},{"_id":"themes/jacman/layout/_partial/categories.ejs","hash":"8a52d0344d5bce1925cf586ed73c11192925209b","modified":1551521799073},{"_id":"themes/jacman/layout/_partial/header.ejs","hash":"18515612344ff048b9372b91b7eef6f3b143801f","modified":1551521799070},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","hash":"c4f527fff0070fbe65919053a16224412317f40d","modified":1551521799074},{"_id":"themes/jacman/layout/_partial/search.ejs","hash":"1083824a6c6c3df02767f2f3b727aee78ebb76ec","modified":1551521799070},{"_id":"themes/jacman/layout/_partial/pagination.ejs","hash":"6146ac37dfb4f8613090bc52b3fc8cfa911a186a","modified":1551521799069},{"_id":"themes/jacman/layout/_partial/tags.ejs","hash":"b33b2b5d08f1d53a8de25a95f660f7f1cea7b3cb","modified":1551521799072},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","hash":"d42994ac696f52ba99c1cbac382cd76d5b04a3e8","modified":1551521799064},{"_id":"themes/jacman/layout/_partial/totop.ejs","hash":"bea5bb7cb9350b8af7d97a8d223af63a5b30ab78","modified":1551521799070},{"_id":"themes/jacman/layout/_partial/tinysou_search.ejs","hash":"06ecddc8a9d40b480fe2e958af1dab857a9d5441","modified":1551521799073},{"_id":"themes/jacman/layout/_widget/archive.ejs","hash":"39ea6b7888406fbd1b4cf236ebd718e881493374","modified":1551521799077},{"_id":"themes/jacman/layout/_widget/category.ejs","hash":"c1fae96b5053da021bcc04ab2ce5c2c8d30de8a2","modified":1551521799076},{"_id":"themes/jacman/layout/_widget/links.ejs","hash":"e49868063439c2092cdf9a8ec82cc295b0e42f66","modified":1551521799079},{"_id":"themes/jacman/layout/_widget/douban.ejs","hash":"e3820c36169e88663e6c9177666b2904c1ce47e6","modified":1551521799078},{"_id":"themes/jacman/layout/_widget/github-card.ejs","hash":"d49a8d609c5fbafa9e7ad328163565af03306519","modified":1551521799078},{"_id":"themes/jacman/layout/_widget/rss.ejs","hash":"0a4b5f2a2e36a1d504fe2e7c6c8372cbb4628aab","modified":1551521799076},{"_id":"themes/jacman/layout/_widget/tag.ejs","hash":"7e82ad9c916b9ce871b2f65ce8f283c5ba47947b","modified":1551521799077},{"_id":"themes/jacman/layout/_widget/weibo.ejs","hash":"a31c2b223d0feb2a227e203cac9e5d13b7d328a8","modified":1551521799078},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","hash":"10a1001189d5c28ce6d42494563b9637c302b454","modified":1551521799075},{"_id":"themes/jacman/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1551521799083},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1551521799083},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1551521799081},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1551521799084},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1551521799082},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1551521799081},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1551521799081},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1551521799082},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1551521799080},{"_id":"themes/jacman/source/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1551521799100},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1551521799100},{"_id":"themes/jacman/source/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1551521799099},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1551521799101},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1551521799111},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1551521799107},{"_id":"themes/jacman/source/img/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1551521799104},{"_id":"themes/jacman/source/img/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1551521799102},{"_id":"themes/jacman/source/img/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1551521799109},{"_id":"themes/jacman/source/img/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1551521799105},{"_id":"themes/jacman/source/img/favicon.ico","hash":"2d22a3e0c7905a894e832c831dd91c29c209c7a5","modified":1551521799103},{"_id":"themes/jacman/source/img/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1551521799110},{"_id":"themes/jacman/source/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1551521799102},{"_id":"themes/jacman/source/img/logo.png","hash":"633faf4bf2305496220b5ed7d518ce802e52665f","modified":1551521799108},{"_id":"themes/jacman/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1551521799107},{"_id":"themes/jacman/source/img/logo.svg","hash":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1551521799112},{"_id":"themes/jacman/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1551521799116},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1551521799126},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1551521799129},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1551521799118},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1551521799130},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1551521799129},{"_id":"themes/jacman/source/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1551521799125},{"_id":"themes/jacman/source/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1551521799120},{"_id":"themes/jacman/source/css/style.styl","hash":"a0a45af186a72ae68979bf26f2a5d0d2303189ca","modified":1551521799096},{"_id":"themes/jacman/source/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1551521799128},{"_id":"source/_posts/db/redis/redis文章分组的用途.md","hash":"885a8a6115529a2647be67ab03a8adb928900fe0","modified":1558275518609},{"_id":"source/_posts/db/redis/redis文章投票.md","hash":"4a2a81c59ad451ee871056dfae9bb8832861cb70","modified":1558275518609},{"_id":"source/_posts/db/redis/redis文章发布.md","hash":"ec3cd72281c7b1db9c866329fedb1232724699d5","modified":1558275518609},{"_id":"source/_posts/language/html/ajax.md","hash":"1d0f61482896916bd82f24b48e9e51dbe715138d","modified":1558276217030},{"_id":"source/_posts/language/html/html5_tags.md","hash":"87f05e0be92fcfda6001b53885cf10fbcb473317","modified":1558276217030},{"_id":"source/_posts/language/html/weixin.md","hash":"b67483cc04b71de59514a649e7d9ddc69b711b00","modified":1558276217030},{"_id":"source/_posts/language/python/1_三种装饰器.md","hash":"09a981cee46953bedce0546569f19f76b1333b80","modified":1558275518608},{"_id":"source/_posts/language/python/1基本结构.md","hash":"50d814ce1a1153f0c1e55be8b92600cda6fcf5af","modified":1558276217031},{"_id":"source/_posts/language/python/2_模板.md","hash":"5555460b21f1055cc53e3eb5017b3d18607c4dff","modified":1558276217031},{"_id":"source/_posts/language/python/2__init__文件的作用.md","hash":"cc5f71f4da759ab24f04e2f0597f485932b1154b","modified":1558275518608},{"_id":"source/_posts/language/python/3_reload_sys.md","hash":"2e0ed50ec7013820d9d96b83d999f8812753243c","modified":1558275518609},{"_id":"source/_posts/language/python/3_模板的bootstrap扩展.md","hash":"7ec532a714d3482f93b306cf6d022e4a8065b5ea","modified":1558276217031},{"_id":"source/_posts/language/python/4_web表单.md","hash":"55dfc743b18156e5ef9554dfa3e12f8dd39e0cec","modified":1558276217031},{"_id":"source/_posts/language/python/5_数据库1.md","hash":"4959e6e446bf1146ce2adcc411af448c9a10c34b","modified":1558276217031},{"_id":"source/_posts/language/python/6_数据库2.md","hash":"879ba6214c37649bec32061ba57ead637b99d51f","modified":1558276217032},{"_id":"source/_posts/language/python/7_数据迁移.md","hash":"374407786441eaf025d5fcfbb0a1cc84802c4521","modified":1558276217032},{"_id":"source/_posts/language/python/9_大型程序结构.md","hash":"6a54eade8a171f4146a7b114acb133409d683352","modified":1558276217032},{"_id":"source/_posts/language/python/8_邮件模块.md","hash":"232d44376ddfa4ff7982f499690ea6c1a3770ad8","modified":1558276217032},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1551521799100},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1551521799123},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1551521799127},{"_id":"themes/jacman/source/font/fontdiao.svg","hash":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1551521799121},{"_id":"source/images/vmnet.png","hash":"92bde33a3ddb059180fa695fea6469c2c07f43f2","modified":1551521797958},{"_id":"themes/jacman/.git/objects/pack/pack-5ba75a45ab5d1b3ca3532ebb350da48bda15ff12.idx","hash":"23569c1890ad0d6cde3adde42dad76a0964b4752","modified":1551521799142},{"_id":"themes/jacman/.git/refs/heads/master","hash":"cdf7ebb26811b17304103dcf164bb82b88b4f841","modified":1551521799154},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","hash":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1551521799066},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","hash":"62584b25f34451818e659e417fdfd18aa3249900","modified":1551521799067},{"_id":"themes/jacman/layout/_partial/post/article.ejs","hash":"b09e3acea7076e1f01dfe0c2295e19951ea09437","modified":1551521799068},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","hash":"0e37bababc8f4659f5b59a552a946b46d89e4158","modified":1551521799067},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","hash":"b12ec08a5845a3d8c01257614f1dfead879c87d2","modified":1551521799066},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","hash":"7de9c07a4c968429a8088c31a28b7f3a993ded1b","modified":1551521799065},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","hash":"d7f5960039ac74924559ab6ba03c64457b8f0966","modified":1551521799068},{"_id":"themes/jacman/layout/_partial/post/header.ejs","hash":"36a705942b691abe0d643ea8afa339981b32f6f2","modified":1551521799066},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1551521799085},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1551521799088},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1551521799085},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1551521799088},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1551521799087},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1551521799086},{"_id":"themes/jacman/source/img/author.jpg","hash":"8b8e61b0e6dcbdf2e285983b1a0ca3044ec42a2f","modified":1551521799113},{"_id":"themes/jacman/source/css/_base/variable.styl","hash":"cb652eb83c28a208743fabab92de896f8b7cbf7b","modified":1551521799098},{"_id":"themes/jacman/source/css/_partial/aside.styl","hash":"506fde1d67ce750452cbe84bee01a19c7d027c5e","modified":1551521799094},{"_id":"themes/jacman/source/css/_partial/article.styl","hash":"c69641b4a34a8c62986b335414413dbde26de25e","modified":1551521799089},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","hash":"e85f1192283f043115c272a9deb3cb6ced793990","modified":1551521799091},{"_id":"themes/jacman/source/css/_partial/footer.styl","hash":"1911613a19b605a58f801c21b03b5d4c83b90f9c","modified":1551521799092},{"_id":"themes/jacman/source/css/_partial/gallery.styl","hash":"7246809f4ce3166ec1b259bf475cae1a48e29aad","modified":1551521799094},{"_id":"themes/jacman/source/css/_partial/header.styl","hash":"5121ceb712be3f2dde98b8b6e589b546e19eab8f","modified":1551521799093},{"_id":"themes/jacman/source/css/_partial/helper.styl","hash":"1136600932b97534b88465bf05ef313630b2de3d","modified":1551521799091},{"_id":"themes/jacman/source/css/_partial/totop.styl","hash":"96363d7c5aaed5f649667fc0752a62620a67e872","modified":1551521799095},{"_id":"themes/jacman/source/css/_base/font.styl","hash":"c8a0faf43b08e37ad07a5669db76d595da966159","modified":1551521799097},{"_id":"themes/jacman/source/css/_base/public.styl","hash":"f016180726019927b9a835ed01e04d153f27a149","modified":1551521799096},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1551521799115},{"_id":"themes/jacman/source/css/_partial/index.styl","hash":"a72ff14effd276015264f870f47ed8f8413bf5d3","modified":1551521799090},{"_id":"themes/jacman/.git/logs/refs/heads/master","hash":"d3d26d4d6f5639d87daa4d53bb23f32f4170c3af","modified":1551521799147},{"_id":"themes/jacman/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1551521799156},{"_id":"themes/jacman/source/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1551521799105},{"_id":"themes/jacman/source/css/_base/highlight/highlight.styl","hash":"91b62bfc58390b0d5db782a75be6965ee3665eb3","modified":1551521799098},{"_id":"themes/jacman/source/css/_base/highlight/theme.styl","hash":"e3a59bd427ba37a54ead9eeba9a5356b3f720a48","modified":1551521799098},{"_id":"themes/jacman/.git/logs/refs/remotes/origin/HEAD","hash":"d3d26d4d6f5639d87daa4d53bb23f32f4170c3af","modified":1551521799148},{"_id":"source/images/centos6.png","hash":"06695171af013191c775c91cfb9434ebc3dfd607","modified":1560072338866},{"_id":"source/_posts/ngx_lua/cookie_and_session/cookie_and_session.png","hash":"eefb3eab4d3afebb2bbb3ebaa09a9482d4cdb04f","modified":1560088384479},{"_id":"source/_posts/linux/centos6和7的启动流程/centos6和7的启动流程.png","hash":"9d8250ea7e021e23df3b737b4d6fb04f84de7274","modified":1560094018879},{"_id":"themes/jacman/.git/objects/pack/pack-5ba75a45ab5d1b3ca3532ebb350da48bda15ff12.pack","hash":"fa0ad64347148887d94275eca06b830813fb2501","modified":1551521799141},{"_id":"public/content.json","hash":"3006f06c256e4506fabad5723c1d5782500cf040","modified":1560596365453},{"_id":"public/search.xml","hash":"86ce720bc309d02a775848db6385f7d55972fe4c","modified":1560596365950},{"_id":"public/atom.xml","hash":"95761abda7c3e6041d6804f51bb8bdf518bd1fdb","modified":1560596365964},{"_id":"public/about/index.html","hash":"a54578fecbdc89ed42245c30d3af30110c953b71","modified":1560596365982},{"_id":"public/tags/index.html","hash":"fb2693ef70188bf23fc615d819e254b9fcf7aa5f","modified":1560596365983},{"_id":"public/2019/02/16/linux/nginx连接数和内核参数关系/index.html","hash":"d81347993194d7b7e68e4082914e07d2140be16e","modified":1560596365983},{"_id":"public/2016/10/05/linux/linux_c_help/index.html","hash":"e2aec4289e7504d83cd17047419d31bf75c86840","modified":1560596365983},{"_id":"public/archives/page/2/index.html","hash":"eb113e7b69d633b379adadc2e44881638544f7d8","modified":1560596365983},{"_id":"public/archives/2016/index.html","hash":"4a8c9137d7b85c8c48f62b2ad620451ab1f32c37","modified":1560596365983},{"_id":"public/archives/2016/06/index.html","hash":"1c10934fb24722b74d40ed114e3d4589bb4e031c","modified":1560596365983},{"_id":"public/archives/2016/07/index.html","hash":"70bc5049d912db02a123cd33266962a637af8193","modified":1560596365983},{"_id":"public/archives/2016/08/index.html","hash":"9ffe34eeb6550f309bee80056fc6496bcf314581","modified":1560596365983},{"_id":"public/archives/2016/10/index.html","hash":"dbaa7a7ef3f769537d30e4dcbc089e10b5198c18","modified":1560596365983},{"_id":"public/archives/2016/12/index.html","hash":"c31876d1574d234687962424c25e84892d0c2f74","modified":1560596365983},{"_id":"public/archives/2017/index.html","hash":"ff15178cfbc0593d4cabf9fb62504e20800c5d67","modified":1560596365984},{"_id":"public/archives/2017/01/index.html","hash":"d0baf61cb184b6100535bebd4686419b776a0502","modified":1560596365984},{"_id":"public/archives/2018/index.html","hash":"86d58c877fd8e3cf1c0f4d4a7aaeed796d6cb549","modified":1560596365984},{"_id":"public/archives/2018/05/index.html","hash":"70d7b88b3134e4c58ed0ecf343b820286033eba6","modified":1560596365984},{"_id":"public/archives/2018/06/index.html","hash":"293f50a4aa343c40a70bf2cf09e5aa9f275e62ca","modified":1560596365984},{"_id":"public/archives/2018/10/index.html","hash":"cb10c6851414632ad3de0c1ad09eb2a43d80b396","modified":1560596365984},{"_id":"public/archives/2019/01/index.html","hash":"c086522f995d77b9ee648395752a3e86dba80b05","modified":1560596365984},{"_id":"public/archives/2019/02/index.html","hash":"befb7e6a004b2f046dc35368a318aca16051eab5","modified":1560596365984},{"_id":"public/archives/2019/03/index.html","hash":"adcbacca18ddededf132a223ad3dd5c4ad25dcf6","modified":1560596365984},{"_id":"public/archives/2019/04/index.html","hash":"14b42e4603d069eea4c02e68929b1b20293c7af2","modified":1560596365984},{"_id":"public/archives/2019/05/index.html","hash":"67a4f3f8dfbf92bdc74425652231745af09f3cee","modified":1560596365984},{"_id":"public/archives/2019/06/index.html","hash":"1df5e22cbeac2abd30b1fa2a2c30f0437c0e236e","modified":1560596365984},{"_id":"public/categories/加密算法/index.html","hash":"e7b050c05ef410d00d5699cdfcb84b9db817f6d6","modified":1560596365985},{"_id":"public/categories/linux/index.html","hash":"04682c883739e38b4f943fb4f7dd4314295ebb14","modified":1560596365985},{"_id":"public/categories/linux/page/2/index.html","hash":"54f1a205757500461f912f18f6543e805098f46b","modified":1560596365985},{"_id":"public/categories/c/index.html","hash":"4d03beb33ce21d27a0f249dbaa5b75346d465241","modified":1560596365985},{"_id":"public/categories/atom/index.html","hash":"3b985a7b929b2de8e03aa914ea5449b3e8a55cc8","modified":1560596365985},{"_id":"public/categories/git/index.html","hash":"d2ecc759e305be6a79a370383fea654626dd588d","modified":1560596365985},{"_id":"public/categories/windows/index.html","hash":"32a8b8051e4d36c4bd93e5e1bd85045587870147","modified":1560596365985},{"_id":"public/categories/vim/index.html","hash":"a25ee45071b82dd746182e1f7797350adaea4136","modified":1560596365985},{"_id":"public/categories/nginx/index.html","hash":"a49cd187e9a52abc1a4cd6db1ce5bdd5ce174270","modified":1560596365985},{"_id":"public/categories/redis/index.html","hash":"6500c61c7cba625a899a332c0afcbf2e2a95ab1f","modified":1560596365985},{"_id":"public/categories/html/index.html","hash":"f57564b2b3d577c6bc1e657b5735482f7fbe8161","modified":1560596365985},{"_id":"public/categories/微信支付/index.html","hash":"f3dac3c3554c49cc0b780e7b652c19cad65f02a3","modified":1560596365985},{"_id":"public/categories/flask/index.html","hash":"027b184068d9140738d9a2c7ae4f575a5ee702ff","modified":1560596365986},{"_id":"public/categories/python/index.html","hash":"9f7ab2acba56bf52301b6e78349649b631e99863","modified":1560596365986},{"_id":"public/tags/hexo/index.html","hash":"3478d55f1519fcbc03b65c52592042f19efce63a","modified":1560596365986},{"_id":"public/tags/git/index.html","hash":"3e7548dcb73d095f8998741bb16b3e3262951097","modified":1560596365986},{"_id":"public/tags/encrypt/index.html","hash":"916e04e497d48d2cf3ac30fa27737d69123c5587","modified":1560596365986},{"_id":"public/tags/vim/index.html","hash":"cc0f519253e8e5dc27496bcb5a8e061d2eb028e2","modified":1560596365986},{"_id":"public/tags/c/index.html","hash":"1a1ea8c500fe64b48d73b0b70c369bece55a620f","modified":1560596365986},{"_id":"public/tags/windows/index.html","hash":"333b651f2193b8e909b22c0fe10d0c7f4547b7bf","modified":1560596365986},{"_id":"public/tags/ajax/index.html","hash":"89d3a96ed56845cdda40ad22e69530d896492fa8","modified":1560596365986},{"_id":"public/tags/html5/index.html","hash":"c07de00b868846d2812879ec4b01fd353e9ef9bd","modified":1560596365986},{"_id":"public/2019/06/09/ngx_lua/cookie_and_session/index.html","hash":"9134f2ff029ce0ec47b45c76a532d9c93482c29e","modified":1560596365986},{"_id":"public/2019/06/09/linux/centos6和7的启动流程/index.html","hash":"fe64e10a563a199d8ef4b8ec49c9121b5ce215a1","modified":1560596365986},{"_id":"public/2019/06/08/linux/一文了解linux开机启动/index.html","hash":"ae261b911d6c2a6c2b985a730f822c4167b489fc","modified":1560596365987},{"_id":"public/2019/05/02/language/python/3_reload_sys/index.html","hash":"39b6977519dd158111119bd72e0eb22c30fbebe4","modified":1560596365987},{"_id":"public/2019/04/13/language/html/weixin/index.html","hash":"a275e26f2b6631095e718c10d5cfd85ceb95a019","modified":1560596365987},{"_id":"public/2019/03/02/linux/AES_RSA_DSA/index.html","hash":"cb7910e661da7559869578471c007f50dfc4b93d","modified":1560596365987},{"_id":"public/2019/03/02/linux/git_tag用法/index.html","hash":"d95c55e6e7871774a0f5fd1b5173751c2d240d34","modified":1560596365987},{"_id":"public/2019/03/02/linux/git_linux搭建服务器/index.html","hash":"b83f2060ccebb5c7f888a541a73ed88d0b7f66e1","modified":1560596365987},{"_id":"public/2019/02/22/db/redis/redis文章发布/index.html","hash":"f2cc28ab013f93ab321640233f308759e1acb97e","modified":1560596365987},{"_id":"public/2019/02/22/db/redis/redis文章投票/index.html","hash":"37e0ba9381984d786008b9d77030d9cbf3a1ae27","modified":1560596365987},{"_id":"public/2019/02/22/db/redis/redis文章分组的用途/index.html","hash":"9f2cb88b83543fa2e8a4b1f7f8f72652f1f8e100","modified":1560596365988},{"_id":"public/2019/02/21/linux/Vm虚拟机的三种联网模式区别/index.html","hash":"83944f57819ec76bec506e00e053acb8f028d986","modified":1560596365988},{"_id":"public/2019/02/15/linux/tcp半连接队列和全连接队列/index.html","hash":"6ca75b91baedf2495b177b8b7a5feda4b27ee896","modified":1560596365988},{"_id":"public/2019/02/14/linux/ip地址子网掩码的关系/index.html","hash":"84a097085d10dadc2d07fffee25cffda0f4a2f2c","modified":1560596365988},{"_id":"public/2019/02/14/language/python/2__init__文件的作用/index.html","hash":"b37582dd1ea499d93fc25d8337021a8b202e7226","modified":1560596365988},{"_id":"public/2019/02/14/language/python/1_三种装饰器/index.html","hash":"f29e063d2731508def058ac9667812ca6e684269","modified":1560596365988},{"_id":"public/2019/02/13/language/python/9_大型程序结构/index.html","hash":"0b9afe6d3267087760d29412d0e6edcc8725f46f","modified":1560596365988},{"_id":"public/2019/02/13/language/python/8_邮件模块/index.html","hash":"deecf85dba828078aa226d6597b94b39a27e23c2","modified":1560596365988},{"_id":"public/2019/02/13/language/python/7_数据迁移/index.html","hash":"acd60aac2ef7fd1c273f08fd8c7913adcc67e647","modified":1560596365988},{"_id":"public/2019/02/12/linux/linux虚拟机配置静态ip/index.html","hash":"6433ce984eacfc7b351632a5ae1b26d6bb0fc2f2","modified":1560596365989},{"_id":"public/2019/01/28/language/python/3_模板的bootstrap扩展/index.html","hash":"68e054b4355ab4d444c6599c86187035f4bd5996","modified":1560596365989},{"_id":"public/2019/01/28/language/python/5_数据库1/index.html","hash":"05d2766b92ef6b780462de843f96c71541698eb9","modified":1560596365989},{"_id":"public/2019/01/28/language/python/4_web表单/index.html","hash":"e4e2d60cd58b8931a3a599047ba119e4fbcfd514","modified":1560596365989},{"_id":"public/2019/01/28/language/python/6_数据库2/index.html","hash":"16c5ea649e32d40dbc42f296b8d2b0bbab04820f","modified":1560596365989},{"_id":"public/2019/01/28/language/python/1基本结构/index.html","hash":"e05db22584d4fbf5949022de49ff0e06d1355742","modified":1560596365989},{"_id":"public/2019/01/28/language/python/2_模板/index.html","hash":"1fdc72edfdbeaac5e7e2062de47ca9fe2a12bc21","modified":1560596365989},{"_id":"public/2018/10/05/linux/2018-10-05_linux/index.html","hash":"660a2e872fbc24df81262b66a0d9a0f6492a956b","modified":1560596365989},{"_id":"public/2018/06/30/linux/centos6.4install-mysql-python/index.html","hash":"c291677667b7ab6b2a65a9f39fe0a12db4463d8a","modified":1560596365989},{"_id":"public/2018/06/30/linux/centos6.4升级python/index.html","hash":"f4755e299264eda91c1e8062f4f06cf65d3c08e5","modified":1560596365989},{"_id":"public/2018/05/26/linux/git_2_operate/index.html","hash":"15438b6d562765a0f0ffb9821ffca2e6497c0f48","modified":1560596365989},{"_id":"public/2017/01/08/linux/windows_pipe/index.html","hash":"f7d3c35d97c5026315a4dee94652dcace24d22b1","modified":1560596365990},{"_id":"public/2017/01/07/linux/apache_wsgi/index.html","hash":"eb12b103f1c545a6fdde247ce5b6c5451101b859","modified":1560596365990},{"_id":"public/2016/12/10/linux/nginx_config/index.html","hash":"069027e23e40b551e39bc5fa7b807d44090fb05e","modified":1560596365991},{"_id":"public/2016/10/27/linux/vim-markdown/index.html","hash":"1db7b2a4b358d3783d4a4db79bed4b6440c5af79","modified":1560596365991},{"_id":"public/2016/10/27/linux/vim-emmet/index.html","hash":"a267fb67d0ef7bf75bc2068cbe1f7d8d4f17a62b","modified":1560596365991},{"_id":"public/2016/10/26/linux/vim_luanma/index.html","hash":"4da404dbf2614fdf8fab7737b293155c66670ebf","modified":1560596365991},{"_id":"public/2016/10/09/linux/atom/index.html","hash":"a7dca16902e154693b57126de3b55229fc85727a","modified":1560596365991},{"_id":"public/2016/10/06/linux/vim_nerdtree/index.html","hash":"f54ce9cb56cfc82d9e8faa3d17e0e83652622fcc","modified":1560596365991},{"_id":"public/2016/10/06/language/html/ajax/index.html","hash":"5320d9c0277838f7dd724d139c37f590280e9bf9","modified":1560596365992},{"_id":"public/2016/10/06/linux/dll_export/index.html","hash":"6ab63987df3cbdb70d786a83dda23819a1e53385","modified":1560596365992},{"_id":"public/2016/10/05/linux/vim_syntastic/index.html","hash":"c629cc7618bf0e87beb9f78119f1aca9d963d2ba","modified":1560596365992},{"_id":"public/2016/08/10/language/html/html5_tags/index.html","hash":"60b3189d7eec5782ed398e3bb12bca4358df905e","modified":1560596365992},{"_id":"public/2016/07/31/linux/windowsFTP/index.html","hash":"731d32b9ee18881c488a2ef33d9f16b13f2f6a0f","modified":1560596365992},{"_id":"public/2016/07/31/linux/LinuxFTP/index.html","hash":"31a5d735b19e63b8d26187c46eab8d07d8c25c16","modified":1560596365992},{"_id":"public/2016/07/21/linux/public_key_encryption/index.html","hash":"7cbffbc85ec8fc6670764f2d80edaaf8514b5e7f","modified":1560596365992},{"_id":"public/2016/06/28/linux/win_time_func/index.html","hash":"b8cb1e45e16152e45c3db2b4e938dd076b83776c","modified":1560596365993},{"_id":"public/2016/06/28/linux/git_1_config/index.html","hash":"b208c9b62d59432463e008ceaa66ac096828fa6a","modified":1560596365993},{"_id":"public/archives/index.html","hash":"8d77647c5c2864766e73e560f03a28a3fcc592cd","modified":1560596365993},{"_id":"public/archives/2019/index.html","hash":"4aa4635afb9713ddbefbcc3933ca3d73c86c0851","modified":1560596365993},{"_id":"public/index.html","hash":"36e442b30337c3d4b8ddc3a59846dcf4a40cec85","modified":1560596365993},{"_id":"public/page/2/index.html","hash":"e394639cc809bdd989d014c42239ae8967cad48a","modified":1560596365993},{"_id":"public/page/3/index.html","hash":"c897ee4ee7de55c90df9f2eb67102143e2df206d","modified":1560596365993},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1560596366003},{"_id":"public/images/head_icon.png","hash":"a82e07e691b9f57f86c475facad1d5aa5bbbd3f4","modified":1560596366003},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1560596366003},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1560596366003},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1560596366003},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1560596366003},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1560596366003},{"_id":"public/img/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1560596366003},{"_id":"public/img/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1560596366004},{"_id":"public/img/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1560596366004},{"_id":"public/img/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1560596366004},{"_id":"public/img/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1560596366004},{"_id":"public/img/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1560596366004},{"_id":"public/img/favicon.ico","hash":"2d22a3e0c7905a894e832c831dd91c29c209c7a5","modified":1560596366004},{"_id":"public/img/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1560596366004},{"_id":"public/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1560596366004},{"_id":"public/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1560596366004},{"_id":"public/img/logo.svg","hash":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1560596366004},{"_id":"public/img/logo.png","hash":"633faf4bf2305496220b5ed7d518ce802e52665f","modified":1560596366004},{"_id":"public/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1560596366004},{"_id":"public/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1560596366004},{"_id":"public/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1560596366004},{"_id":"public/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1560596366004},{"_id":"public/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1560596366004},{"_id":"public/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1560596366004},{"_id":"public/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1560596366004},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1560596366004},{"_id":"public/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1560596366004},{"_id":"public/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1560596366558},{"_id":"public/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1560596366559},{"_id":"public/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1560596366560},{"_id":"public/font/fontdiao.svg","hash":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1560596366560},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1560596366569},{"_id":"public/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1560596366569},{"_id":"public/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1560596366569},{"_id":"public/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1560596366569},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1560596366569},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1560596366569},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1560596366570},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1560596366570},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1560596366570},{"_id":"public/css/style.css","hash":"1737965b2ad2e4999c93bfa7657bdfc9990675f3","modified":1560596366570},{"_id":"public/img/author.jpg","hash":"8b8e61b0e6dcbdf2e285983b1a0ca3044ec42a2f","modified":1560596366570},{"_id":"public/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1560596366575},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1560596366582},{"_id":"public/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1560596366582},{"_id":"public/images/vmnet.png","hash":"92bde33a3ddb059180fa695fea6469c2c07f43f2","modified":1560596366587},{"_id":"public/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1560596366596},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1560596366603},{"_id":"public/2019/06/09/ngx_lua/cookie_and_session/cookie_and_session.png","hash":"eefb3eab4d3afebb2bbb3ebaa09a9482d4cdb04f","modified":1560596366614},{"_id":"public/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1560596366617},{"_id":"public/images/centos6.png","hash":"06695171af013191c775c91cfb9434ebc3dfd607","modified":1560596366620},{"_id":"public/2019/06/09/linux/centos6和7的启动流程/centos6和7的启动流程.png","hash":"9d8250ea7e021e23df3b737b4d6fb04f84de7274","modified":1560596366623}],"Category":[{"name":"加密算法","_id":"cjwxes5cg0004hdlif5kcjfyq"},{"name":"linux","_id":"cjwxes5cp0008hdlirlzclneb"},{"name":"c","_id":"cjwxes5d1000shdli2tzlsqsr"},{"name":"atom","_id":"cjwxes5d3000zhdliwazsm127"},{"name":"git","_id":"cjwxes5d60016hdli6wekixza"},{"name":"windows","_id":"cjwxes5df001whdlirjbtbzxc"},{"name":"vim","_id":"cjwxes5dh0023hdlios9dc935"},{"name":"nginx","_id":"cjwxes5dm002nhdliw86bktka"},{"name":"redis","_id":"cjwxes5e4002vhdliiv814o0v"},{"name":"html","_id":"cjwxes5e90038hdlids7zgljs"},{"name":"微信支付","_id":"cjwxes5eb003dhdligd3w7fqi"},{"name":"flask","_id":"cjwxes5ee003hhdlibukinaat"},{"name":"python","_id":"cjwxes5eh003lhdli5au2hnqw"}],"Data":[],"Page":[{"title":"about","date":"2018-05-01T09:10:48.000Z","_content":"---\nWelcome to rlovep! This is my bolg;[weibo](http://weibo.com/5803571716/profile?topnav=1&wvr=6) for more info. If you get any problems when see this page, you can find the answer in [csdn](http://blog.csdn.net/wedvefv) or you can ask me on [GitHub](https://github.com/wedvefv).\n##\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-05-01 17:10:48\n---\n---\nWelcome to rlovep! This is my bolg;[weibo](http://weibo.com/5803571716/profile?topnav=1&wvr=6) for more info. If you get any problems when see this page, you can find the answer in [csdn](http://blog.csdn.net/wedvefv) or you can ask me on [GitHub](https://github.com/wedvefv).\n##\n","updated":"2019-03-02T10:16:38.005Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjwxes5bf0000hdlik9m6otvm","content":"<hr>\n<p>Welcome to rlovep! This is my bolg;<a href=\"http://weibo.com/5803571716/profile?topnav=1&amp;wvr=6\" target=\"_blank\" rel=\"noopener\">weibo</a> for more info. If you get any problems when see this page, you can find the answer in <a href=\"http://blog.csdn.net/wedvefv\" target=\"_blank\" rel=\"noopener\">csdn</a> or you can ask me on <a href=\"https://github.com/wedvefv\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<p>##</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>Welcome to rlovep! This is my bolg;<a href=\"http://weibo.com/5803571716/profile?topnav=1&amp;wvr=6\" target=\"_blank\" rel=\"noopener\">weibo</a> for more info. If you get any problems when see this page, you can find the answer in <a href=\"http://blog.csdn.net/wedvefv\" target=\"_blank\" rel=\"noopener\">csdn</a> or you can ask me on <a href=\"https://github.com/wedvefv\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<p>##</p>\n"},{"title":"tags","date":"2019-05-19T14:51:01.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-05-19 22:51:01\n---\n","updated":"2019-05-19T14:51:01.293Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjwxes5bh0001hdli1te05ryc","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"简单总结一下加密算法AES-DES-RAS-DSA-ECDSA-ECC","date":"2019-03-02T04:00:00.000Z","comments":1,"_content":"\n## 加密体系\n\n### 对称加密算法，加密和机密密钥一样，加密方和解密方都持有.\n-  DES加密 56位密钥长度，美国数据加密标准，DES算法的入口参数有三个：Key、Data、Mode。其中Key为7个字节共56位，是DES算法的工作密钥；Data为8个字节64位，是要被加密或被解密的数据；Mode为DES的工作方式,有两种:加密或解密。 \n\n- AES加密 高级加密标准，一种区块加密算法,为了取代DES。\n-  二者的优点是加密快，资源消耗少，但是AES比DES安全。\n\n\n### 非对称加密算法\n- RSA，基于数学原理，一个极大数做质数(也叫素数)分解很困难;简单讲,就是你根据公钥很难计算出私钥，因为解密需要接受者的私钥。rsa 由于密钥长度大，加密慢，所以一般只加密产生的会话密钥，会话秘钥才用于加密来加密数据。\n- DSA(DSS), 签名算法， DSA是基于整数有限域离散对数难题的，其安全性与RSA相比差不多。DSA的一个重要特点是两个素数公开，这样，当使用别人的p和q时，即使不知道私钥，你也能确认它们是否是随机产生的，还是作了手脚。RSA算法却做不到\n\n- ECC 椭圆加密算法， 其数学基础是利用椭圆曲线上的有理点构成Abel加法群上椭圆离散对数的计算困难性，主要优势是比其他方式如RSA使用更短的密钥长度，达到同等安全级别，优点就是别rsa，dsa快，存储空间小，贷款要求低。\n> 演变而来的ECDSA（ECC+DSA）数字签名算法，是ECC对DSA的一种模拟实现，ECC是椭圆的离散对数问题，DSA也是对数问题。只不过使用签名采用ECC算法，输出也是2个值，r和s\n\n## 其他算法\n- md5: 消息摘要算法，防止数据被篡改。\n- sha系列，安全散列算法，也是散列函数，应用于信息安全和数字签名领域，都是不需要解密的，也无法解密。\n\n","source":"_posts/linux/AES_RSA_DSA.md","raw":"---\nlayout: post\ntitle: 简单总结一下加密算法AES-DES-RAS-DSA-ECDSA-ECC \ncategory: 加密算法 \ndate: 2019-03-02 12:00:00\ncomments: true\n\n---\n\n## 加密体系\n\n### 对称加密算法，加密和机密密钥一样，加密方和解密方都持有.\n-  DES加密 56位密钥长度，美国数据加密标准，DES算法的入口参数有三个：Key、Data、Mode。其中Key为7个字节共56位，是DES算法的工作密钥；Data为8个字节64位，是要被加密或被解密的数据；Mode为DES的工作方式,有两种:加密或解密。 \n\n- AES加密 高级加密标准，一种区块加密算法,为了取代DES。\n-  二者的优点是加密快，资源消耗少，但是AES比DES安全。\n\n\n### 非对称加密算法\n- RSA，基于数学原理，一个极大数做质数(也叫素数)分解很困难;简单讲,就是你根据公钥很难计算出私钥，因为解密需要接受者的私钥。rsa 由于密钥长度大，加密慢，所以一般只加密产生的会话密钥，会话秘钥才用于加密来加密数据。\n- DSA(DSS), 签名算法， DSA是基于整数有限域离散对数难题的，其安全性与RSA相比差不多。DSA的一个重要特点是两个素数公开，这样，当使用别人的p和q时，即使不知道私钥，你也能确认它们是否是随机产生的，还是作了手脚。RSA算法却做不到\n\n- ECC 椭圆加密算法， 其数学基础是利用椭圆曲线上的有理点构成Abel加法群上椭圆离散对数的计算困难性，主要优势是比其他方式如RSA使用更短的密钥长度，达到同等安全级别，优点就是别rsa，dsa快，存储空间小，贷款要求低。\n> 演变而来的ECDSA（ECC+DSA）数字签名算法，是ECC对DSA的一种模拟实现，ECC是椭圆的离散对数问题，DSA也是对数问题。只不过使用签名采用ECC算法，输出也是2个值，r和s\n\n## 其他算法\n- md5: 消息摘要算法，防止数据被篡改。\n- sha系列，安全散列算法，也是散列函数，应用于信息安全和数字签名领域，都是不需要解密的，也无法解密。\n\n","slug":"linux/AES_RSA_DSA","published":1,"updated":"2019-05-19T14:18:38.605Z","photos":[],"link":"","_id":"cjwxes5c90002hdlibyb9o4t4","content":"<h2 id=\"加密体系\"><a href=\"#加密体系\" class=\"headerlink\" title=\"加密体系\"></a>加密体系</h2><h3 id=\"对称加密算法，加密和机密密钥一样，加密方和解密方都持有\"><a href=\"#对称加密算法，加密和机密密钥一样，加密方和解密方都持有\" class=\"headerlink\" title=\"对称加密算法，加密和机密密钥一样，加密方和解密方都持有.\"></a>对称加密算法，加密和机密密钥一样，加密方和解密方都持有.</h3><ul>\n<li><p>DES加密 56位密钥长度，美国数据加密标准，DES算法的入口参数有三个：Key、Data、Mode。其中Key为7个字节共56位，是DES算法的工作密钥；Data为8个字节64位，是要被加密或被解密的数据；Mode为DES的工作方式,有两种:加密或解密。 </p>\n</li>\n<li><p>AES加密 高级加密标准，一种区块加密算法,为了取代DES。</p>\n</li>\n<li>二者的优点是加密快，资源消耗少，但是AES比DES安全。</li>\n</ul>\n<h3 id=\"非对称加密算法\"><a href=\"#非对称加密算法\" class=\"headerlink\" title=\"非对称加密算法\"></a>非对称加密算法</h3><ul>\n<li>RSA，基于数学原理，一个极大数做质数(也叫素数)分解很困难;简单讲,就是你根据公钥很难计算出私钥，因为解密需要接受者的私钥。rsa 由于密钥长度大，加密慢，所以一般只加密产生的会话密钥，会话秘钥才用于加密来加密数据。</li>\n<li><p>DSA(DSS), 签名算法， DSA是基于整数有限域离散对数难题的，其安全性与RSA相比差不多。DSA的一个重要特点是两个素数公开，这样，当使用别人的p和q时，即使不知道私钥，你也能确认它们是否是随机产生的，还是作了手脚。RSA算法却做不到</p>\n</li>\n<li><p>ECC 椭圆加密算法， 其数学基础是利用椭圆曲线上的有理点构成Abel加法群上椭圆离散对数的计算困难性，主要优势是比其他方式如RSA使用更短的密钥长度，达到同等安全级别，优点就是别rsa，dsa快，存储空间小，贷款要求低。</p>\n<blockquote>\n<p>演变而来的ECDSA（ECC+DSA）数字签名算法，是ECC对DSA的一种模拟实现，ECC是椭圆的离散对数问题，DSA也是对数问题。只不过使用签名采用ECC算法，输出也是2个值，r和s</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"其他算法\"><a href=\"#其他算法\" class=\"headerlink\" title=\"其他算法\"></a>其他算法</h2><ul>\n<li>md5: 消息摘要算法，防止数据被篡改。</li>\n<li>sha系列，安全散列算法，也是散列函数，应用于信息安全和数字签名领域，都是不需要解密的，也无法解密。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"加密体系\"><a href=\"#加密体系\" class=\"headerlink\" title=\"加密体系\"></a>加密体系</h2><h3 id=\"对称加密算法，加密和机密密钥一样，加密方和解密方都持有\"><a href=\"#对称加密算法，加密和机密密钥一样，加密方和解密方都持有\" class=\"headerlink\" title=\"对称加密算法，加密和机密密钥一样，加密方和解密方都持有.\"></a>对称加密算法，加密和机密密钥一样，加密方和解密方都持有.</h3><ul>\n<li><p>DES加密 56位密钥长度，美国数据加密标准，DES算法的入口参数有三个：Key、Data、Mode。其中Key为7个字节共56位，是DES算法的工作密钥；Data为8个字节64位，是要被加密或被解密的数据；Mode为DES的工作方式,有两种:加密或解密。 </p>\n</li>\n<li><p>AES加密 高级加密标准，一种区块加密算法,为了取代DES。</p>\n</li>\n<li>二者的优点是加密快，资源消耗少，但是AES比DES安全。</li>\n</ul>\n<h3 id=\"非对称加密算法\"><a href=\"#非对称加密算法\" class=\"headerlink\" title=\"非对称加密算法\"></a>非对称加密算法</h3><ul>\n<li>RSA，基于数学原理，一个极大数做质数(也叫素数)分解很困难;简单讲,就是你根据公钥很难计算出私钥，因为解密需要接受者的私钥。rsa 由于密钥长度大，加密慢，所以一般只加密产生的会话密钥，会话秘钥才用于加密来加密数据。</li>\n<li><p>DSA(DSS), 签名算法， DSA是基于整数有限域离散对数难题的，其安全性与RSA相比差不多。DSA的一个重要特点是两个素数公开，这样，当使用别人的p和q时，即使不知道私钥，你也能确认它们是否是随机产生的，还是作了手脚。RSA算法却做不到</p>\n</li>\n<li><p>ECC 椭圆加密算法， 其数学基础是利用椭圆曲线上的有理点构成Abel加法群上椭圆离散对数的计算困难性，主要优势是比其他方式如RSA使用更短的密钥长度，达到同等安全级别，优点就是别rsa，dsa快，存储空间小，贷款要求低。</p>\n<blockquote>\n<p>演变而来的ECDSA（ECC+DSA）数字签名算法，是ECC对DSA的一种模拟实现，ECC是椭圆的离散对数问题，DSA也是对数问题。只不过使用签名采用ECC算法，输出也是2个值，r和s</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"其他算法\"><a href=\"#其他算法\" class=\"headerlink\" title=\"其他算法\"></a>其他算法</h2><ul>\n<li>md5: 消息摘要算法，防止数据被篡改。</li>\n<li>sha系列，安全散列算法，也是散列函数，应用于信息安全和数字签名领域，都是不需要解密的，也无法解密。</li>\n</ul>\n"},{"layout":"post","title":"VM虚拟机三种联网模式区别","date":"2019-02-21T08:00:00.000Z","_content":"\n\n## 1.HOST-ONLY  \n\n![](images/vmnet.png) \n\n* 对应图中的private to my Mac 选项\n* 这种模式不能联网，能通过DHCP分配到ip地址，使用VMnet1网卡作为交换机，默认网关就是VMnet1的地址，能和主机通信，不能连接外网。\n* VMnet1网卡作为交换机，一个连接主机HOST，一个端口连接DHCP服务器（一个VM组件），剩下的链接虚拟机，没有提供NAT服务，所以没有路由功能。\n\n## 2.NAT模式，网络地址转换\n\n* 对应图中的 share with my Mac 选项 ，这是共享网络模式\n\n* 这种模式，使用DHCP分配ip地址，使用VMnet8作为交换机，能与主机通信，能连接外网。\n* VMnet8网卡作为交换机，一个连接主机HOST，一个端口连接DHCP服务器（一个VM组件），一个端口连接NAT服务器（也是一个VM组件）。剩下端口的链接虚拟机。\n\n* 以上模式，主要是NAT服务器的区别，导致一个能链接外网一个不能。\n\n## 3.Bridged模式，（桥接模式）\n\n* 就是图片中的Bridged NetWorking部分，可以看到有自动模式，WIFI模式，蓝牙模式，因为mac可以用多种方式联网。\n* 这种模式对VMnet0，它相当于一个网桥，连接主机和虚拟机，这样虚拟机和你的主机就是两个对等的设备了，当然也是可以联网。\n\n## [虚拟机vmnet0、vmnet1和vmnet8的区别](https://www.cnblogs.com/feifei-cyj/p/7686166.html)","source":"_posts/linux/Vm虚拟机的三种联网模式区别.md","raw":"---\nlayout: post\ntitle: VM虚拟机三种联网模式区别\ncategory: linux \ndate: 2019-02-21 16:00:00\n---\n\n\n## 1.HOST-ONLY  \n\n![](images/vmnet.png) \n\n* 对应图中的private to my Mac 选项\n* 这种模式不能联网，能通过DHCP分配到ip地址，使用VMnet1网卡作为交换机，默认网关就是VMnet1的地址，能和主机通信，不能连接外网。\n* VMnet1网卡作为交换机，一个连接主机HOST，一个端口连接DHCP服务器（一个VM组件），剩下的链接虚拟机，没有提供NAT服务，所以没有路由功能。\n\n## 2.NAT模式，网络地址转换\n\n* 对应图中的 share with my Mac 选项 ，这是共享网络模式\n\n* 这种模式，使用DHCP分配ip地址，使用VMnet8作为交换机，能与主机通信，能连接外网。\n* VMnet8网卡作为交换机，一个连接主机HOST，一个端口连接DHCP服务器（一个VM组件），一个端口连接NAT服务器（也是一个VM组件）。剩下端口的链接虚拟机。\n\n* 以上模式，主要是NAT服务器的区别，导致一个能链接外网一个不能。\n\n## 3.Bridged模式，（桥接模式）\n\n* 就是图片中的Bridged NetWorking部分，可以看到有自动模式，WIFI模式，蓝牙模式，因为mac可以用多种方式联网。\n* 这种模式对VMnet0，它相当于一个网桥，连接主机和虚拟机，这样虚拟机和你的主机就是两个对等的设备了，当然也是可以联网。\n\n## [虚拟机vmnet0、vmnet1和vmnet8的区别](https://www.cnblogs.com/feifei-cyj/p/7686166.html)","slug":"linux/Vm虚拟机的三种联网模式区别","published":1,"updated":"2019-03-02T10:16:37.987Z","comments":1,"photos":[],"link":"","_id":"cjwxes5ce0003hdlii5jr3lid","content":"<h2 id=\"1-HOST-ONLY\"><a href=\"#1-HOST-ONLY\" class=\"headerlink\" title=\"1.HOST-ONLY\"></a>1.HOST-ONLY</h2><p><img src=\"/2019/02/21/linux/Vm虚拟机的三种联网模式区别/images/vmnet.png\" alt=\"\"> </p>\n<ul>\n<li>对应图中的private to my Mac 选项</li>\n<li>这种模式不能联网，能通过DHCP分配到ip地址，使用VMnet1网卡作为交换机，默认网关就是VMnet1的地址，能和主机通信，不能连接外网。</li>\n<li>VMnet1网卡作为交换机，一个连接主机HOST，一个端口连接DHCP服务器（一个VM组件），剩下的链接虚拟机，没有提供NAT服务，所以没有路由功能。</li>\n</ul>\n<h2 id=\"2-NAT模式，网络地址转换\"><a href=\"#2-NAT模式，网络地址转换\" class=\"headerlink\" title=\"2.NAT模式，网络地址转换\"></a>2.NAT模式，网络地址转换</h2><ul>\n<li><p>对应图中的 share with my Mac 选项 ，这是共享网络模式</p>\n</li>\n<li><p>这种模式，使用DHCP分配ip地址，使用VMnet8作为交换机，能与主机通信，能连接外网。</p>\n</li>\n<li><p>VMnet8网卡作为交换机，一个连接主机HOST，一个端口连接DHCP服务器（一个VM组件），一个端口连接NAT服务器（也是一个VM组件）。剩下端口的链接虚拟机。</p>\n</li>\n<li><p>以上模式，主要是NAT服务器的区别，导致一个能链接外网一个不能。</p>\n</li>\n</ul>\n<h2 id=\"3-Bridged模式，（桥接模式）\"><a href=\"#3-Bridged模式，（桥接模式）\" class=\"headerlink\" title=\"3.Bridged模式，（桥接模式）\"></a>3.Bridged模式，（桥接模式）</h2><ul>\n<li>就是图片中的Bridged NetWorking部分，可以看到有自动模式，WIFI模式，蓝牙模式，因为mac可以用多种方式联网。</li>\n<li>这种模式对VMnet0，它相当于一个网桥，连接主机和虚拟机，这样虚拟机和你的主机就是两个对等的设备了，当然也是可以联网。</li>\n</ul>\n<h2 id=\"虚拟机vmnet0、vmnet1和vmnet8的区别\"><a href=\"#虚拟机vmnet0、vmnet1和vmnet8的区别\" class=\"headerlink\" title=\"虚拟机vmnet0、vmnet1和vmnet8的区别\"></a><a href=\"https://www.cnblogs.com/feifei-cyj/p/7686166.html\" target=\"_blank\" rel=\"noopener\">虚拟机vmnet0、vmnet1和vmnet8的区别</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-HOST-ONLY\"><a href=\"#1-HOST-ONLY\" class=\"headerlink\" title=\"1.HOST-ONLY\"></a>1.HOST-ONLY</h2><p><img src=\"/2019/02/21/linux/Vm虚拟机的三种联网模式区别/images/vmnet.png\" alt=\"\"> </p>\n<ul>\n<li>对应图中的private to my Mac 选项</li>\n<li>这种模式不能联网，能通过DHCP分配到ip地址，使用VMnet1网卡作为交换机，默认网关就是VMnet1的地址，能和主机通信，不能连接外网。</li>\n<li>VMnet1网卡作为交换机，一个连接主机HOST，一个端口连接DHCP服务器（一个VM组件），剩下的链接虚拟机，没有提供NAT服务，所以没有路由功能。</li>\n</ul>\n<h2 id=\"2-NAT模式，网络地址转换\"><a href=\"#2-NAT模式，网络地址转换\" class=\"headerlink\" title=\"2.NAT模式，网络地址转换\"></a>2.NAT模式，网络地址转换</h2><ul>\n<li><p>对应图中的 share with my Mac 选项 ，这是共享网络模式</p>\n</li>\n<li><p>这种模式，使用DHCP分配ip地址，使用VMnet8作为交换机，能与主机通信，能连接外网。</p>\n</li>\n<li><p>VMnet8网卡作为交换机，一个连接主机HOST，一个端口连接DHCP服务器（一个VM组件），一个端口连接NAT服务器（也是一个VM组件）。剩下端口的链接虚拟机。</p>\n</li>\n<li><p>以上模式，主要是NAT服务器的区别，导致一个能链接外网一个不能。</p>\n</li>\n</ul>\n<h2 id=\"3-Bridged模式，（桥接模式）\"><a href=\"#3-Bridged模式，（桥接模式）\" class=\"headerlink\" title=\"3.Bridged模式，（桥接模式）\"></a>3.Bridged模式，（桥接模式）</h2><ul>\n<li>就是图片中的Bridged NetWorking部分，可以看到有自动模式，WIFI模式，蓝牙模式，因为mac可以用多种方式联网。</li>\n<li>这种模式对VMnet0，它相当于一个网桥，连接主机和虚拟机，这样虚拟机和你的主机就是两个对等的设备了，当然也是可以联网。</li>\n</ul>\n<h2 id=\"虚拟机vmnet0、vmnet1和vmnet8的区别\"><a href=\"#虚拟机vmnet0、vmnet1和vmnet8的区别\" class=\"headerlink\" title=\"虚拟机vmnet0、vmnet1和vmnet8的区别\"></a><a href=\"https://www.cnblogs.com/feifei-cyj/p/7686166.html\" target=\"_blank\" rel=\"noopener\">虚拟机vmnet0、vmnet1和vmnet8的区别</a></h2>"},{"layout":"post","title":"LinuxFTP的建立","date":"2016-07-31T03:30:55.000Z","comments":1,"_content":"\n# linux FTP建立，条件：\n安装vsftpd：\n配置vsftpd的配置文件：\nvim /etc/vsftpd.conf\n\nanonymous_enbale =NO  //关闭匿名登录\nlocal_enbale=YES  //允许本地用户，就是ftp建立者的用户名和密码\nwrite_enbale=YES  //允许写入，就是上传文件到ftp\n\n反注释掉：\nascii_upload_enbale=YES\nascii_download_enbale=YES\n\n默认的ftp目录就是home下的user目录，包含桌面，下载等等文件夹。\n","source":"_posts/linux/LinuxFTP.md","raw":"---\nlayout: post\ntitle: LinuxFTP的建立\ncategory: linux\ndate: 2016-7-31 11:30:55\ncomments: true\n\n---\n\n# linux FTP建立，条件：\n安装vsftpd：\n配置vsftpd的配置文件：\nvim /etc/vsftpd.conf\n\nanonymous_enbale =NO  //关闭匿名登录\nlocal_enbale=YES  //允许本地用户，就是ftp建立者的用户名和密码\nwrite_enbale=YES  //允许写入，就是上传文件到ftp\n\n反注释掉：\nascii_upload_enbale=YES\nascii_download_enbale=YES\n\n默认的ftp目录就是home下的user目录，包含桌面，下载等等文件夹。\n","slug":"linux/LinuxFTP","published":1,"updated":"2019-03-02T10:16:37.991Z","photos":[],"link":"","_id":"cjwxes5ci0005hdlidonbkxf6","content":"<h1 id=\"linux-FTP建立，条件：\"><a href=\"#linux-FTP建立，条件：\" class=\"headerlink\" title=\"linux FTP建立，条件：\"></a>linux FTP建立，条件：</h1><p>安装vsftpd：<br>配置vsftpd的配置文件：<br>vim /etc/vsftpd.conf</p>\n<p>anonymous_enbale =NO  //关闭匿名登录<br>local_enbale=YES  //允许本地用户，就是ftp建立者的用户名和密码<br>write_enbale=YES  //允许写入，就是上传文件到ftp</p>\n<p>反注释掉：<br>ascii_upload_enbale=YES<br>ascii_download_enbale=YES</p>\n<p>默认的ftp目录就是home下的user目录，包含桌面，下载等等文件夹。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"linux-FTP建立，条件：\"><a href=\"#linux-FTP建立，条件：\" class=\"headerlink\" title=\"linux FTP建立，条件：\"></a>linux FTP建立，条件：</h1><p>安装vsftpd：<br>配置vsftpd的配置文件：<br>vim /etc/vsftpd.conf</p>\n<p>anonymous_enbale =NO  //关闭匿名登录<br>local_enbale=YES  //允许本地用户，就是ftp建立者的用户名和密码<br>write_enbale=YES  //允许写入，就是上传文件到ftp</p>\n<p>反注释掉：<br>ascii_upload_enbale=YES<br>ascii_download_enbale=YES</p>\n<p>默认的ftp目录就是home下的user目录，包含桌面，下载等等文件夹。</p>\n"},{"layout":"post","title":"最小化安装centos7配置问题","date":"2018-10-05T02:34:58.000Z","comments":1,"_content":"\n# 最小化安装启用网卡\n\n```shell\n\tvi /etc/sysconfig/network-scripts/ifcfg-[网卡]\n\n\t修改 ONBOOT=yes\n\tservice network restart\n\n```\n\n# ip  命令替代了config, 常见用法\n\n```shell\n\nip link show                           # 显示网络接口信息\n\nip link set eth0 upi                   # 开启网卡\n\nip link set eth0 down                  # 关闭网卡\n\nip link set eth0 promisc on            # 开启网卡的混合模式\n\nip link set eth0 promisc offi          # 关闭网卡的混个模式\n\nip link set eth0 txqueuelen 1200       # 设置网卡队列长度\n\nip link set eth0 mtu 1400              # 设置网卡最大传输单元\n\nip addr show                           # 显示网卡IP信息\n\nip addr add 192.168.0.1/24 dev eth0    # 设置eth0网卡IP地址192.168.0.1\n\nip addr del 192.168.0.1/24 dev eth0    # 删除eth0网卡IP地址\n\n\nip route list                                            # 查看路由信息\n\nip route add 192.168.4.0/24  via  192.168.0.254 dev eth0 # 设置192.168.4.0网段的网关为192.168.0.254,数据走eth0接口\n\nip route add default via  192.168.0.254  dev eth0        # 设置默认网关为192.168.0.254\n```\n\n#  英文环境的mac远程centos虚拟机乱码\n\n## 原因分析\n* mac默认是\n```shell\n\tLANG=en_US.utf-8  // 设置区域语言，比如提示信息，日期等等\n\tLC_ALL=en_US.utf-8\n```\n* 远程虚拟机最小化安装\n\techo $LANG \n\n## linux 配置问价加载顺序是\n\n```shell\n默认登陆方式，\n/etc/enviroment->/etc/profile -->$HOME/.profile   -->$HOME/.env\n```\n* /etc/profile是登陆后读取的，如果文件显示乱码，可以在/etc/profile中配置\n\n``` shell\n\tvim /etc/profile\n\texport LC_ALL=zh_CN.utf-8\n```\n\n# 如果ssh远程出现如下问题\n* \"-bash: 警告:setlocale: LC_CTYPE: 无法改变区域选项 (UTF-8): 没有那个文件或目录\"\n\n是加载/etc/enviroment文件,找LANG变量\n\n```shell\n\tvim /etc/environment\n\tLANG=zh_CN.utf-8\n\t如果/etc/environment 中没有设置该变量LANG，依然会报错，不能在profile中设置\n```\n\n","source":"_posts/linux/2018-10-05_linux.md","raw":"---\nlayout: post\ntitle: 最小化安装centos7配置问题  \ncategory: linux  \ntags: hexo\ndate: 2018-10-05 10:34:58\ncomments: true\n---\n\n# 最小化安装启用网卡\n\n```shell\n\tvi /etc/sysconfig/network-scripts/ifcfg-[网卡]\n\n\t修改 ONBOOT=yes\n\tservice network restart\n\n```\n\n# ip  命令替代了config, 常见用法\n\n```shell\n\nip link show                           # 显示网络接口信息\n\nip link set eth0 upi                   # 开启网卡\n\nip link set eth0 down                  # 关闭网卡\n\nip link set eth0 promisc on            # 开启网卡的混合模式\n\nip link set eth0 promisc offi          # 关闭网卡的混个模式\n\nip link set eth0 txqueuelen 1200       # 设置网卡队列长度\n\nip link set eth0 mtu 1400              # 设置网卡最大传输单元\n\nip addr show                           # 显示网卡IP信息\n\nip addr add 192.168.0.1/24 dev eth0    # 设置eth0网卡IP地址192.168.0.1\n\nip addr del 192.168.0.1/24 dev eth0    # 删除eth0网卡IP地址\n\n\nip route list                                            # 查看路由信息\n\nip route add 192.168.4.0/24  via  192.168.0.254 dev eth0 # 设置192.168.4.0网段的网关为192.168.0.254,数据走eth0接口\n\nip route add default via  192.168.0.254  dev eth0        # 设置默认网关为192.168.0.254\n```\n\n#  英文环境的mac远程centos虚拟机乱码\n\n## 原因分析\n* mac默认是\n```shell\n\tLANG=en_US.utf-8  // 设置区域语言，比如提示信息，日期等等\n\tLC_ALL=en_US.utf-8\n```\n* 远程虚拟机最小化安装\n\techo $LANG \n\n## linux 配置问价加载顺序是\n\n```shell\n默认登陆方式，\n/etc/enviroment->/etc/profile -->$HOME/.profile   -->$HOME/.env\n```\n* /etc/profile是登陆后读取的，如果文件显示乱码，可以在/etc/profile中配置\n\n``` shell\n\tvim /etc/profile\n\texport LC_ALL=zh_CN.utf-8\n```\n\n# 如果ssh远程出现如下问题\n* \"-bash: 警告:setlocale: LC_CTYPE: 无法改变区域选项 (UTF-8): 没有那个文件或目录\"\n\n是加载/etc/enviroment文件,找LANG变量\n\n```shell\n\tvim /etc/environment\n\tLANG=zh_CN.utf-8\n\t如果/etc/environment 中没有设置该变量LANG，依然会报错，不能在profile中设置\n```\n\n","slug":"linux/2018-10-05_linux","published":1,"updated":"2019-03-02T10:16:37.992Z","photos":[],"link":"","_id":"cjwxes5cj0006hdliyffad1kf","content":"<h1 id=\"最小化安装启用网卡\"><a href=\"#最小化安装启用网卡\" class=\"headerlink\" title=\"最小化安装启用网卡\"></a>最小化安装启用网卡</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/network-scripts/ifcfg-[网卡]</span><br><span class=\"line\"></span><br><span class=\"line\">修改 ONBOOT=yes</span><br><span class=\"line\">service network restart</span><br></pre></td></tr></table></figure>\n<h1 id=\"ip-命令替代了config-常见用法\"><a href=\"#ip-命令替代了config-常见用法\" class=\"headerlink\" title=\"ip  命令替代了config, 常见用法\"></a>ip  命令替代了config, 常见用法</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ip link show                           # 显示网络接口信息</span><br><span class=\"line\"></span><br><span class=\"line\">ip link set eth0 upi                   # 开启网卡</span><br><span class=\"line\"></span><br><span class=\"line\">ip link set eth0 down                  # 关闭网卡</span><br><span class=\"line\"></span><br><span class=\"line\">ip link set eth0 promisc on            # 开启网卡的混合模式</span><br><span class=\"line\"></span><br><span class=\"line\">ip link set eth0 promisc offi          # 关闭网卡的混个模式</span><br><span class=\"line\"></span><br><span class=\"line\">ip link set eth0 txqueuelen 1200       # 设置网卡队列长度</span><br><span class=\"line\"></span><br><span class=\"line\">ip link set eth0 mtu 1400              # 设置网卡最大传输单元</span><br><span class=\"line\"></span><br><span class=\"line\">ip addr show                           # 显示网卡IP信息</span><br><span class=\"line\"></span><br><span class=\"line\">ip addr add 192.168.0.1/24 dev eth0    # 设置eth0网卡IP地址192.168.0.1</span><br><span class=\"line\"></span><br><span class=\"line\">ip addr del 192.168.0.1/24 dev eth0    # 删除eth0网卡IP地址</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ip route list                                            # 查看路由信息</span><br><span class=\"line\"></span><br><span class=\"line\">ip route add 192.168.4.0/24  via  192.168.0.254 dev eth0 # 设置192.168.4.0网段的网关为192.168.0.254,数据走eth0接口</span><br><span class=\"line\"></span><br><span class=\"line\">ip route add default via  192.168.0.254  dev eth0        # 设置默认网关为192.168.0.254</span><br></pre></td></tr></table></figure>\n<h1 id=\"英文环境的mac远程centos虚拟机乱码\"><a href=\"#英文环境的mac远程centos虚拟机乱码\" class=\"headerlink\" title=\"英文环境的mac远程centos虚拟机乱码\"></a>英文环境的mac远程centos虚拟机乱码</h1><h2 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h2><ul>\n<li><p>mac默认是</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LANG=en_US.utf-8  // 设置区域语言，比如提示信息，日期等等</span><br><span class=\"line\">LC_ALL=en_US.utf-8</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>远程虚拟机最小化安装<br>  echo $LANG </p>\n</li>\n</ul>\n<h2 id=\"linux-配置问价加载顺序是\"><a href=\"#linux-配置问价加载顺序是\" class=\"headerlink\" title=\"linux 配置问价加载顺序是\"></a>linux 配置问价加载顺序是</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">默认登陆方式，</span><br><span class=\"line\">/etc/enviroment-&gt;/etc/profile --&gt;$HOME/.profile   --&gt;$HOME/.env</span><br></pre></td></tr></table></figure>\n<ul>\n<li>/etc/profile是登陆后读取的，如果文件显示乱码，可以在/etc/profile中配置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">export LC_ALL=zh_CN.utf-8</span><br></pre></td></tr></table></figure>\n<h1 id=\"如果ssh远程出现如下问题\"><a href=\"#如果ssh远程出现如下问题\" class=\"headerlink\" title=\"如果ssh远程出现如下问题\"></a>如果ssh远程出现如下问题</h1><ul>\n<li>“-bash: 警告:setlocale: LC_CTYPE: 无法改变区域选项 (UTF-8): 没有那个文件或目录”</li>\n</ul>\n<p>是加载/etc/enviroment文件,找LANG变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/environment</span><br><span class=\"line\">LANG=zh_CN.utf-8</span><br><span class=\"line\">如果/etc/environment 中没有设置该变量LANG，依然会报错，不能在profile中设置</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"最小化安装启用网卡\"><a href=\"#最小化安装启用网卡\" class=\"headerlink\" title=\"最小化安装启用网卡\"></a>最小化安装启用网卡</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/network-scripts/ifcfg-[网卡]</span><br><span class=\"line\"></span><br><span class=\"line\">修改 ONBOOT=yes</span><br><span class=\"line\">service network restart</span><br></pre></td></tr></table></figure>\n<h1 id=\"ip-命令替代了config-常见用法\"><a href=\"#ip-命令替代了config-常见用法\" class=\"headerlink\" title=\"ip  命令替代了config, 常见用法\"></a>ip  命令替代了config, 常见用法</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ip link show                           # 显示网络接口信息</span><br><span class=\"line\"></span><br><span class=\"line\">ip link set eth0 upi                   # 开启网卡</span><br><span class=\"line\"></span><br><span class=\"line\">ip link set eth0 down                  # 关闭网卡</span><br><span class=\"line\"></span><br><span class=\"line\">ip link set eth0 promisc on            # 开启网卡的混合模式</span><br><span class=\"line\"></span><br><span class=\"line\">ip link set eth0 promisc offi          # 关闭网卡的混个模式</span><br><span class=\"line\"></span><br><span class=\"line\">ip link set eth0 txqueuelen 1200       # 设置网卡队列长度</span><br><span class=\"line\"></span><br><span class=\"line\">ip link set eth0 mtu 1400              # 设置网卡最大传输单元</span><br><span class=\"line\"></span><br><span class=\"line\">ip addr show                           # 显示网卡IP信息</span><br><span class=\"line\"></span><br><span class=\"line\">ip addr add 192.168.0.1/24 dev eth0    # 设置eth0网卡IP地址192.168.0.1</span><br><span class=\"line\"></span><br><span class=\"line\">ip addr del 192.168.0.1/24 dev eth0    # 删除eth0网卡IP地址</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ip route list                                            # 查看路由信息</span><br><span class=\"line\"></span><br><span class=\"line\">ip route add 192.168.4.0/24  via  192.168.0.254 dev eth0 # 设置192.168.4.0网段的网关为192.168.0.254,数据走eth0接口</span><br><span class=\"line\"></span><br><span class=\"line\">ip route add default via  192.168.0.254  dev eth0        # 设置默认网关为192.168.0.254</span><br></pre></td></tr></table></figure>\n<h1 id=\"英文环境的mac远程centos虚拟机乱码\"><a href=\"#英文环境的mac远程centos虚拟机乱码\" class=\"headerlink\" title=\"英文环境的mac远程centos虚拟机乱码\"></a>英文环境的mac远程centos虚拟机乱码</h1><h2 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h2><ul>\n<li><p>mac默认是</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LANG=en_US.utf-8  // 设置区域语言，比如提示信息，日期等等</span><br><span class=\"line\">LC_ALL=en_US.utf-8</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>远程虚拟机最小化安装<br>  echo $LANG </p>\n</li>\n</ul>\n<h2 id=\"linux-配置问价加载顺序是\"><a href=\"#linux-配置问价加载顺序是\" class=\"headerlink\" title=\"linux 配置问价加载顺序是\"></a>linux 配置问价加载顺序是</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">默认登陆方式，</span><br><span class=\"line\">/etc/enviroment-&gt;/etc/profile --&gt;$HOME/.profile   --&gt;$HOME/.env</span><br></pre></td></tr></table></figure>\n<ul>\n<li>/etc/profile是登陆后读取的，如果文件显示乱码，可以在/etc/profile中配置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">export LC_ALL=zh_CN.utf-8</span><br></pre></td></tr></table></figure>\n<h1 id=\"如果ssh远程出现如下问题\"><a href=\"#如果ssh远程出现如下问题\" class=\"headerlink\" title=\"如果ssh远程出现如下问题\"></a>如果ssh远程出现如下问题</h1><ul>\n<li>“-bash: 警告:setlocale: LC_CTYPE: 无法改变区域选项 (UTF-8): 没有那个文件或目录”</li>\n</ul>\n<p>是加载/etc/enviroment文件,找LANG变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/environment</span><br><span class=\"line\">LANG=zh_CN.utf-8</span><br><span class=\"line\">如果/etc/environment 中没有设置该变量LANG，依然会报错，不能在profile中设置</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"apache_wsgi支持python脚本","date":"2017-01-07T06:00:00.000Z","_content":"\n# apache支持python脚本\n\n配置httpd.conf\n追加：\n```shell\nLoadModule wsgi_module modules/mod_wsgi.so \n\nWSGIScriptAlias / C:/xampp/www/py/myweb/myweb/wsgi.py  \nWSGIPythonPath C:/xampp/www/py/myweb   #django 项目目录\nDocumentRoot \"C:/xampp/www/py/myweb/myweb\" #具体应用目录\n<Directory \"C:/xampp/www\">\n\nOptions Indexes FollowSymLinks Includes ExecCGI\nAllowOverride All\nRequire all granted\n</Directory>\n```\nOptions Indexes FollowSymLinks Includes ExecCGI\n禁止显示Apache目录列表-Indexes FollowSymLinks\n如何修改目录的配置以禁止显示 Apache 目录列表。\n减号和去掉indexes是一样的效果 ，都是不存在index时，不要显示目录结构，安全起见。\nxampp 中的不带减号，依然不可以访问目录。目前不知道原因。可能做了某些安全设置。\n\nAllowOverride参数就是指明Apache服务器是否去找.htacess文件作为配置文件，如果设置为none,那么服务器将忽略.htacess文件，如果设置为All,那么所有在.htaccess文件里有的指令都将被重写。\n\nRequire all granted\n    允许所有请求访问资源\n","source":"_posts/linux/apache_wsgi.md","raw":"---\nlayout: post\ntitle: apache_wsgi支持python脚本\ndate: 2017-1-7 14:00:00\ncategory: linux \n\n---\n\n# apache支持python脚本\n\n配置httpd.conf\n追加：\n```shell\nLoadModule wsgi_module modules/mod_wsgi.so \n\nWSGIScriptAlias / C:/xampp/www/py/myweb/myweb/wsgi.py  \nWSGIPythonPath C:/xampp/www/py/myweb   #django 项目目录\nDocumentRoot \"C:/xampp/www/py/myweb/myweb\" #具体应用目录\n<Directory \"C:/xampp/www\">\n\nOptions Indexes FollowSymLinks Includes ExecCGI\nAllowOverride All\nRequire all granted\n</Directory>\n```\nOptions Indexes FollowSymLinks Includes ExecCGI\n禁止显示Apache目录列表-Indexes FollowSymLinks\n如何修改目录的配置以禁止显示 Apache 目录列表。\n减号和去掉indexes是一样的效果 ，都是不存在index时，不要显示目录结构，安全起见。\nxampp 中的不带减号，依然不可以访问目录。目前不知道原因。可能做了某些安全设置。\n\nAllowOverride参数就是指明Apache服务器是否去找.htacess文件作为配置文件，如果设置为none,那么服务器将忽略.htacess文件，如果设置为All,那么所有在.htaccess文件里有的指令都将被重写。\n\nRequire all granted\n    允许所有请求访问资源\n","slug":"linux/apache_wsgi","published":1,"updated":"2019-03-02T10:16:37.993Z","comments":1,"photos":[],"link":"","_id":"cjwxes5co0007hdliyzhgcchl","content":"<h1 id=\"apache支持python脚本\"><a href=\"#apache支持python脚本\" class=\"headerlink\" title=\"apache支持python脚本\"></a>apache支持python脚本</h1><p>配置httpd.conf<br>追加：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LoadModule wsgi_module modules/mod_wsgi.so </span><br><span class=\"line\"></span><br><span class=\"line\">WSGIScriptAlias / C:/xampp/www/py/myweb/myweb/wsgi.py  </span><br><span class=\"line\">WSGIPythonPath C:/xampp/www/py/myweb   #django 项目目录</span><br><span class=\"line\">DocumentRoot \"C:/xampp/www/py/myweb/myweb\" #具体应用目录</span><br><span class=\"line\">&lt;Directory \"C:/xampp/www\"&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Options Indexes FollowSymLinks Includes ExecCGI</span><br><span class=\"line\">AllowOverride All</span><br><span class=\"line\">Require all granted</span><br><span class=\"line\">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure></p>\n<p>Options Indexes FollowSymLinks Includes ExecCGI<br>禁止显示Apache目录列表-Indexes FollowSymLinks<br>如何修改目录的配置以禁止显示 Apache 目录列表。<br>减号和去掉indexes是一样的效果 ，都是不存在index时，不要显示目录结构，安全起见。<br>xampp 中的不带减号，依然不可以访问目录。目前不知道原因。可能做了某些安全设置。</p>\n<p>AllowOverride参数就是指明Apache服务器是否去找.htacess文件作为配置文件，如果设置为none,那么服务器将忽略.htacess文件，如果设置为All,那么所有在.htaccess文件里有的指令都将被重写。</p>\n<p>Require all granted<br>    允许所有请求访问资源</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"apache支持python脚本\"><a href=\"#apache支持python脚本\" class=\"headerlink\" title=\"apache支持python脚本\"></a>apache支持python脚本</h1><p>配置httpd.conf<br>追加：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LoadModule wsgi_module modules/mod_wsgi.so </span><br><span class=\"line\"></span><br><span class=\"line\">WSGIScriptAlias / C:/xampp/www/py/myweb/myweb/wsgi.py  </span><br><span class=\"line\">WSGIPythonPath C:/xampp/www/py/myweb   #django 项目目录</span><br><span class=\"line\">DocumentRoot \"C:/xampp/www/py/myweb/myweb\" #具体应用目录</span><br><span class=\"line\">&lt;Directory \"C:/xampp/www\"&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Options Indexes FollowSymLinks Includes ExecCGI</span><br><span class=\"line\">AllowOverride All</span><br><span class=\"line\">Require all granted</span><br><span class=\"line\">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure></p>\n<p>Options Indexes FollowSymLinks Includes ExecCGI<br>禁止显示Apache目录列表-Indexes FollowSymLinks<br>如何修改目录的配置以禁止显示 Apache 目录列表。<br>减号和去掉indexes是一样的效果 ，都是不存在index时，不要显示目录结构，安全起见。<br>xampp 中的不带减号，依然不可以访问目录。目前不知道原因。可能做了某些安全设置。</p>\n<p>AllowOverride参数就是指明Apache服务器是否去找.htacess文件作为配置文件，如果设置为none,那么服务器将忽略.htacess文件，如果设置为All,那么所有在.htaccess文件里有的指令都将被重写。</p>\n<p>Require all granted<br>    允许所有请求访问资源</p>\n"},{"layout":"post","title":"centos6.4 安装python mysql扩展","date":"2018-06-30T02:15:00.000Z","_content":"\n\n\n要想使python可以操作mysql 就需要MySQL-python驱动，它是python 操作mysql必不可少的模块。\n\n下载地址：https://pypi.python.org/pypi/MySQL-python/\n\n下载MySQL-python-1.2.5.zip 文件之后直接解压。进入MySQL-python-1.2.5目录:\n\npython setup.py install\n\n报错：\n\n[root@centos7 MySQL-python-1.2.4]# python setup.py install\n\nsh: mysql_config: command not found\n\nTraceback (most recent call last):\n\n  File \"setup.py\", line 18, in <module>\n\n    metadata, options = get_config()\n\n  File \"/root/MySQL-python-1.2.4/setup_posix.py\", line 43, in get_config\n\n    libs = mysql_config(\"libs_r\")\n\n  File \"/root/MySQL-python-1.2.4/setup_posix.py\", line 25, in mysql_config\n\n    raise EnvironmentError(\"%s not found\" % (mysql_config.path,))\n\nEnvironmentError: mysql_config not found\n\n网上查了一下需安装mysql-devel \n\n#yum -y install mysql-devel \n\n安装成功后\n\n# python setup.py install\n\n安装成功。\n","source":"_posts/linux/centos6.4install-mysql-python.md","raw":"---\nlayout: post\ntitle: centos6.4 安装python mysql扩展 \ndate: 2018-6-30 10:15:00\ncategory: c\n\n---\n\n\n\n要想使python可以操作mysql 就需要MySQL-python驱动，它是python 操作mysql必不可少的模块。\n\n下载地址：https://pypi.python.org/pypi/MySQL-python/\n\n下载MySQL-python-1.2.5.zip 文件之后直接解压。进入MySQL-python-1.2.5目录:\n\npython setup.py install\n\n报错：\n\n[root@centos7 MySQL-python-1.2.4]# python setup.py install\n\nsh: mysql_config: command not found\n\nTraceback (most recent call last):\n\n  File \"setup.py\", line 18, in <module>\n\n    metadata, options = get_config()\n\n  File \"/root/MySQL-python-1.2.4/setup_posix.py\", line 43, in get_config\n\n    libs = mysql_config(\"libs_r\")\n\n  File \"/root/MySQL-python-1.2.4/setup_posix.py\", line 25, in mysql_config\n\n    raise EnvironmentError(\"%s not found\" % (mysql_config.path,))\n\nEnvironmentError: mysql_config not found\n\n网上查了一下需安装mysql-devel \n\n#yum -y install mysql-devel \n\n安装成功后\n\n# python setup.py install\n\n安装成功。\n","slug":"linux/centos6.4install-mysql-python","published":1,"updated":"2019-05-19T14:30:17.032Z","comments":1,"photos":[],"link":"","_id":"cjwxes5cq000ahdlisvqc2m4h","content":"<p>要想使python可以操作mysql 就需要MySQL-python驱动，它是python 操作mysql必不可少的模块。</p>\n<p>下载地址：<a href=\"https://pypi.python.org/pypi/MySQL-python/\" target=\"_blank\" rel=\"noopener\">https://pypi.python.org/pypi/MySQL-python/</a></p>\n<p>下载MySQL-python-1.2.5.zip 文件之后直接解压。进入MySQL-python-1.2.5目录:</p>\n<p>python setup.py install</p>\n<p>报错：</p>\n<p>[root@centos7 MySQL-python-1.2.4]# python setup.py install</p>\n<p>sh: mysql_config: command not found</p>\n<p>Traceback (most recent call last):</p>\n<p>  File “setup.py”, line 18, in <module></module></p>\n<pre><code>metadata, options = get_config()\n</code></pre><p>  File “/root/MySQL-python-1.2.4/setup_posix.py”, line 43, in get_config</p>\n<pre><code>libs = mysql_config(&quot;libs_r&quot;)\n</code></pre><p>  File “/root/MySQL-python-1.2.4/setup_posix.py”, line 25, in mysql_config</p>\n<pre><code>raise EnvironmentError(&quot;%s not found&quot; % (mysql_config.path,))\n</code></pre><p>EnvironmentError: mysql_config not found</p>\n<p>网上查了一下需安装mysql-devel </p>\n<p>#yum -y install mysql-devel </p>\n<p>安装成功后</p>\n<h1 id=\"python-setup-py-install\"><a href=\"#python-setup-py-install\" class=\"headerlink\" title=\"python setup.py install\"></a>python setup.py install</h1><p>安装成功。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>要想使python可以操作mysql 就需要MySQL-python驱动，它是python 操作mysql必不可少的模块。</p>\n<p>下载地址：<a href=\"https://pypi.python.org/pypi/MySQL-python/\" target=\"_blank\" rel=\"noopener\">https://pypi.python.org/pypi/MySQL-python/</a></p>\n<p>下载MySQL-python-1.2.5.zip 文件之后直接解压。进入MySQL-python-1.2.5目录:</p>\n<p>python setup.py install</p>\n<p>报错：</p>\n<p>[root@centos7 MySQL-python-1.2.4]# python setup.py install</p>\n<p>sh: mysql_config: command not found</p>\n<p>Traceback (most recent call last):</p>\n<p>  File “setup.py”, line 18, in <module></module></p>\n<pre><code>metadata, options = get_config()\n</code></pre><p>  File “/root/MySQL-python-1.2.4/setup_posix.py”, line 43, in get_config</p>\n<pre><code>libs = mysql_config(&quot;libs_r&quot;)\n</code></pre><p>  File “/root/MySQL-python-1.2.4/setup_posix.py”, line 25, in mysql_config</p>\n<pre><code>raise EnvironmentError(&quot;%s not found&quot; % (mysql_config.path,))\n</code></pre><p>EnvironmentError: mysql_config not found</p>\n<p>网上查了一下需安装mysql-devel </p>\n<p>#yum -y install mysql-devel </p>\n<p>安装成功后</p>\n<h1 id=\"python-setup-py-install\"><a href=\"#python-setup-py-install\" class=\"headerlink\" title=\"python setup.py install\"></a>python setup.py install</h1><p>安装成功。</p>\n"},{"layout":"post","title":"atom编辑器","date":"2016-10-09T07:30:30.000Z","_content":"\n# atom 编辑器\n\n## 比较：\n优点：开源，免费，可定制型强，中文支持比sublime做的好，sublime是收费的。\n缺点：稍微有一点慢，相对于sublime，画面类似sublime，体积也比较大。\n\n## 发展：\n  vim基本都是插件扩展， 插件一般是vimscript编写，现在为了可维护性，加入python支持。\n  sublime：也是插件扩展，主要是json配置，可扩展性没atom好。收费，维护仅由编写者维护。       \n  atom：开源，界面类似sublime，插件脚本由js编写，利于扩展，社区支持强大。有人说atom是编辑器\n  的集大成者。\n\n## windows下安装\n1. 需要node.js支持（安装了node.js ，安装npm包管理器（为了解决nodejs代码的部署问题））\n2. 安装atom编辑器\n3. 打开编辑器，packages->settings-view->manager packages ,安装插件即可。\n4. 网络被公司设置代理的，需要设置~/.atom/.apmrc 文件如下：\n```js\nstrict-ssl=false\nhttp-proxy=http://xxxx:xx\nhttps-proxy=https://xxxx:xx\n```\n有些时候还是提示 atom.io:433访问地址错误。\n\n5. 那么可以登录：https://atom.io/packages/ 搜索需要的插件，进入Repo页面。\n复制 git需要的地址。例如qolor插件地址：https://github.com/DavidLGoldberg/qolor.git\n\n6. 进入~/.atom/packages目录下, 打开cmd，执行git clone https://github.com/DavidLGoldberg/qolor.git\n\n7. cd qolor 进入qolor目录，在执行npm install 就会安装 qolor插件了。\n\n8. npm如果需要设置代理，配置文件是~/.npmrc ，写入：\n```js\nregistry=http://registry.cnpmjs.org/\nproxy=http://xxx:xx\n```\n## 测试环境\n windows 8.1\n\n nodejs-4.6.0\n\n python2.7.9\n\n\n ~表示用户目录。我的是 c:/users/administrator/\n","source":"_posts/linux/atom.md","raw":"---\nlayout: post\ntitle: atom编辑器\ndate: 2016-10-09 15:30:30\ncategory: atom\n\n---\n\n# atom 编辑器\n\n## 比较：\n优点：开源，免费，可定制型强，中文支持比sublime做的好，sublime是收费的。\n缺点：稍微有一点慢，相对于sublime，画面类似sublime，体积也比较大。\n\n## 发展：\n  vim基本都是插件扩展， 插件一般是vimscript编写，现在为了可维护性，加入python支持。\n  sublime：也是插件扩展，主要是json配置，可扩展性没atom好。收费，维护仅由编写者维护。       \n  atom：开源，界面类似sublime，插件脚本由js编写，利于扩展，社区支持强大。有人说atom是编辑器\n  的集大成者。\n\n## windows下安装\n1. 需要node.js支持（安装了node.js ，安装npm包管理器（为了解决nodejs代码的部署问题））\n2. 安装atom编辑器\n3. 打开编辑器，packages->settings-view->manager packages ,安装插件即可。\n4. 网络被公司设置代理的，需要设置~/.atom/.apmrc 文件如下：\n```js\nstrict-ssl=false\nhttp-proxy=http://xxxx:xx\nhttps-proxy=https://xxxx:xx\n```\n有些时候还是提示 atom.io:433访问地址错误。\n\n5. 那么可以登录：https://atom.io/packages/ 搜索需要的插件，进入Repo页面。\n复制 git需要的地址。例如qolor插件地址：https://github.com/DavidLGoldberg/qolor.git\n\n6. 进入~/.atom/packages目录下, 打开cmd，执行git clone https://github.com/DavidLGoldberg/qolor.git\n\n7. cd qolor 进入qolor目录，在执行npm install 就会安装 qolor插件了。\n\n8. npm如果需要设置代理，配置文件是~/.npmrc ，写入：\n```js\nregistry=http://registry.cnpmjs.org/\nproxy=http://xxx:xx\n```\n## 测试环境\n windows 8.1\n\n nodejs-4.6.0\n\n python2.7.9\n\n\n ~表示用户目录。我的是 c:/users/administrator/\n","slug":"linux/atom","published":1,"updated":"2019-05-19T14:18:38.610Z","comments":1,"photos":[],"link":"","_id":"cjwxes5cr000bhdli8zsptw7y","content":"<h1 id=\"atom-编辑器\"><a href=\"#atom-编辑器\" class=\"headerlink\" title=\"atom 编辑器\"></a>atom 编辑器</h1><h2 id=\"比较：\"><a href=\"#比较：\" class=\"headerlink\" title=\"比较：\"></a>比较：</h2><p>优点：开源，免费，可定制型强，中文支持比sublime做的好，sublime是收费的。<br>缺点：稍微有一点慢，相对于sublime，画面类似sublime，体积也比较大。</p>\n<h2 id=\"发展：\"><a href=\"#发展：\" class=\"headerlink\" title=\"发展：\"></a>发展：</h2><p>  vim基本都是插件扩展， 插件一般是vimscript编写，现在为了可维护性，加入python支持。<br>  sublime：也是插件扩展，主要是json配置，可扩展性没atom好。收费，维护仅由编写者维护。<br>  atom：开源，界面类似sublime，插件脚本由js编写，利于扩展，社区支持强大。有人说atom是编辑器<br>  的集大成者。</p>\n<h2 id=\"windows下安装\"><a href=\"#windows下安装\" class=\"headerlink\" title=\"windows下安装\"></a>windows下安装</h2><ol>\n<li>需要node.js支持（安装了node.js ，安装npm包管理器（为了解决nodejs代码的部署问题））</li>\n<li>安装atom编辑器</li>\n<li>打开编辑器，packages-&gt;settings-view-&gt;manager packages ,安装插件即可。</li>\n<li>网络被公司设置代理的，需要设置~/.atom/.apmrc 文件如下：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strict-ssl=<span class=\"literal\">false</span></span><br><span class=\"line\">http-proxy=http:<span class=\"comment\">//xxxx:xx</span></span><br><span class=\"line\">https-proxy=https:<span class=\"comment\">//xxxx:xx</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>有些时候还是提示 atom.io:433访问地址错误。</p>\n<ol start=\"5\">\n<li><p>那么可以登录：<a href=\"https://atom.io/packages/\" target=\"_blank\" rel=\"noopener\">https://atom.io/packages/</a> 搜索需要的插件，进入Repo页面。<br>复制 git需要的地址。例如qolor插件地址：<a href=\"https://github.com/DavidLGoldberg/qolor.git\" target=\"_blank\" rel=\"noopener\">https://github.com/DavidLGoldberg/qolor.git</a></p>\n</li>\n<li><p>进入~/.atom/packages目录下, 打开cmd，执行git clone <a href=\"https://github.com/DavidLGoldberg/qolor.git\" target=\"_blank\" rel=\"noopener\">https://github.com/DavidLGoldberg/qolor.git</a></p>\n</li>\n<li><p>cd qolor 进入qolor目录，在执行npm install 就会安装 qolor插件了。</p>\n</li>\n<li><p>npm如果需要设置代理，配置文件是~/.npmrc ，写入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry=http:<span class=\"comment\">//registry.cnpmjs.org/</span></span><br><span class=\"line\">proxy=http:<span class=\"comment\">//xxx:xx</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"测试环境\"><a href=\"#测试环境\" class=\"headerlink\" title=\"测试环境\"></a>测试环境</h2><p> windows 8.1</p>\n<p> nodejs-4.6.0</p>\n<p> python2.7.9</p>\n<p> ~表示用户目录。我的是 c:/users/administrator/</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"atom-编辑器\"><a href=\"#atom-编辑器\" class=\"headerlink\" title=\"atom 编辑器\"></a>atom 编辑器</h1><h2 id=\"比较：\"><a href=\"#比较：\" class=\"headerlink\" title=\"比较：\"></a>比较：</h2><p>优点：开源，免费，可定制型强，中文支持比sublime做的好，sublime是收费的。<br>缺点：稍微有一点慢，相对于sublime，画面类似sublime，体积也比较大。</p>\n<h2 id=\"发展：\"><a href=\"#发展：\" class=\"headerlink\" title=\"发展：\"></a>发展：</h2><p>  vim基本都是插件扩展， 插件一般是vimscript编写，现在为了可维护性，加入python支持。<br>  sublime：也是插件扩展，主要是json配置，可扩展性没atom好。收费，维护仅由编写者维护。<br>  atom：开源，界面类似sublime，插件脚本由js编写，利于扩展，社区支持强大。有人说atom是编辑器<br>  的集大成者。</p>\n<h2 id=\"windows下安装\"><a href=\"#windows下安装\" class=\"headerlink\" title=\"windows下安装\"></a>windows下安装</h2><ol>\n<li>需要node.js支持（安装了node.js ，安装npm包管理器（为了解决nodejs代码的部署问题））</li>\n<li>安装atom编辑器</li>\n<li>打开编辑器，packages-&gt;settings-view-&gt;manager packages ,安装插件即可。</li>\n<li>网络被公司设置代理的，需要设置~/.atom/.apmrc 文件如下：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strict-ssl=<span class=\"literal\">false</span></span><br><span class=\"line\">http-proxy=http:<span class=\"comment\">//xxxx:xx</span></span><br><span class=\"line\">https-proxy=https:<span class=\"comment\">//xxxx:xx</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>有些时候还是提示 atom.io:433访问地址错误。</p>\n<ol start=\"5\">\n<li><p>那么可以登录：<a href=\"https://atom.io/packages/\" target=\"_blank\" rel=\"noopener\">https://atom.io/packages/</a> 搜索需要的插件，进入Repo页面。<br>复制 git需要的地址。例如qolor插件地址：<a href=\"https://github.com/DavidLGoldberg/qolor.git\" target=\"_blank\" rel=\"noopener\">https://github.com/DavidLGoldberg/qolor.git</a></p>\n</li>\n<li><p>进入~/.atom/packages目录下, 打开cmd，执行git clone <a href=\"https://github.com/DavidLGoldberg/qolor.git\" target=\"_blank\" rel=\"noopener\">https://github.com/DavidLGoldberg/qolor.git</a></p>\n</li>\n<li><p>cd qolor 进入qolor目录，在执行npm install 就会安装 qolor插件了。</p>\n</li>\n<li><p>npm如果需要设置代理，配置文件是~/.npmrc ，写入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry=http:<span class=\"comment\">//registry.cnpmjs.org/</span></span><br><span class=\"line\">proxy=http:<span class=\"comment\">//xxx:xx</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"测试环境\"><a href=\"#测试环境\" class=\"headerlink\" title=\"测试环境\"></a>测试环境</h2><p> windows 8.1</p>\n<p> nodejs-4.6.0</p>\n<p> python2.7.9</p>\n<p> ~表示用户目录。我的是 c:/users/administrator/</p>\n"},{"layout":"post","title":"centos6.4 升级python到2.7","date":"2018-06-30T02:15:00.000Z","_content":"\n# 1. download source\n```c\nwget https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tgz\n\n```\n\n# 2. compire and install\n```c\ntar zxvf Python-2.7.12.tgz\ncd Python-2.7.12\n./configure --prefix=/usr/local/python27 && make && make install && echo $?\n如果以上输出为0，说明没有报错，安装正常\n```\n\n# 3. add path and backup the python2.6 \n```c \n移除以前的版本\nmv /usr/bin/python /usr/bin/python26\n创建软连接\nln -s /usr/local/python27/bin/python /usr/bin/python\n查看版本是否升级成功\npython -V\nPython 2.7.12\n```\n\n# 4. modify yum\n```c\n如果不修改此项，会导致yum无法使用\nvim /usr/bin/yum\n修改第一行即可，将环境变量指向以前的python版本\n#!/usr/bin/python26\n```\n# 5. reinstall pip \n```c\n1.安装pip之前首先需要安装setuptools\n下载链接\nhttps://pypi.python.org/pypi/setuptools\n下载地址\nwget https://pypi.python.org/packages/ff/d4/209f4939c49e31f5524fa0027bf1c8ec3107abaf7c61fdaad704a648c281/setuptools-21.0.0.tar.gz#md5=81964fdb89534118707742e6d1a1ddb4 --no-check-certificate\n解压\ntar zxvf setuptools-21.0.0.tar.gz\n安装\ncd setuptools-21.0.0\npython setup.py  install\n\n2.安装pip\n下载链接\nhttps://pypi.python.org/pypi/pip\n下载地址\nwget https://pypi.python.org/packages/41/27/9a8d24e1b55bd8c85e4d022da2922cb206f183e2d18fee4e320c9547e751/pip-8.1.1.tar.gz#md5=6b86f11841e89c8241d689956ba99ed7 --no-check-certificate\n解压\ntar zxvf pip-8.1.1.tar.gz \n安装 \ncd pip-8.1.1\npython setup.py install\n\n3.添加环境变量\n安装完之后，之后执行pip还是调用的以前的环境变量，需要手动添加环境变量\nmv /usr/bin/pip /usr/bin/pip26\nln -s /usr/local/python27/bin/pip /usr/bin/\n再次查看版本\npip -V\npip 8.1.1 from /usr/local/python27/lib/python2.7/site-packages/pip-8.1.1-py2.7.egg (python 2.7)\n```\n\n# 6.使用pip安装第三方库\n\n```c\n如果报错locale.Error: unsupported locale setting\n加入环境变量：\nexport LANGUAGE=en_US.UTF-8\nexport LC_ALL=en_US.UTF-8\n\npip install psutil\npip install MySQLdb-python\npip install django=1.8.2\n\n报错：\n pip install MySQLdb-python\nCollecting MySQLdb-python\n  Retrying (Retry(total=4, connect=None, read=None, redirect=None)) after connection broken by 'ReadTimeoutError(\"HTTPSConnectionPool(host='pypi.python.org', port=443): Read timed out. (read timeout=15)\",)': /simple/mysqldb-python/\n  Could not find a version that satisfies the requirement MySQLdb-python (from versions: )\nNo matching distribution found for MySQLdb-python\nYou are using pip version 8.1.1, however version 9.0.1 is available.\nYou should consider upgrading via the 'pip install --upgrade pip' command.\n当安装中提示版本太低的时候，执行提示的命令进行升级即可\npip install --upgrade pip\n升级完重新执行要安装的库\n```\n","source":"_posts/linux/centos6.4升级python.md","raw":"---\nlayout: post\ntitle: centos6.4 升级python到2.7 \ndate: 2018-6-30 10:15:00\n---\n\n# 1. download source\n```c\nwget https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tgz\n\n```\n\n# 2. compire and install\n```c\ntar zxvf Python-2.7.12.tgz\ncd Python-2.7.12\n./configure --prefix=/usr/local/python27 && make && make install && echo $?\n如果以上输出为0，说明没有报错，安装正常\n```\n\n# 3. add path and backup the python2.6 \n```c \n移除以前的版本\nmv /usr/bin/python /usr/bin/python26\n创建软连接\nln -s /usr/local/python27/bin/python /usr/bin/python\n查看版本是否升级成功\npython -V\nPython 2.7.12\n```\n\n# 4. modify yum\n```c\n如果不修改此项，会导致yum无法使用\nvim /usr/bin/yum\n修改第一行即可，将环境变量指向以前的python版本\n#!/usr/bin/python26\n```\n# 5. reinstall pip \n```c\n1.安装pip之前首先需要安装setuptools\n下载链接\nhttps://pypi.python.org/pypi/setuptools\n下载地址\nwget https://pypi.python.org/packages/ff/d4/209f4939c49e31f5524fa0027bf1c8ec3107abaf7c61fdaad704a648c281/setuptools-21.0.0.tar.gz#md5=81964fdb89534118707742e6d1a1ddb4 --no-check-certificate\n解压\ntar zxvf setuptools-21.0.0.tar.gz\n安装\ncd setuptools-21.0.0\npython setup.py  install\n\n2.安装pip\n下载链接\nhttps://pypi.python.org/pypi/pip\n下载地址\nwget https://pypi.python.org/packages/41/27/9a8d24e1b55bd8c85e4d022da2922cb206f183e2d18fee4e320c9547e751/pip-8.1.1.tar.gz#md5=6b86f11841e89c8241d689956ba99ed7 --no-check-certificate\n解压\ntar zxvf pip-8.1.1.tar.gz \n安装 \ncd pip-8.1.1\npython setup.py install\n\n3.添加环境变量\n安装完之后，之后执行pip还是调用的以前的环境变量，需要手动添加环境变量\nmv /usr/bin/pip /usr/bin/pip26\nln -s /usr/local/python27/bin/pip /usr/bin/\n再次查看版本\npip -V\npip 8.1.1 from /usr/local/python27/lib/python2.7/site-packages/pip-8.1.1-py2.7.egg (python 2.7)\n```\n\n# 6.使用pip安装第三方库\n\n```c\n如果报错locale.Error: unsupported locale setting\n加入环境变量：\nexport LANGUAGE=en_US.UTF-8\nexport LC_ALL=en_US.UTF-8\n\npip install psutil\npip install MySQLdb-python\npip install django=1.8.2\n\n报错：\n pip install MySQLdb-python\nCollecting MySQLdb-python\n  Retrying (Retry(total=4, connect=None, read=None, redirect=None)) after connection broken by 'ReadTimeoutError(\"HTTPSConnectionPool(host='pypi.python.org', port=443): Read timed out. (read timeout=15)\",)': /simple/mysqldb-python/\n  Could not find a version that satisfies the requirement MySQLdb-python (from versions: )\nNo matching distribution found for MySQLdb-python\nYou are using pip version 8.1.1, however version 9.0.1 is available.\nYou should consider upgrading via the 'pip install --upgrade pip' command.\n当安装中提示版本太低的时候，执行提示的命令进行升级即可\npip install --upgrade pip\n升级完重新执行要安装的库\n```\n","slug":"linux/centos6.4升级python","published":1,"updated":"2019-03-02T10:16:37.993Z","comments":1,"photos":[],"link":"","_id":"cjwxes5cu000ehdliaxshu8po","content":"<h1 id=\"1-download-source\"><a href=\"#1-download-source\" class=\"headerlink\" title=\"1. download source\"></a>1. download source</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:<span class=\"comment\">//www.python.org/ftp/python/2.7.12/Python-2.7.12.tgz</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"2-compire-and-install\"><a href=\"#2-compire-and-install\" class=\"headerlink\" title=\"2. compire and install\"></a>2. compire and install</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf Python<span class=\"number\">-2.7</span><span class=\"number\">.12</span>.tgz</span><br><span class=\"line\">cd Python<span class=\"number\">-2.7</span><span class=\"number\">.12</span></span><br><span class=\"line\">./configure --prefix=/usr/local/python27 &amp;&amp; make &amp;&amp; make install &amp;&amp; echo $?</span><br><span class=\"line\">如果以上输出为<span class=\"number\">0</span>，说明没有报错，安装正常</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-add-path-and-backup-the-python2-6\"><a href=\"#3-add-path-and-backup-the-python2-6\" class=\"headerlink\" title=\"3. add path and backup the python2.6\"></a>3. add path and backup the python2.6</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">移除以前的版本</span><br><span class=\"line\">mv /usr/bin/python /usr/bin/python26</span><br><span class=\"line\">创建软连接</span><br><span class=\"line\">ln -s /usr/local/python27/bin/python /usr/bin/python</span><br><span class=\"line\">查看版本是否升级成功</span><br><span class=\"line\">python -V</span><br><span class=\"line\">Python <span class=\"number\">2.7</span><span class=\"number\">.12</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"4-modify-yum\"><a href=\"#4-modify-yum\" class=\"headerlink\" title=\"4. modify yum\"></a>4. modify yum</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果不修改此项，会导致yum无法使用</span><br><span class=\"line\">vim /usr/bin/yum</span><br><span class=\"line\">修改第一行即可，将环境变量指向以前的python版本</span><br><span class=\"line\">#!/usr/bin/python26</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-reinstall-pip\"><a href=\"#5-reinstall-pip\" class=\"headerlink\" title=\"5. reinstall pip\"></a>5. reinstall pip</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>安装pip之前首先需要安装setuptools</span><br><span class=\"line\">下载链接</span><br><span class=\"line\">https:<span class=\"comment\">//pypi.python.org/pypi/setuptools</span></span><br><span class=\"line\">下载地址</span><br><span class=\"line\">wget https:<span class=\"comment\">//pypi.python.org/packages/ff/d4/209f4939c49e31f5524fa0027bf1c8ec3107abaf7c61fdaad704a648c281/setuptools-21.0.0.tar.gz#md5=81964fdb89534118707742e6d1a1ddb4 --no-check-certificate</span></span><br><span class=\"line\">解压</span><br><span class=\"line\">tar zxvf setuptools<span class=\"number\">-21.0</span><span class=\"number\">.0</span>.tar.gz</span><br><span class=\"line\">安装</span><br><span class=\"line\">cd setuptools<span class=\"number\">-21.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">python setup.py  install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>安装pip</span><br><span class=\"line\">下载链接</span><br><span class=\"line\">https:<span class=\"comment\">//pypi.python.org/pypi/pip</span></span><br><span class=\"line\">下载地址</span><br><span class=\"line\">wget https:<span class=\"comment\">//pypi.python.org/packages/41/27/9a8d24e1b55bd8c85e4d022da2922cb206f183e2d18fee4e320c9547e751/pip-8.1.1.tar.gz#md5=6b86f11841e89c8241d689956ba99ed7 --no-check-certificate</span></span><br><span class=\"line\">解压</span><br><span class=\"line\">tar zxvf pip<span class=\"number\">-8.1</span><span class=\"number\">.1</span>.tar.gz </span><br><span class=\"line\">安装 </span><br><span class=\"line\">cd pip<span class=\"number\">-8.1</span><span class=\"number\">.1</span></span><br><span class=\"line\">python setup.py install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>添加环境变量</span><br><span class=\"line\">安装完之后，之后执行pip还是调用的以前的环境变量，需要手动添加环境变量</span><br><span class=\"line\">mv /usr/bin/pip /usr/bin/pip26</span><br><span class=\"line\">ln -s /usr/local/python27/bin/pip /usr/bin/</span><br><span class=\"line\">再次查看版本</span><br><span class=\"line\">pip -V</span><br><span class=\"line\">pip <span class=\"number\">8.1</span><span class=\"number\">.1</span> from /usr/local/python27/lib/python2<span class=\"number\">.7</span>/site-packages/pip<span class=\"number\">-8.1</span><span class=\"number\">.1</span>-py2<span class=\"number\">.7</span>.egg (python <span class=\"number\">2.7</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-使用pip安装第三方库\"><a href=\"#6-使用pip安装第三方库\" class=\"headerlink\" title=\"6.使用pip安装第三方库\"></a>6.使用pip安装第三方库</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果报错locale.Error: unsupported locale setting</span><br><span class=\"line\">加入环境变量：</span><br><span class=\"line\"><span class=\"keyword\">export</span> LANGUAGE=en_US.UTF<span class=\"number\">-8</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> LC_ALL=en_US.UTF<span class=\"number\">-8</span></span><br><span class=\"line\"></span><br><span class=\"line\">pip install psutil</span><br><span class=\"line\">pip install MySQLdb-python</span><br><span class=\"line\">pip install django=<span class=\"number\">1.8</span><span class=\"number\">.2</span></span><br><span class=\"line\"></span><br><span class=\"line\">报错：</span><br><span class=\"line\"> pip install MySQLdb-python</span><br><span class=\"line\">Collecting MySQLdb-python</span><br><span class=\"line\">  Retrying (Retry(total=4, connect=None, read=None, redirect=None)) after connection broken by 'ReadTimeoutError(\"HTTPSConnectionPool(host='pypi.python.org', port=443): Read timed out. (read timeout=15)\",)': /simple/mysqldb-python/</span><br><span class=\"line\">  Could <span class=\"keyword\">not</span> find a version that satisfies the requirement MySQLdb-python (from versions: )</span><br><span class=\"line\">No matching distribution found <span class=\"keyword\">for</span> MySQLdb-python</span><br><span class=\"line\">You are <span class=\"keyword\">using</span> pip version <span class=\"number\">8.1</span><span class=\"number\">.1</span>, however version <span class=\"number\">9.0</span><span class=\"number\">.1</span> is available.</span><br><span class=\"line\">You should consider upgrading via the 'pip install --upgrade pip' command.</span><br><span class=\"line\">当安装中提示版本太低的时候，执行提示的命令进行升级即可</span><br><span class=\"line\">pip install --upgrade pip</span><br><span class=\"line\">升级完重新执行要安装的库</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-download-source\"><a href=\"#1-download-source\" class=\"headerlink\" title=\"1. download source\"></a>1. download source</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:<span class=\"comment\">//www.python.org/ftp/python/2.7.12/Python-2.7.12.tgz</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"2-compire-and-install\"><a href=\"#2-compire-and-install\" class=\"headerlink\" title=\"2. compire and install\"></a>2. compire and install</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf Python<span class=\"number\">-2.7</span><span class=\"number\">.12</span>.tgz</span><br><span class=\"line\">cd Python<span class=\"number\">-2.7</span><span class=\"number\">.12</span></span><br><span class=\"line\">./configure --prefix=/usr/local/python27 &amp;&amp; make &amp;&amp; make install &amp;&amp; echo $?</span><br><span class=\"line\">如果以上输出为<span class=\"number\">0</span>，说明没有报错，安装正常</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-add-path-and-backup-the-python2-6\"><a href=\"#3-add-path-and-backup-the-python2-6\" class=\"headerlink\" title=\"3. add path and backup the python2.6\"></a>3. add path and backup the python2.6</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">移除以前的版本</span><br><span class=\"line\">mv /usr/bin/python /usr/bin/python26</span><br><span class=\"line\">创建软连接</span><br><span class=\"line\">ln -s /usr/local/python27/bin/python /usr/bin/python</span><br><span class=\"line\">查看版本是否升级成功</span><br><span class=\"line\">python -V</span><br><span class=\"line\">Python <span class=\"number\">2.7</span><span class=\"number\">.12</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"4-modify-yum\"><a href=\"#4-modify-yum\" class=\"headerlink\" title=\"4. modify yum\"></a>4. modify yum</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果不修改此项，会导致yum无法使用</span><br><span class=\"line\">vim /usr/bin/yum</span><br><span class=\"line\">修改第一行即可，将环境变量指向以前的python版本</span><br><span class=\"line\">#!/usr/bin/python26</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-reinstall-pip\"><a href=\"#5-reinstall-pip\" class=\"headerlink\" title=\"5. reinstall pip\"></a>5. reinstall pip</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>安装pip之前首先需要安装setuptools</span><br><span class=\"line\">下载链接</span><br><span class=\"line\">https:<span class=\"comment\">//pypi.python.org/pypi/setuptools</span></span><br><span class=\"line\">下载地址</span><br><span class=\"line\">wget https:<span class=\"comment\">//pypi.python.org/packages/ff/d4/209f4939c49e31f5524fa0027bf1c8ec3107abaf7c61fdaad704a648c281/setuptools-21.0.0.tar.gz#md5=81964fdb89534118707742e6d1a1ddb4 --no-check-certificate</span></span><br><span class=\"line\">解压</span><br><span class=\"line\">tar zxvf setuptools<span class=\"number\">-21.0</span><span class=\"number\">.0</span>.tar.gz</span><br><span class=\"line\">安装</span><br><span class=\"line\">cd setuptools<span class=\"number\">-21.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">python setup.py  install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>安装pip</span><br><span class=\"line\">下载链接</span><br><span class=\"line\">https:<span class=\"comment\">//pypi.python.org/pypi/pip</span></span><br><span class=\"line\">下载地址</span><br><span class=\"line\">wget https:<span class=\"comment\">//pypi.python.org/packages/41/27/9a8d24e1b55bd8c85e4d022da2922cb206f183e2d18fee4e320c9547e751/pip-8.1.1.tar.gz#md5=6b86f11841e89c8241d689956ba99ed7 --no-check-certificate</span></span><br><span class=\"line\">解压</span><br><span class=\"line\">tar zxvf pip<span class=\"number\">-8.1</span><span class=\"number\">.1</span>.tar.gz </span><br><span class=\"line\">安装 </span><br><span class=\"line\">cd pip<span class=\"number\">-8.1</span><span class=\"number\">.1</span></span><br><span class=\"line\">python setup.py install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>添加环境变量</span><br><span class=\"line\">安装完之后，之后执行pip还是调用的以前的环境变量，需要手动添加环境变量</span><br><span class=\"line\">mv /usr/bin/pip /usr/bin/pip26</span><br><span class=\"line\">ln -s /usr/local/python27/bin/pip /usr/bin/</span><br><span class=\"line\">再次查看版本</span><br><span class=\"line\">pip -V</span><br><span class=\"line\">pip <span class=\"number\">8.1</span><span class=\"number\">.1</span> from /usr/local/python27/lib/python2<span class=\"number\">.7</span>/site-packages/pip<span class=\"number\">-8.1</span><span class=\"number\">.1</span>-py2<span class=\"number\">.7</span>.egg (python <span class=\"number\">2.7</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-使用pip安装第三方库\"><a href=\"#6-使用pip安装第三方库\" class=\"headerlink\" title=\"6.使用pip安装第三方库\"></a>6.使用pip安装第三方库</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果报错locale.Error: unsupported locale setting</span><br><span class=\"line\">加入环境变量：</span><br><span class=\"line\"><span class=\"keyword\">export</span> LANGUAGE=en_US.UTF<span class=\"number\">-8</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> LC_ALL=en_US.UTF<span class=\"number\">-8</span></span><br><span class=\"line\"></span><br><span class=\"line\">pip install psutil</span><br><span class=\"line\">pip install MySQLdb-python</span><br><span class=\"line\">pip install django=<span class=\"number\">1.8</span><span class=\"number\">.2</span></span><br><span class=\"line\"></span><br><span class=\"line\">报错：</span><br><span class=\"line\"> pip install MySQLdb-python</span><br><span class=\"line\">Collecting MySQLdb-python</span><br><span class=\"line\">  Retrying (Retry(total=4, connect=None, read=None, redirect=None)) after connection broken by 'ReadTimeoutError(\"HTTPSConnectionPool(host='pypi.python.org', port=443): Read timed out. (read timeout=15)\",)': /simple/mysqldb-python/</span><br><span class=\"line\">  Could <span class=\"keyword\">not</span> find a version that satisfies the requirement MySQLdb-python (from versions: )</span><br><span class=\"line\">No matching distribution found <span class=\"keyword\">for</span> MySQLdb-python</span><br><span class=\"line\">You are <span class=\"keyword\">using</span> pip version <span class=\"number\">8.1</span><span class=\"number\">.1</span>, however version <span class=\"number\">9.0</span><span class=\"number\">.1</span> is available.</span><br><span class=\"line\">You should consider upgrading via the 'pip install --upgrade pip' command.</span><br><span class=\"line\">当安装中提示版本太低的时候，执行提示的命令进行升级即可</span><br><span class=\"line\">pip install --upgrade pip</span><br><span class=\"line\">升级完重新执行要安装的库</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"一张图看懂centos6和7的启动流程区别","date":"2019-06-09T02:34:58.000Z","comments":1,"_content":"\n# 启动流程\n\n![](centos6和7的启动流程/centos6和7的启动流程.png)\n","source":"_posts/linux/centos6和7的启动流程.md","raw":"---\nlayout: post\ntitle: 一张图看懂centos6和7的启动流程区别\ncategory: linux\ntags: hexo\ndate: 2019-6-09 10:34:58\ncomments: true\n---\n\n# 启动流程\n\n![](centos6和7的启动流程/centos6和7的启动流程.png)\n","slug":"linux/centos6和7的启动流程","published":1,"updated":"2019-06-09T10:08:52.957Z","photos":[],"link":"","_id":"cjwxes5cw000ghdli1cu1dzsm","content":"<h1 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h1><p><img src=\"/2019/06/09/linux/centos6和7的启动流程/centos6和7的启动流程.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h1><p><img src=\"/2019/06/09/linux/centos6和7的启动流程/centos6和7的启动流程.png\" alt=\"\"></p>\n"},{"layout":"post","title":"git 配置文件","date":"2016-06-28T06:33:58.000Z","comments":1,"_content":"\n# 基于公司是代理上网的，所以配置windows下的.gitconfig文件如下：\n\n```cpp\n[http]\n\tproxy = 代理ip:代理port\n[user]\n\temail = xxxxx@gmail.com\n\tname =xxxxxhhh \n[gui]  \nencoding = utf-8 #代码库统一使用utf-8  \n```\n### 由于本人电脑是日语版OS，所以GIT终端显示中文字体是乱码，所以索性设置全部\n### 使用utf-8编码。\n","source":"_posts/linux/git_1_config.md","raw":"---\nlayout: post\ntitle: git 配置文件 \ncategory: git \ntags: git \ndate: 2016-06-28 14:33:58\ncomments: true\n\n---\n\n# 基于公司是代理上网的，所以配置windows下的.gitconfig文件如下：\n\n```cpp\n[http]\n\tproxy = 代理ip:代理port\n[user]\n\temail = xxxxx@gmail.com\n\tname =xxxxxhhh \n[gui]  \nencoding = utf-8 #代码库统一使用utf-8  \n```\n### 由于本人电脑是日语版OS，所以GIT终端显示中文字体是乱码，所以索性设置全部\n### 使用utf-8编码。\n","slug":"linux/git_1_config","published":1,"updated":"2019-05-19T14:18:38.607Z","photos":[],"link":"","_id":"cjwxes5cx000jhdlif3hndw4l","content":"<h1 id=\"基于公司是代理上网的，所以配置windows下的-gitconfig文件如下：\"><a href=\"#基于公司是代理上网的，所以配置windows下的-gitconfig文件如下：\" class=\"headerlink\" title=\"基于公司是代理上网的，所以配置windows下的.gitconfig文件如下：\"></a>基于公司是代理上网的，所以配置windows下的.gitconfig文件如下：</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[http]</span><br><span class=\"line\">\tproxy = 代理ip:代理port</span><br><span class=\"line\">[user]</span><br><span class=\"line\">\temail = xxxxx@gmail.com</span><br><span class=\"line\">\tname =xxxxxhhh </span><br><span class=\"line\">[gui]  </span><br><span class=\"line\">encoding = utf<span class=\"number\">-8</span> #代码库统一使用utf<span class=\"number\">-8</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"由于本人电脑是日语版OS，所以GIT终端显示中文字体是乱码，所以索性设置全部\"><a href=\"#由于本人电脑是日语版OS，所以GIT终端显示中文字体是乱码，所以索性设置全部\" class=\"headerlink\" title=\"由于本人电脑是日语版OS，所以GIT终端显示中文字体是乱码，所以索性设置全部\"></a>由于本人电脑是日语版OS，所以GIT终端显示中文字体是乱码，所以索性设置全部</h3><h3 id=\"使用utf-8编码。\"><a href=\"#使用utf-8编码。\" class=\"headerlink\" title=\"使用utf-8编码。\"></a>使用utf-8编码。</h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基于公司是代理上网的，所以配置windows下的-gitconfig文件如下：\"><a href=\"#基于公司是代理上网的，所以配置windows下的-gitconfig文件如下：\" class=\"headerlink\" title=\"基于公司是代理上网的，所以配置windows下的.gitconfig文件如下：\"></a>基于公司是代理上网的，所以配置windows下的.gitconfig文件如下：</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[http]</span><br><span class=\"line\">\tproxy = 代理ip:代理port</span><br><span class=\"line\">[user]</span><br><span class=\"line\">\temail = xxxxx@gmail.com</span><br><span class=\"line\">\tname =xxxxxhhh </span><br><span class=\"line\">[gui]  </span><br><span class=\"line\">encoding = utf<span class=\"number\">-8</span> #代码库统一使用utf<span class=\"number\">-8</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"由于本人电脑是日语版OS，所以GIT终端显示中文字体是乱码，所以索性设置全部\"><a href=\"#由于本人电脑是日语版OS，所以GIT终端显示中文字体是乱码，所以索性设置全部\" class=\"headerlink\" title=\"由于本人电脑是日语版OS，所以GIT终端显示中文字体是乱码，所以索性设置全部\"></a>由于本人电脑是日语版OS，所以GIT终端显示中文字体是乱码，所以索性设置全部</h3><h3 id=\"使用utf-8编码。\"><a href=\"#使用utf-8编码。\" class=\"headerlink\" title=\"使用utf-8编码。\"></a>使用utf-8编码。</h3>"},{"layout":"post","title":"git 常见操作","date":"2018-05-26T04:00:00.000Z","comments":1,"_content":"\n## 创建分支\n\n```shell\n\tgit branch new_branch\n```\n\n## 本地删除分支\n\n```shell\n\tgit branch -D delete_branch \n```\n## 更新到远程删除分支 \n\n```shell\n\tgit checkout master \n\tgit pull -u   -u origin :delete_branch\n```\n\n\n## git pull 失败提示fatal: refusing to merge unrelated histories ,处理方法\n\n```shell\n\tgit pull origin master --allow-unrelated-historiesn\n\n```\n\n# 查看提交提记录\n\n```shell\n\tgit log\n\tgit log -p -2  #查看最近两次的提交差异\n\tgit log --stat #仅仅现实行数的变更\n\tgit log --pretty=oneline #每次提交，在一行显示\n\tgit log --pretty=format:\"%h - %an, %ar : %s\"   #格式显示\n```\n |选项\t|说明|\n |--|--|\n |%H\t|提交对象（提交）的完整哈希字串|\n |%h\t|提交对象的简短哈希字串|\n |%T\t|树对象（树）的完整哈希字串|\n |%t\t|树对象的简短哈希字串|\n |%P\t|父对象（父）的完整哈希字串|\n |%p\t|父对象的简短哈希字串|\n |%an\t|作者（作者）的名字|\n |%ae\t|作者的电子邮件地址|\n |%ad\t|作者修订日期（可以用-date =选项定制格式）|\n |%ar\t|作者修订日期，按多久以前的方式显示|\n |%cn\t|提交者（提交者）的名字|\n |%ce\t|提交者的电子邮件地址|\n |%cd\t|提交日期|\n |%cr\t|提交日期，按多久以前的方式显示|\n |%s\t|提交说明|\n\n# 待续......\n\n","source":"_posts/linux/git_2_operate.md","raw":"---\nlayout: post\ntitle: git 常见操作 \ncategory: git \ntags: git \ndate: 2018-05-26 12:00:00\ncomments: true\n\n---\n\n## 创建分支\n\n```shell\n\tgit branch new_branch\n```\n\n## 本地删除分支\n\n```shell\n\tgit branch -D delete_branch \n```\n## 更新到远程删除分支 \n\n```shell\n\tgit checkout master \n\tgit pull -u   -u origin :delete_branch\n```\n\n\n## git pull 失败提示fatal: refusing to merge unrelated histories ,处理方法\n\n```shell\n\tgit pull origin master --allow-unrelated-historiesn\n\n```\n\n# 查看提交提记录\n\n```shell\n\tgit log\n\tgit log -p -2  #查看最近两次的提交差异\n\tgit log --stat #仅仅现实行数的变更\n\tgit log --pretty=oneline #每次提交，在一行显示\n\tgit log --pretty=format:\"%h - %an, %ar : %s\"   #格式显示\n```\n |选项\t|说明|\n |--|--|\n |%H\t|提交对象（提交）的完整哈希字串|\n |%h\t|提交对象的简短哈希字串|\n |%T\t|树对象（树）的完整哈希字串|\n |%t\t|树对象的简短哈希字串|\n |%P\t|父对象（父）的完整哈希字串|\n |%p\t|父对象的简短哈希字串|\n |%an\t|作者（作者）的名字|\n |%ae\t|作者的电子邮件地址|\n |%ad\t|作者修订日期（可以用-date =选项定制格式）|\n |%ar\t|作者修订日期，按多久以前的方式显示|\n |%cn\t|提交者（提交者）的名字|\n |%ce\t|提交者的电子邮件地址|\n |%cd\t|提交日期|\n |%cr\t|提交日期，按多久以前的方式显示|\n |%s\t|提交说明|\n\n# 待续......\n\n","slug":"linux/git_2_operate","published":1,"updated":"2019-05-19T14:18:38.607Z","photos":[],"link":"","_id":"cjwxes5cy000lhdliek80ptz8","content":"<h2 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch new_branch</span><br></pre></td></tr></table></figure>\n<h2 id=\"本地删除分支\"><a href=\"#本地删除分支\" class=\"headerlink\" title=\"本地删除分支\"></a>本地删除分支</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D delete_branch</span><br></pre></td></tr></table></figure>\n<h2 id=\"更新到远程删除分支\"><a href=\"#更新到远程删除分支\" class=\"headerlink\" title=\"更新到远程删除分支\"></a>更新到远程删除分支</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master </span><br><span class=\"line\">git pull -u   -u origin :delete_branch</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-pull-失败提示fatal-refusing-to-merge-unrelated-histories-处理方法\"><a href=\"#git-pull-失败提示fatal-refusing-to-merge-unrelated-histories-处理方法\" class=\"headerlink\" title=\"git pull 失败提示fatal: refusing to merge unrelated histories ,处理方法\"></a>git pull 失败提示fatal: refusing to merge unrelated histories ,处理方法</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master --allow-unrelated-historiesn</span><br></pre></td></tr></table></figure>\n<h1 id=\"查看提交提记录\"><a href=\"#查看提交提记录\" class=\"headerlink\" title=\"查看提交提记录\"></a>查看提交提记录</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br><span class=\"line\">git log -p -2  #查看最近两次的提交差异</span><br><span class=\"line\">git log --stat #仅仅现实行数的变更</span><br><span class=\"line\">git log --pretty=oneline #每次提交，在一行显示</span><br><span class=\"line\">git log --pretty=format:\"%h - %an, %ar : %s\"   #格式显示</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%H</td>\n<td>提交对象（提交）的完整哈希字串</td>\n</tr>\n<tr>\n<td>%h</td>\n<td>提交对象的简短哈希字串</td>\n</tr>\n<tr>\n<td>%T</td>\n<td>树对象（树）的完整哈希字串</td>\n</tr>\n<tr>\n<td>%t</td>\n<td>树对象的简短哈希字串</td>\n</tr>\n<tr>\n<td>%P</td>\n<td>父对象（父）的完整哈希字串</td>\n</tr>\n<tr>\n<td>%p</td>\n<td>父对象的简短哈希字串</td>\n</tr>\n<tr>\n<td>%an</td>\n<td>作者（作者）的名字</td>\n</tr>\n<tr>\n<td>%ae</td>\n<td>作者的电子邮件地址</td>\n</tr>\n<tr>\n<td>%ad</td>\n<td>作者修订日期（可以用-date =选项定制格式）</td>\n</tr>\n<tr>\n<td>%ar</td>\n<td>作者修订日期，按多久以前的方式显示</td>\n</tr>\n<tr>\n<td>%cn</td>\n<td>提交者（提交者）的名字</td>\n</tr>\n<tr>\n<td>%ce</td>\n<td>提交者的电子邮件地址</td>\n</tr>\n<tr>\n<td>%cd</td>\n<td>提交日期</td>\n</tr>\n<tr>\n<td>%cr</td>\n<td>提交日期，按多久以前的方式显示</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>提交说明</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"待续……\"><a href=\"#待续……\" class=\"headerlink\" title=\"待续……\"></a>待续……</h1>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch new_branch</span><br></pre></td></tr></table></figure>\n<h2 id=\"本地删除分支\"><a href=\"#本地删除分支\" class=\"headerlink\" title=\"本地删除分支\"></a>本地删除分支</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D delete_branch</span><br></pre></td></tr></table></figure>\n<h2 id=\"更新到远程删除分支\"><a href=\"#更新到远程删除分支\" class=\"headerlink\" title=\"更新到远程删除分支\"></a>更新到远程删除分支</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master </span><br><span class=\"line\">git pull -u   -u origin :delete_branch</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-pull-失败提示fatal-refusing-to-merge-unrelated-histories-处理方法\"><a href=\"#git-pull-失败提示fatal-refusing-to-merge-unrelated-histories-处理方法\" class=\"headerlink\" title=\"git pull 失败提示fatal: refusing to merge unrelated histories ,处理方法\"></a>git pull 失败提示fatal: refusing to merge unrelated histories ,处理方法</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master --allow-unrelated-historiesn</span><br></pre></td></tr></table></figure>\n<h1 id=\"查看提交提记录\"><a href=\"#查看提交提记录\" class=\"headerlink\" title=\"查看提交提记录\"></a>查看提交提记录</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br><span class=\"line\">git log -p -2  #查看最近两次的提交差异</span><br><span class=\"line\">git log --stat #仅仅现实行数的变更</span><br><span class=\"line\">git log --pretty=oneline #每次提交，在一行显示</span><br><span class=\"line\">git log --pretty=format:\"%h - %an, %ar : %s\"   #格式显示</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%H</td>\n<td>提交对象（提交）的完整哈希字串</td>\n</tr>\n<tr>\n<td>%h</td>\n<td>提交对象的简短哈希字串</td>\n</tr>\n<tr>\n<td>%T</td>\n<td>树对象（树）的完整哈希字串</td>\n</tr>\n<tr>\n<td>%t</td>\n<td>树对象的简短哈希字串</td>\n</tr>\n<tr>\n<td>%P</td>\n<td>父对象（父）的完整哈希字串</td>\n</tr>\n<tr>\n<td>%p</td>\n<td>父对象的简短哈希字串</td>\n</tr>\n<tr>\n<td>%an</td>\n<td>作者（作者）的名字</td>\n</tr>\n<tr>\n<td>%ae</td>\n<td>作者的电子邮件地址</td>\n</tr>\n<tr>\n<td>%ad</td>\n<td>作者修订日期（可以用-date =选项定制格式）</td>\n</tr>\n<tr>\n<td>%ar</td>\n<td>作者修订日期，按多久以前的方式显示</td>\n</tr>\n<tr>\n<td>%cn</td>\n<td>提交者（提交者）的名字</td>\n</tr>\n<tr>\n<td>%ce</td>\n<td>提交者的电子邮件地址</td>\n</tr>\n<tr>\n<td>%cd</td>\n<td>提交日期</td>\n</tr>\n<tr>\n<td>%cr</td>\n<td>提交日期，按多久以前的方式显示</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>提交说明</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"待续……\"><a href=\"#待续……\" class=\"headerlink\" title=\"待续……\"></a>待续……</h1>"},{"layout":"post","title":"git_linux搭建服务器","date":"2019-03-02T04:00:00.000Z","comments":1,"_content":"\n## 为什么本地搭建一个git服务器\n\n- 对于自己学习使用的代码，在没有网络的情况下不能用github，gitlab,所以本地建立一个git服务器。\n\n## git服务器环境准备centos7\n\n\n## 服务端创建git用户\n```shell\n\tid git # 查看是否存在git用户，存在就不创建了。\n\tuseradd git\n\tpasswd git\n\t输入密码，我设置的是xxx@123\n\t\n```\n\n\n## 客户端开启公钥认证认证，免密push/pull\n\n- 首先服务端需要开启ssh服务\n```shell\nvim /etc/ssh/sshd_config\nRSAAuthentication yes \nPubkeyAuthentication yes\nAuthorizedKeysFile .ssh/authorized_keys\n如果是centos7.4以上（含7.4），ssh1已经不支持了，只支持ssh2代协议。所以RSAAuthentication项是没有的\n\n```\n- 客户端执行 执行ssh-keygen -t rsa 生成公钥和私钥\n- 复制客户端公钥到服务器端ssh-copy-id -i ~/.ssh/id_rsa.pub git@192.168.61.128 \n\n\n\n## 服务端创建git仓库\n```shell\n\tmkdir -p /data/git/gittest.git\n\t\n\t# 初始化这个仓库\n\tcd /data/git/gittest.git\n\tgit init --bare .\n\t\n\t# 目录所属用户设置\n\tchown -R git:git /data/git \n\t\n```\n\n## 客户端clone远程仓库\n```shell\n\tmkdir localgit\n\tcd localgit\n\tgit clone git@192.168.61.128:/data/git/gittest.git .\n\t# 提示输入服务端git账户的密码。\n\t#修改完就可以提交了\n\t\n\ttouch abc.txt\n\tgit add .\n\tgit commit -m 'aaa'\n\tgit push \n\t\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/linux/git_linux搭建服务器.md","raw":"---\nlayout: post\ntitle: git_linux搭建服务器 \ncategory: git \ntags: git \ndate: 2019-03-02 12:00:00\ncomments: true\n\n---\n\n## 为什么本地搭建一个git服务器\n\n- 对于自己学习使用的代码，在没有网络的情况下不能用github，gitlab,所以本地建立一个git服务器。\n\n## git服务器环境准备centos7\n\n\n## 服务端创建git用户\n```shell\n\tid git # 查看是否存在git用户，存在就不创建了。\n\tuseradd git\n\tpasswd git\n\t输入密码，我设置的是xxx@123\n\t\n```\n\n\n## 客户端开启公钥认证认证，免密push/pull\n\n- 首先服务端需要开启ssh服务\n```shell\nvim /etc/ssh/sshd_config\nRSAAuthentication yes \nPubkeyAuthentication yes\nAuthorizedKeysFile .ssh/authorized_keys\n如果是centos7.4以上（含7.4），ssh1已经不支持了，只支持ssh2代协议。所以RSAAuthentication项是没有的\n\n```\n- 客户端执行 执行ssh-keygen -t rsa 生成公钥和私钥\n- 复制客户端公钥到服务器端ssh-copy-id -i ~/.ssh/id_rsa.pub git@192.168.61.128 \n\n\n\n## 服务端创建git仓库\n```shell\n\tmkdir -p /data/git/gittest.git\n\t\n\t# 初始化这个仓库\n\tcd /data/git/gittest.git\n\tgit init --bare .\n\t\n\t# 目录所属用户设置\n\tchown -R git:git /data/git \n\t\n```\n\n## 客户端clone远程仓库\n```shell\n\tmkdir localgit\n\tcd localgit\n\tgit clone git@192.168.61.128:/data/git/gittest.git .\n\t# 提示输入服务端git账户的密码。\n\t#修改完就可以提交了\n\t\n\ttouch abc.txt\n\tgit add .\n\tgit commit -m 'aaa'\n\tgit push \n\t\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"linux/git_linux搭建服务器","published":1,"updated":"2019-05-19T14:18:38.608Z","photos":[],"link":"","_id":"cjwxes5cz000phdli1b34tyk8","content":"<h2 id=\"为什么本地搭建一个git服务器\"><a href=\"#为什么本地搭建一个git服务器\" class=\"headerlink\" title=\"为什么本地搭建一个git服务器\"></a>为什么本地搭建一个git服务器</h2><ul>\n<li>对于自己学习使用的代码，在没有网络的情况下不能用github，gitlab,所以本地建立一个git服务器。</li>\n</ul>\n<h2 id=\"git服务器环境准备centos7\"><a href=\"#git服务器环境准备centos7\" class=\"headerlink\" title=\"git服务器环境准备centos7\"></a>git服务器环境准备centos7</h2><h2 id=\"服务端创建git用户\"><a href=\"#服务端创建git用户\" class=\"headerlink\" title=\"服务端创建git用户\"></a>服务端创建git用户</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id git # 查看是否存在git用户，存在就不创建了。</span><br><span class=\"line\">useradd git</span><br><span class=\"line\">passwd git</span><br><span class=\"line\">输入密码，我设置的是xxx@123</span><br></pre></td></tr></table></figure>\n<h2 id=\"客户端开启公钥认证认证，免密push-pull\"><a href=\"#客户端开启公钥认证认证，免密push-pull\" class=\"headerlink\" title=\"客户端开启公钥认证认证，免密push/pull\"></a>客户端开启公钥认证认证，免密push/pull</h2><ul>\n<li><p>首先服务端需要开启ssh服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/ssh/sshd_config</span><br><span class=\"line\">RSAAuthentication yes </span><br><span class=\"line\">PubkeyAuthentication yes</span><br><span class=\"line\">AuthorizedKeysFile .ssh/authorized_keys</span><br><span class=\"line\">如果是centos7.4以上（含7.4），ssh1已经不支持了，只支持ssh2代协议。所以RSAAuthentication项是没有的</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端执行 执行ssh-keygen -t rsa 生成公钥和私钥</p>\n</li>\n<li>复制客户端公钥到服务器端ssh-copy-id -i ~/.ssh/id_rsa.pub <a href=\"mailto:git@192.168.61.128\" target=\"_blank\" rel=\"noopener\">git@192.168.61.128</a> </li>\n</ul>\n<h2 id=\"服务端创建git仓库\"><a href=\"#服务端创建git仓库\" class=\"headerlink\" title=\"服务端创建git仓库\"></a>服务端创建git仓库</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/git/gittest.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 初始化这个仓库</span><br><span class=\"line\">cd /data/git/gittest.git</span><br><span class=\"line\">git init --bare .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 目录所属用户设置</span><br><span class=\"line\">chown -R git:git /data/git</span><br></pre></td></tr></table></figure>\n<h2 id=\"客户端clone远程仓库\"><a href=\"#客户端clone远程仓库\" class=\"headerlink\" title=\"客户端clone远程仓库\"></a>客户端clone远程仓库</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir localgit</span><br><span class=\"line\">cd localgit</span><br><span class=\"line\">git clone git@192.168.61.128:/data/git/gittest.git .</span><br><span class=\"line\"><span class=\"meta\">#</span> 提示输入服务端git账户的密码。</span><br><span class=\"line\"><span class=\"meta\">#</span>修改完就可以提交了</span><br><span class=\"line\"></span><br><span class=\"line\">touch abc.txt</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m 'aaa'</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"为什么本地搭建一个git服务器\"><a href=\"#为什么本地搭建一个git服务器\" class=\"headerlink\" title=\"为什么本地搭建一个git服务器\"></a>为什么本地搭建一个git服务器</h2><ul>\n<li>对于自己学习使用的代码，在没有网络的情况下不能用github，gitlab,所以本地建立一个git服务器。</li>\n</ul>\n<h2 id=\"git服务器环境准备centos7\"><a href=\"#git服务器环境准备centos7\" class=\"headerlink\" title=\"git服务器环境准备centos7\"></a>git服务器环境准备centos7</h2><h2 id=\"服务端创建git用户\"><a href=\"#服务端创建git用户\" class=\"headerlink\" title=\"服务端创建git用户\"></a>服务端创建git用户</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id git # 查看是否存在git用户，存在就不创建了。</span><br><span class=\"line\">useradd git</span><br><span class=\"line\">passwd git</span><br><span class=\"line\">输入密码，我设置的是xxx@123</span><br></pre></td></tr></table></figure>\n<h2 id=\"客户端开启公钥认证认证，免密push-pull\"><a href=\"#客户端开启公钥认证认证，免密push-pull\" class=\"headerlink\" title=\"客户端开启公钥认证认证，免密push/pull\"></a>客户端开启公钥认证认证，免密push/pull</h2><ul>\n<li><p>首先服务端需要开启ssh服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/ssh/sshd_config</span><br><span class=\"line\">RSAAuthentication yes </span><br><span class=\"line\">PubkeyAuthentication yes</span><br><span class=\"line\">AuthorizedKeysFile .ssh/authorized_keys</span><br><span class=\"line\">如果是centos7.4以上（含7.4），ssh1已经不支持了，只支持ssh2代协议。所以RSAAuthentication项是没有的</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端执行 执行ssh-keygen -t rsa 生成公钥和私钥</p>\n</li>\n<li>复制客户端公钥到服务器端ssh-copy-id -i ~/.ssh/id_rsa.pub <a href=\"mailto:git@192.168.61.128\" target=\"_blank\" rel=\"noopener\">git@192.168.61.128</a> </li>\n</ul>\n<h2 id=\"服务端创建git仓库\"><a href=\"#服务端创建git仓库\" class=\"headerlink\" title=\"服务端创建git仓库\"></a>服务端创建git仓库</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/git/gittest.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 初始化这个仓库</span><br><span class=\"line\">cd /data/git/gittest.git</span><br><span class=\"line\">git init --bare .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 目录所属用户设置</span><br><span class=\"line\">chown -R git:git /data/git</span><br></pre></td></tr></table></figure>\n<h2 id=\"客户端clone远程仓库\"><a href=\"#客户端clone远程仓库\" class=\"headerlink\" title=\"客户端clone远程仓库\"></a>客户端clone远程仓库</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir localgit</span><br><span class=\"line\">cd localgit</span><br><span class=\"line\">git clone git@192.168.61.128:/data/git/gittest.git .</span><br><span class=\"line\"><span class=\"meta\">#</span> 提示输入服务端git账户的密码。</span><br><span class=\"line\"><span class=\"meta\">#</span>修改完就可以提交了</span><br><span class=\"line\"></span><br><span class=\"line\">touch abc.txt</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m 'aaa'</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"git_tag用法","date":"2019-03-02T04:00:00.000Z","comments":1,"_content":"\n## tag 和branch的区别\n- Git tag是一系列commit的中的一个点，只能查看，不能移动。\n- branch是一系列串联的commit的线。\n\n### git tag的用法\n- 我们常常在代码封板时,使用git 创建一个tag ,这样一个不可修改的历史代码版本就像被我们封存起来一样,不论是运维发布拉取,或者以后的代码版本管理,都是十分方便的\n\n### git的tag功能\n- git 下打标签其实有2种情况\n轻量级的：它其实是一个独立的分支,或者说是一个不可变的分支.指向特定提交对象的引用\n- 带附注的：实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证,电子邮件地址和日期，一般我们都建议使用含附注型的标签，以便保留相关信息\n所以我们推荐使用第二种标签形式\n\n### 创建tag\n- git tag -a V1.2 -m 'release 1.2'\n- 上面的命令我们成功创建了本地一个版本 V1.2 ,并且添加了附注信息 'release 1.2'\n\n## 查看tag\n- git tag\n- 要显示附注信息,我们需要用 show 指令来查看\n- git show V1.2\n\n- 但是目前这个标签仅仅是提交到了本地git仓库.如何同步到远程代码库\n- git push origin --tags\n\n- 如果刚刚同步上去,你缺发现一个致命bug ,需要重新打版本,现在还为时不晚.\n- git tag -d V1.2\n\n- 到这一步我们只是删除了本地 V1.2的版本,可是线上V1.2的版本还是存在,如何办?这时我们可以推送的空的同名版本到线下,达到删除线上版本的目标:\n- git push origin :refs/tags/V1.2\n\n- 如何获取远程版本?\n- git fetch origin tag V1.2\n- 这样我们可以精准拉取指定的某一个版本.适用于运维同学部署指定版本.\n\n\n\n\n\n\n\n\n\n","source":"_posts/linux/git_tag用法.md","raw":"---\nlayout: post\ntitle: git_tag用法 \ncategory: git \ntags: git \ndate: 2019-03-02 12:00:00\ncomments: true\n\n---\n\n## tag 和branch的区别\n- Git tag是一系列commit的中的一个点，只能查看，不能移动。\n- branch是一系列串联的commit的线。\n\n### git tag的用法\n- 我们常常在代码封板时,使用git 创建一个tag ,这样一个不可修改的历史代码版本就像被我们封存起来一样,不论是运维发布拉取,或者以后的代码版本管理,都是十分方便的\n\n### git的tag功能\n- git 下打标签其实有2种情况\n轻量级的：它其实是一个独立的分支,或者说是一个不可变的分支.指向特定提交对象的引用\n- 带附注的：实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证,电子邮件地址和日期，一般我们都建议使用含附注型的标签，以便保留相关信息\n所以我们推荐使用第二种标签形式\n\n### 创建tag\n- git tag -a V1.2 -m 'release 1.2'\n- 上面的命令我们成功创建了本地一个版本 V1.2 ,并且添加了附注信息 'release 1.2'\n\n## 查看tag\n- git tag\n- 要显示附注信息,我们需要用 show 指令来查看\n- git show V1.2\n\n- 但是目前这个标签仅仅是提交到了本地git仓库.如何同步到远程代码库\n- git push origin --tags\n\n- 如果刚刚同步上去,你缺发现一个致命bug ,需要重新打版本,现在还为时不晚.\n- git tag -d V1.2\n\n- 到这一步我们只是删除了本地 V1.2的版本,可是线上V1.2的版本还是存在,如何办?这时我们可以推送的空的同名版本到线下,达到删除线上版本的目标:\n- git push origin :refs/tags/V1.2\n\n- 如何获取远程版本?\n- git fetch origin tag V1.2\n- 这样我们可以精准拉取指定的某一个版本.适用于运维同学部署指定版本.\n\n\n\n\n\n\n\n\n\n","slug":"linux/git_tag用法","published":1,"updated":"2019-05-19T14:18:38.608Z","photos":[],"link":"","_id":"cjwxes5d0000rhdlis6bjz5yq","content":"<h2 id=\"tag-和branch的区别\"><a href=\"#tag-和branch的区别\" class=\"headerlink\" title=\"tag 和branch的区别\"></a>tag 和branch的区别</h2><ul>\n<li>Git tag是一系列commit的中的一个点，只能查看，不能移动。</li>\n<li>branch是一系列串联的commit的线。</li>\n</ul>\n<h3 id=\"git-tag的用法\"><a href=\"#git-tag的用法\" class=\"headerlink\" title=\"git tag的用法\"></a>git tag的用法</h3><ul>\n<li>我们常常在代码封板时,使用git 创建一个tag ,这样一个不可修改的历史代码版本就像被我们封存起来一样,不论是运维发布拉取,或者以后的代码版本管理,都是十分方便的</li>\n</ul>\n<h3 id=\"git的tag功能\"><a href=\"#git的tag功能\" class=\"headerlink\" title=\"git的tag功能\"></a>git的tag功能</h3><ul>\n<li>git 下打标签其实有2种情况<br>轻量级的：它其实是一个独立的分支,或者说是一个不可变的分支.指向特定提交对象的引用</li>\n<li>带附注的：实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证,电子邮件地址和日期，一般我们都建议使用含附注型的标签，以便保留相关信息<br>所以我们推荐使用第二种标签形式</li>\n</ul>\n<h3 id=\"创建tag\"><a href=\"#创建tag\" class=\"headerlink\" title=\"创建tag\"></a>创建tag</h3><ul>\n<li>git tag -a V1.2 -m ‘release 1.2’</li>\n<li>上面的命令我们成功创建了本地一个版本 V1.2 ,并且添加了附注信息 ‘release 1.2’</li>\n</ul>\n<h2 id=\"查看tag\"><a href=\"#查看tag\" class=\"headerlink\" title=\"查看tag\"></a>查看tag</h2><ul>\n<li>git tag</li>\n<li>要显示附注信息,我们需要用 show 指令来查看</li>\n<li><p>git show V1.2</p>\n</li>\n<li><p>但是目前这个标签仅仅是提交到了本地git仓库.如何同步到远程代码库</p>\n</li>\n<li><p>git push origin –tags</p>\n</li>\n<li><p>如果刚刚同步上去,你缺发现一个致命bug ,需要重新打版本,现在还为时不晚.</p>\n</li>\n<li><p>git tag -d V1.2</p>\n</li>\n<li><p>到这一步我们只是删除了本地 V1.2的版本,可是线上V1.2的版本还是存在,如何办?这时我们可以推送的空的同名版本到线下,达到删除线上版本的目标:</p>\n</li>\n<li><p>git push origin :refs/tags/V1.2</p>\n</li>\n<li><p>如何获取远程版本?</p>\n</li>\n<li>git fetch origin tag V1.2</li>\n<li>这样我们可以精准拉取指定的某一个版本.适用于运维同学部署指定版本.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"tag-和branch的区别\"><a href=\"#tag-和branch的区别\" class=\"headerlink\" title=\"tag 和branch的区别\"></a>tag 和branch的区别</h2><ul>\n<li>Git tag是一系列commit的中的一个点，只能查看，不能移动。</li>\n<li>branch是一系列串联的commit的线。</li>\n</ul>\n<h3 id=\"git-tag的用法\"><a href=\"#git-tag的用法\" class=\"headerlink\" title=\"git tag的用法\"></a>git tag的用法</h3><ul>\n<li>我们常常在代码封板时,使用git 创建一个tag ,这样一个不可修改的历史代码版本就像被我们封存起来一样,不论是运维发布拉取,或者以后的代码版本管理,都是十分方便的</li>\n</ul>\n<h3 id=\"git的tag功能\"><a href=\"#git的tag功能\" class=\"headerlink\" title=\"git的tag功能\"></a>git的tag功能</h3><ul>\n<li>git 下打标签其实有2种情况<br>轻量级的：它其实是一个独立的分支,或者说是一个不可变的分支.指向特定提交对象的引用</li>\n<li>带附注的：实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证,电子邮件地址和日期，一般我们都建议使用含附注型的标签，以便保留相关信息<br>所以我们推荐使用第二种标签形式</li>\n</ul>\n<h3 id=\"创建tag\"><a href=\"#创建tag\" class=\"headerlink\" title=\"创建tag\"></a>创建tag</h3><ul>\n<li>git tag -a V1.2 -m ‘release 1.2’</li>\n<li>上面的命令我们成功创建了本地一个版本 V1.2 ,并且添加了附注信息 ‘release 1.2’</li>\n</ul>\n<h2 id=\"查看tag\"><a href=\"#查看tag\" class=\"headerlink\" title=\"查看tag\"></a>查看tag</h2><ul>\n<li>git tag</li>\n<li>要显示附注信息,我们需要用 show 指令来查看</li>\n<li><p>git show V1.2</p>\n</li>\n<li><p>但是目前这个标签仅仅是提交到了本地git仓库.如何同步到远程代码库</p>\n</li>\n<li><p>git push origin –tags</p>\n</li>\n<li><p>如果刚刚同步上去,你缺发现一个致命bug ,需要重新打版本,现在还为时不晚.</p>\n</li>\n<li><p>git tag -d V1.2</p>\n</li>\n<li><p>到这一步我们只是删除了本地 V1.2的版本,可是线上V1.2的版本还是存在,如何办?这时我们可以推送的空的同名版本到线下,达到删除线上版本的目标:</p>\n</li>\n<li><p>git push origin :refs/tags/V1.2</p>\n</li>\n<li><p>如何获取远程版本?</p>\n</li>\n<li>git fetch origin tag V1.2</li>\n<li>这样我们可以精准拉取指定的某一个版本.适用于运维同学部署指定版本.</li>\n</ul>\n"},{"layout":"post","title":"ip地址和子网掩码，广播地址关系","date":"2019-02-14T06:00:00.000Z","_content":"\n## 什么是ip地址？\n\n* ip是在一个网段中的一台计算机的ip地址（192.168.1.2）\n* 如果你家的联通宽带给你家的公网ip地址是10.10.123.234(假设的)，那么接到你家路由器，首先路由器需要有一个ip地址，一般是192.168.1.1（也可能是192.168.0.1），这个应该可以登录到路由器中设置。\n* 其中192.168.1.255 就是广播地址，比如centos中ifconfig命令查看的broadcast\n* 剩余的ip段192.168.1.2~192.168.1.254 就是可以分配给手机，电脑等客户端使用的ip。一共是253（255-2）个。\n\n\n## ip由什么组成？\n\n* 例如一个ip 192.168.1.2，是一个C类网络，一般有254台主机。二进制表示就是 网络号标识|1100 0000 |1000 0000| 0000 0001|  + 主机号标识|0000 0010| \n* 点号分割每个数字都是8位二进制,网络号部分就是192.168.1,主机号部分就是2。\n* 网络标识部分越短，那么标识主机部分可用的范围越大，但是需要子网掩码配合决定由多少可用ip\n\n\n## 什么是子网掩码？\n\n* 子网掩码，顾名思义，遮掩的意思，子网掩码就是把ip地址分为网络部分和主机部分，主机部分用二进制位用1标识，主机号部分用0标识。C类子网掩码一般是255.255.255.0 \n* 如果所需的ip比较多，比如学校这种环境，子网掩码可以设置成255.255.0.0 ,那么ip返回就是255的2次方-2，就是65023个。那么ip网络部分就是192.168,后面两部分是主机号。\n\n\n* 网关是什么，比如两个A客户端192.168.1.2 和B客户端192.168.2.2 就是两个网络的设备，前提是他们的子网掩码都是255.255.255.0， 那么他们通信就需要A客户端发送给网关ip，有网关路由转发到B所在的网关，再转发到B客户端。 比如我的路由器ip是192.168.2.1， 我自己的ip是192.168.2.110， 默认网关也是192.168.2.1\n\n```shell\nnetstat -rn\n\nDestination     Gateway         Genmask         Flags   MSS Window  irtt Iface\n0.0.0.0         192.168.2.1     0.0.0.0         UG        0 0          0 ens33\n0.0.0.0表示发给任何人的包，都发给192.168.2.1这个网关， Genmask写0.0.0.0是默认路由的网络掩码。\n```\n\n\n\n\n","source":"_posts/linux/ip地址子网掩码的关系.md","raw":"---\nlayout: post\ntitle: ip地址和子网掩码，广播地址关系\ncategory: linux \ndate: 2019-02-14 14:00:00\n\n---\n\n## 什么是ip地址？\n\n* ip是在一个网段中的一台计算机的ip地址（192.168.1.2）\n* 如果你家的联通宽带给你家的公网ip地址是10.10.123.234(假设的)，那么接到你家路由器，首先路由器需要有一个ip地址，一般是192.168.1.1（也可能是192.168.0.1），这个应该可以登录到路由器中设置。\n* 其中192.168.1.255 就是广播地址，比如centos中ifconfig命令查看的broadcast\n* 剩余的ip段192.168.1.2~192.168.1.254 就是可以分配给手机，电脑等客户端使用的ip。一共是253（255-2）个。\n\n\n## ip由什么组成？\n\n* 例如一个ip 192.168.1.2，是一个C类网络，一般有254台主机。二进制表示就是 网络号标识|1100 0000 |1000 0000| 0000 0001|  + 主机号标识|0000 0010| \n* 点号分割每个数字都是8位二进制,网络号部分就是192.168.1,主机号部分就是2。\n* 网络标识部分越短，那么标识主机部分可用的范围越大，但是需要子网掩码配合决定由多少可用ip\n\n\n## 什么是子网掩码？\n\n* 子网掩码，顾名思义，遮掩的意思，子网掩码就是把ip地址分为网络部分和主机部分，主机部分用二进制位用1标识，主机号部分用0标识。C类子网掩码一般是255.255.255.0 \n* 如果所需的ip比较多，比如学校这种环境，子网掩码可以设置成255.255.0.0 ,那么ip返回就是255的2次方-2，就是65023个。那么ip网络部分就是192.168,后面两部分是主机号。\n\n\n* 网关是什么，比如两个A客户端192.168.1.2 和B客户端192.168.2.2 就是两个网络的设备，前提是他们的子网掩码都是255.255.255.0， 那么他们通信就需要A客户端发送给网关ip，有网关路由转发到B所在的网关，再转发到B客户端。 比如我的路由器ip是192.168.2.1， 我自己的ip是192.168.2.110， 默认网关也是192.168.2.1\n\n```shell\nnetstat -rn\n\nDestination     Gateway         Genmask         Flags   MSS Window  irtt Iface\n0.0.0.0         192.168.2.1     0.0.0.0         UG        0 0          0 ens33\n0.0.0.0表示发给任何人的包，都发给192.168.2.1这个网关， Genmask写0.0.0.0是默认路由的网络掩码。\n```\n\n\n\n\n","slug":"linux/ip地址子网掩码的关系","published":1,"updated":"2019-03-02T10:16:37.989Z","comments":1,"photos":[],"link":"","_id":"cjwxes5d1000uhdlizdg2hb3y","content":"<h2 id=\"什么是ip地址？\"><a href=\"#什么是ip地址？\" class=\"headerlink\" title=\"什么是ip地址？\"></a>什么是ip地址？</h2><ul>\n<li>ip是在一个网段中的一台计算机的ip地址（192.168.1.2）</li>\n<li>如果你家的联通宽带给你家的公网ip地址是10.10.123.234(假设的)，那么接到你家路由器，首先路由器需要有一个ip地址，一般是192.168.1.1（也可能是192.168.0.1），这个应该可以登录到路由器中设置。</li>\n<li>其中192.168.1.255 就是广播地址，比如centos中ifconfig命令查看的broadcast</li>\n<li>剩余的ip段192.168.1.2~192.168.1.254 就是可以分配给手机，电脑等客户端使用的ip。一共是253（255-2）个。</li>\n</ul>\n<h2 id=\"ip由什么组成？\"><a href=\"#ip由什么组成？\" class=\"headerlink\" title=\"ip由什么组成？\"></a>ip由什么组成？</h2><ul>\n<li>例如一个ip 192.168.1.2，是一个C类网络，一般有254台主机。二进制表示就是 网络号标识|1100 0000 |1000 0000| 0000 0001|  + 主机号标识|0000 0010| </li>\n<li>点号分割每个数字都是8位二进制,网络号部分就是192.168.1,主机号部分就是2。</li>\n<li>网络标识部分越短，那么标识主机部分可用的范围越大，但是需要子网掩码配合决定由多少可用ip</li>\n</ul>\n<h2 id=\"什么是子网掩码？\"><a href=\"#什么是子网掩码？\" class=\"headerlink\" title=\"什么是子网掩码？\"></a>什么是子网掩码？</h2><ul>\n<li>子网掩码，顾名思义，遮掩的意思，子网掩码就是把ip地址分为网络部分和主机部分，主机部分用二进制位用1标识，主机号部分用0标识。C类子网掩码一般是255.255.255.0 </li>\n<li>如果所需的ip比较多，比如学校这种环境，子网掩码可以设置成255.255.0.0 ,那么ip返回就是255的2次方-2，就是65023个。那么ip网络部分就是192.168,后面两部分是主机号。</li>\n</ul>\n<ul>\n<li>网关是什么，比如两个A客户端192.168.1.2 和B客户端192.168.2.2 就是两个网络的设备，前提是他们的子网掩码都是255.255.255.0， 那么他们通信就需要A客户端发送给网关ip，有网关路由转发到B所在的网关，再转发到B客户端。 比如我的路由器ip是192.168.2.1， 我自己的ip是192.168.2.110， 默认网关也是192.168.2.1</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -rn</span><br><span class=\"line\"></span><br><span class=\"line\">Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface</span><br><span class=\"line\">0.0.0.0         192.168.2.1     0.0.0.0         UG        0 0          0 ens33</span><br><span class=\"line\">0.0.0.0表示发给任何人的包，都发给192.168.2.1这个网关， Genmask写0.0.0.0是默认路由的网络掩码。</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是ip地址？\"><a href=\"#什么是ip地址？\" class=\"headerlink\" title=\"什么是ip地址？\"></a>什么是ip地址？</h2><ul>\n<li>ip是在一个网段中的一台计算机的ip地址（192.168.1.2）</li>\n<li>如果你家的联通宽带给你家的公网ip地址是10.10.123.234(假设的)，那么接到你家路由器，首先路由器需要有一个ip地址，一般是192.168.1.1（也可能是192.168.0.1），这个应该可以登录到路由器中设置。</li>\n<li>其中192.168.1.255 就是广播地址，比如centos中ifconfig命令查看的broadcast</li>\n<li>剩余的ip段192.168.1.2~192.168.1.254 就是可以分配给手机，电脑等客户端使用的ip。一共是253（255-2）个。</li>\n</ul>\n<h2 id=\"ip由什么组成？\"><a href=\"#ip由什么组成？\" class=\"headerlink\" title=\"ip由什么组成？\"></a>ip由什么组成？</h2><ul>\n<li>例如一个ip 192.168.1.2，是一个C类网络，一般有254台主机。二进制表示就是 网络号标识|1100 0000 |1000 0000| 0000 0001|  + 主机号标识|0000 0010| </li>\n<li>点号分割每个数字都是8位二进制,网络号部分就是192.168.1,主机号部分就是2。</li>\n<li>网络标识部分越短，那么标识主机部分可用的范围越大，但是需要子网掩码配合决定由多少可用ip</li>\n</ul>\n<h2 id=\"什么是子网掩码？\"><a href=\"#什么是子网掩码？\" class=\"headerlink\" title=\"什么是子网掩码？\"></a>什么是子网掩码？</h2><ul>\n<li>子网掩码，顾名思义，遮掩的意思，子网掩码就是把ip地址分为网络部分和主机部分，主机部分用二进制位用1标识，主机号部分用0标识。C类子网掩码一般是255.255.255.0 </li>\n<li>如果所需的ip比较多，比如学校这种环境，子网掩码可以设置成255.255.0.0 ,那么ip返回就是255的2次方-2，就是65023个。那么ip网络部分就是192.168,后面两部分是主机号。</li>\n</ul>\n<ul>\n<li>网关是什么，比如两个A客户端192.168.1.2 和B客户端192.168.2.2 就是两个网络的设备，前提是他们的子网掩码都是255.255.255.0， 那么他们通信就需要A客户端发送给网关ip，有网关路由转发到B所在的网关，再转发到B客户端。 比如我的路由器ip是192.168.2.1， 我自己的ip是192.168.2.110， 默认网关也是192.168.2.1</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -rn</span><br><span class=\"line\"></span><br><span class=\"line\">Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface</span><br><span class=\"line\">0.0.0.0         192.168.2.1     0.0.0.0         UG        0 0          0 ens33</span><br><span class=\"line\">0.0.0.0表示发给任何人的包，都发给192.168.2.1这个网关， Genmask写0.0.0.0是默认路由的网络掩码。</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"linux虚拟机配置静态ip","date":"2019-02-12T06:00:00.000Z","_content":"\n\n## 1. mac上的虚拟机使用（自动模式）就是桥接模式。\n\n![](images/vmnet.png)\n\n\n## 2. 查看自己的网卡名\n\n* ifconfig 命令\n```shell\n[root@localhost ~]# ifconfig\nens33: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 192.168.2.132  netmask 255.255.255.0  broadcast 192.168.2.255\n        inet6 fe80::315:b3ba:674b:3fdc  prefixlen 64  scopeid 0x20<link>\n        ether 00:0c:29:14:d2:38  txqueuelen 1000  (Ethernet)\n        RX packets 56630  bytes 20928797 (19.9 MiB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 24078  bytes 2636531 (2.5 MiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10<host>\n        loop  txqueuelen 1  (Local Loopback)\n        RX packets 2517  bytes 223561 (218.3 KiB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 2517  bytes 223561 (218.3 KiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n\n```\n\n* 我的网卡就是ens33,下面lo是本地回环地址，ip是127.0.0.1\n\n## 修改网卡配置文件\nvim /etc/sysconfig/network-scripts/ifcfg-ens33\n  \n```shell\n\n  1 TYPE=Ethernet\n  2 PROXY_METHOD=none\n  3 BROWSER_ONLY=no\n  4 #BOOTPROTO=dhcp\n  5 DEFROUTE=yes\n  6 IPV4_FAILURE_FATAL=no\n  7 IPV6INIT=yes\n  8 IPV6_AUTOCONF=yes\n  9 IPV6_DEFROUTE=yes\n 10 IPV6_FAILURE_FATAL=no\n 11 IPV6_ADDR_GEN_MODE=stable-privacy\n 12 NAME=ens33\n 13 UUID=5e4d74e0-4fd2-48b9-8856-a206acc5b6ea\n 14 DEVICE=ens33\n 15 #ONBOOT=yes\n 16 \n 17 # 下面是新增的部分，上面的BOOTPROTO和ONBOOT注释掉。\n 18 # static config\n 19 NM_CONTROLLED=no # use config file not network manager.\n 20 BOOTPROTO=static\n 21 ONBOOT=yes\n 22 IPADDR=192.168.2.132\n 23 NETMASK=255.255.255.0\n 24 GATEWAY=192.168.2.1\n 25 \n\n``` \n\n## 设置DNS\n\nvim /etc/sysconfig/network\n```shell\n\t# 这个文件主要是设置HOSTNAME,设置是否启动网络，需要reboot，如果修改网关，重启service就行了\n\t写入：\n\tDNS1=8.8.8.8\n\tDNS2=114.114.114.114\n\tGATEWAY=192.168.2.1 # 一般是路由器的ip，我家两个路由器，一个是192.168.1.1，一个是192.168.2.1。\n\t\n\t\n```\n\n## 重启服务\n\n```shell\nservice network restart\n```\n","source":"_posts/linux/linux虚拟机配置静态ip.md","raw":"---\nlayout: post\ntitle: linux虚拟机配置静态ip\ncategory: linux \ndate: 2019-02-12 14:00:00\n\n---\n\n\n## 1. mac上的虚拟机使用（自动模式）就是桥接模式。\n\n![](images/vmnet.png)\n\n\n## 2. 查看自己的网卡名\n\n* ifconfig 命令\n```shell\n[root@localhost ~]# ifconfig\nens33: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 192.168.2.132  netmask 255.255.255.0  broadcast 192.168.2.255\n        inet6 fe80::315:b3ba:674b:3fdc  prefixlen 64  scopeid 0x20<link>\n        ether 00:0c:29:14:d2:38  txqueuelen 1000  (Ethernet)\n        RX packets 56630  bytes 20928797 (19.9 MiB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 24078  bytes 2636531 (2.5 MiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10<host>\n        loop  txqueuelen 1  (Local Loopback)\n        RX packets 2517  bytes 223561 (218.3 KiB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 2517  bytes 223561 (218.3 KiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n\n```\n\n* 我的网卡就是ens33,下面lo是本地回环地址，ip是127.0.0.1\n\n## 修改网卡配置文件\nvim /etc/sysconfig/network-scripts/ifcfg-ens33\n  \n```shell\n\n  1 TYPE=Ethernet\n  2 PROXY_METHOD=none\n  3 BROWSER_ONLY=no\n  4 #BOOTPROTO=dhcp\n  5 DEFROUTE=yes\n  6 IPV4_FAILURE_FATAL=no\n  7 IPV6INIT=yes\n  8 IPV6_AUTOCONF=yes\n  9 IPV6_DEFROUTE=yes\n 10 IPV6_FAILURE_FATAL=no\n 11 IPV6_ADDR_GEN_MODE=stable-privacy\n 12 NAME=ens33\n 13 UUID=5e4d74e0-4fd2-48b9-8856-a206acc5b6ea\n 14 DEVICE=ens33\n 15 #ONBOOT=yes\n 16 \n 17 # 下面是新增的部分，上面的BOOTPROTO和ONBOOT注释掉。\n 18 # static config\n 19 NM_CONTROLLED=no # use config file not network manager.\n 20 BOOTPROTO=static\n 21 ONBOOT=yes\n 22 IPADDR=192.168.2.132\n 23 NETMASK=255.255.255.0\n 24 GATEWAY=192.168.2.1\n 25 \n\n``` \n\n## 设置DNS\n\nvim /etc/sysconfig/network\n```shell\n\t# 这个文件主要是设置HOSTNAME,设置是否启动网络，需要reboot，如果修改网关，重启service就行了\n\t写入：\n\tDNS1=8.8.8.8\n\tDNS2=114.114.114.114\n\tGATEWAY=192.168.2.1 # 一般是路由器的ip，我家两个路由器，一个是192.168.1.1，一个是192.168.2.1。\n\t\n\t\n```\n\n## 重启服务\n\n```shell\nservice network restart\n```\n","slug":"linux/linux虚拟机配置静态ip","published":1,"updated":"2019-03-02T10:16:37.986Z","comments":1,"photos":[],"link":"","_id":"cjwxes5d3000xhdli1difgr5b","content":"<h2 id=\"1-mac上的虚拟机使用（自动模式）就是桥接模式。\"><a href=\"#1-mac上的虚拟机使用（自动模式）就是桥接模式。\" class=\"headerlink\" title=\"1. mac上的虚拟机使用（自动模式）就是桥接模式。\"></a>1. mac上的虚拟机使用（自动模式）就是桥接模式。</h2><p><img src=\"/2019/02/12/linux/linux虚拟机配置静态ip/images/vmnet.png\" alt=\"\"></p>\n<h2 id=\"2-查看自己的网卡名\"><a href=\"#2-查看自己的网卡名\" class=\"headerlink\" title=\"2. 查看自己的网卡名\"></a>2. 查看自己的网卡名</h2><ul>\n<li><p>ifconfig 命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# ifconfig</span><br><span class=\"line\">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 192.168.2.132  netmask 255.255.255.0  broadcast 192.168.2.255</span><br><span class=\"line\">        inet6 fe80::315:b3ba:674b:3fdc  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class=\"line\">        ether 00:0c:29:14:d2:38  txqueuelen 1000  (Ethernet)</span><br><span class=\"line\">        RX packets 56630  bytes 20928797 (19.9 MiB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 24078  bytes 2636531 (2.5 MiB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\"></span><br><span class=\"line\">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class=\"line\">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class=\"line\">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class=\"line\">        loop  txqueuelen 1  (Local Loopback)</span><br><span class=\"line\">        RX packets 2517  bytes 223561 (218.3 KiB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 2517  bytes 223561 (218.3 KiB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>我的网卡就是ens33,下面lo是本地回环地址，ip是127.0.0.1</p>\n</li>\n</ul>\n<h2 id=\"修改网卡配置文件\"><a href=\"#修改网卡配置文件\" class=\"headerlink\" title=\"修改网卡配置文件\"></a>修改网卡配置文件</h2><p>vim /etc/sysconfig/network-scripts/ifcfg-ens33</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  1 TYPE=Ethernet</span><br><span class=\"line\">  2 PROXY_METHOD=none</span><br><span class=\"line\">  3 BROWSER_ONLY=no</span><br><span class=\"line\">  4 #BOOTPROTO=dhcp</span><br><span class=\"line\">  5 DEFROUTE=yes</span><br><span class=\"line\">  6 IPV4_FAILURE_FATAL=no</span><br><span class=\"line\">  7 IPV6INIT=yes</span><br><span class=\"line\">  8 IPV6_AUTOCONF=yes</span><br><span class=\"line\">  9 IPV6_DEFROUTE=yes</span><br><span class=\"line\"> 10 IPV6_FAILURE_FATAL=no</span><br><span class=\"line\"> 11 IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class=\"line\"> 12 NAME=ens33</span><br><span class=\"line\"> 13 UUID=5e4d74e0-4fd2-48b9-8856-a206acc5b6ea</span><br><span class=\"line\"> 14 DEVICE=ens33</span><br><span class=\"line\"> 15 #ONBOOT=yes</span><br><span class=\"line\"> 16 </span><br><span class=\"line\"> 17 # 下面是新增的部分，上面的BOOTPROTO和ONBOOT注释掉。</span><br><span class=\"line\"> 18 # static config</span><br><span class=\"line\"> 19 NM_CONTROLLED=no # use config file not network manager.</span><br><span class=\"line\"> 20 BOOTPROTO=static</span><br><span class=\"line\"> 21 ONBOOT=yes</span><br><span class=\"line\"> 22 IPADDR=192.168.2.132</span><br><span class=\"line\"> 23 NETMASK=255.255.255.0</span><br><span class=\"line\"> 24 GATEWAY=192.168.2.1</span><br><span class=\"line\"> 25 </span><br><span class=\"line\"></span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span># 设置DNS</span><br><span class=\"line\"></span><br><span class=\"line\">vim /etc/sysconfig/network</span><br><span class=\"line\">```shell</span><br><span class=\"line\"><span class=\"meta\">\t#</span> 这个文件主要是设置HOSTNAME,设置是否启动网络，需要reboot，如果修改网关，重启service就行了</span><br><span class=\"line\">\t写入：</span><br><span class=\"line\">\tDNS1=8.8.8.8</span><br><span class=\"line\">\tDNS2=114.114.114.114</span><br><span class=\"line\">\tGATEWAY=192.168.2.1 # 一般是路由器的ip，我家两个路由器，一个是192.168.1.1，一个是192.168.2.1。</span><br></pre></td></tr></table></figure>\n<h2 id=\"重启服务\"><a href=\"#重启服务\" class=\"headerlink\" title=\"重启服务\"></a>重启服务</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service network restart</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-mac上的虚拟机使用（自动模式）就是桥接模式。\"><a href=\"#1-mac上的虚拟机使用（自动模式）就是桥接模式。\" class=\"headerlink\" title=\"1. mac上的虚拟机使用（自动模式）就是桥接模式。\"></a>1. mac上的虚拟机使用（自动模式）就是桥接模式。</h2><p><img src=\"/2019/02/12/linux/linux虚拟机配置静态ip/images/vmnet.png\" alt=\"\"></p>\n<h2 id=\"2-查看自己的网卡名\"><a href=\"#2-查看自己的网卡名\" class=\"headerlink\" title=\"2. 查看自己的网卡名\"></a>2. 查看自己的网卡名</h2><ul>\n<li><p>ifconfig 命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# ifconfig</span><br><span class=\"line\">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 192.168.2.132  netmask 255.255.255.0  broadcast 192.168.2.255</span><br><span class=\"line\">        inet6 fe80::315:b3ba:674b:3fdc  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class=\"line\">        ether 00:0c:29:14:d2:38  txqueuelen 1000  (Ethernet)</span><br><span class=\"line\">        RX packets 56630  bytes 20928797 (19.9 MiB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 24078  bytes 2636531 (2.5 MiB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\"></span><br><span class=\"line\">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class=\"line\">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class=\"line\">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class=\"line\">        loop  txqueuelen 1  (Local Loopback)</span><br><span class=\"line\">        RX packets 2517  bytes 223561 (218.3 KiB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 2517  bytes 223561 (218.3 KiB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>我的网卡就是ens33,下面lo是本地回环地址，ip是127.0.0.1</p>\n</li>\n</ul>\n<h2 id=\"修改网卡配置文件\"><a href=\"#修改网卡配置文件\" class=\"headerlink\" title=\"修改网卡配置文件\"></a>修改网卡配置文件</h2><p>vim /etc/sysconfig/network-scripts/ifcfg-ens33</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  1 TYPE=Ethernet</span><br><span class=\"line\">  2 PROXY_METHOD=none</span><br><span class=\"line\">  3 BROWSER_ONLY=no</span><br><span class=\"line\">  4 #BOOTPROTO=dhcp</span><br><span class=\"line\">  5 DEFROUTE=yes</span><br><span class=\"line\">  6 IPV4_FAILURE_FATAL=no</span><br><span class=\"line\">  7 IPV6INIT=yes</span><br><span class=\"line\">  8 IPV6_AUTOCONF=yes</span><br><span class=\"line\">  9 IPV6_DEFROUTE=yes</span><br><span class=\"line\"> 10 IPV6_FAILURE_FATAL=no</span><br><span class=\"line\"> 11 IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class=\"line\"> 12 NAME=ens33</span><br><span class=\"line\"> 13 UUID=5e4d74e0-4fd2-48b9-8856-a206acc5b6ea</span><br><span class=\"line\"> 14 DEVICE=ens33</span><br><span class=\"line\"> 15 #ONBOOT=yes</span><br><span class=\"line\"> 16 </span><br><span class=\"line\"> 17 # 下面是新增的部分，上面的BOOTPROTO和ONBOOT注释掉。</span><br><span class=\"line\"> 18 # static config</span><br><span class=\"line\"> 19 NM_CONTROLLED=no # use config file not network manager.</span><br><span class=\"line\"> 20 BOOTPROTO=static</span><br><span class=\"line\"> 21 ONBOOT=yes</span><br><span class=\"line\"> 22 IPADDR=192.168.2.132</span><br><span class=\"line\"> 23 NETMASK=255.255.255.0</span><br><span class=\"line\"> 24 GATEWAY=192.168.2.1</span><br><span class=\"line\"> 25 </span><br><span class=\"line\"></span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span># 设置DNS</span><br><span class=\"line\"></span><br><span class=\"line\">vim /etc/sysconfig/network</span><br><span class=\"line\">```shell</span><br><span class=\"line\"><span class=\"meta\">\t#</span> 这个文件主要是设置HOSTNAME,设置是否启动网络，需要reboot，如果修改网关，重启service就行了</span><br><span class=\"line\">\t写入：</span><br><span class=\"line\">\tDNS1=8.8.8.8</span><br><span class=\"line\">\tDNS2=114.114.114.114</span><br><span class=\"line\">\tGATEWAY=192.168.2.1 # 一般是路由器的ip，我家两个路由器，一个是192.168.1.1，一个是192.168.2.1。</span><br></pre></td></tr></table></figure>\n<h2 id=\"重启服务\"><a href=\"#重启服务\" class=\"headerlink\" title=\"重启服务\"></a>重启服务</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service network restart</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"linux常用函数手册","date":"2016-10-05T12:06:30.000Z","_content":"\n# linux \n\n[linux常用函数手册](http://net.pku.edu.cn/~yhf/linux_c/)\n","source":"_posts/linux/linux_c_help.md","raw":"---\nlayout: post\ntitle: linux常用函数手册\ndate: 2016-10-5 20:06:30\ncategory: linux\n\n---\n\n# linux \n\n[linux常用函数手册](http://net.pku.edu.cn/~yhf/linux_c/)\n","slug":"linux/linux_c_help","published":1,"updated":"2019-03-02T10:16:37.986Z","comments":1,"photos":[],"link":"","_id":"cjwxes5d40011hdlihnleanpa","content":"<h1 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h1><p><a href=\"http://net.pku.edu.cn/~yhf/linux_c/\" target=\"_blank\" rel=\"noopener\">linux常用函数手册</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h1><p><a href=\"http://net.pku.edu.cn/~yhf/linux_c/\" target=\"_blank\" rel=\"noopener\">linux常用函数手册</a></p>\n"},{"layout":"post","title":"nginx  support  php","date":"2016-12-10T03:30:55.000Z","comments":1,"_content":"\n#  ubuntu14.04 +nginx+php5-fpm\n\n## 一，安装Nginx\n\n　　apt-get install nginx\n\n　　1，配置nginx\n\n　　　　nginx所有的配置在 /etc/nginx/nginx.conf中\n\n　　　　nginx.conf配置里面包括了\n\n　　　　　　include /etc/nginx/conf.d/*.conf;\n        　　　include /etc/nginx/sites-enabled/*;\n        这两个配置，所以这里面的配置也是有效的。\n       错误日志 error_log /var/log/nginx/error.log;\n \n　　这里我们把配置写在 /etc/nginx/sites-available/default中\n　　修改  root /usr/share/nginx/html;   这是网页的根目录，默认里面有一个index.html页面\n     index  index.html index.htm修改成index index.php index.html index.htm;\n     增加  \n       \n　　location ~ \\.php$ {\n              　　  try_files $uri =404;\n              　　  fastcgi_pass 127.0.0.1:9000;\n              　　  fastcgi_index index.php;\n              　　  include fastcgi_params;\n      　　  }\n \n　　2，保存文件，使配置生效 /etc/init.d/nginx reload\n \n　　3，启动nginx\n　　　　/etc/init.d/nginx start\n \n　　4，在 /usr/share/nginx/html下新建index.php\n　　　　<? php\n　　　　phpinfo();\n　　　　?>\n\n## 二 安装php\n\nsudo apt-get install php5-fpm\n\nsudo apt-get install php5-gd  # Popular image manipulation library; used extensively by Wordpress and it's plugins.\nsudo apt-get install php5-cli   # Makes the php5 command available to the terminal for php5 scripting\nsudo apt-get install php5-curl    # Allows curl (file downloading tool) to be called from PHP5\nsudo apt-get install php5-mcrypt   # Provides encryption algorithms to PHP scripts\nsudo apt-get install php5-mysql   # Allows PHP5 scripts to talk to a MySQL Database\nsudo apt-get install php5-readline  # Allows PHP5 scripts to use the readline function\n\n查看php5运行进程\n\nps -waux | grep php5\n\n打开关闭php5进程\n\nsudo service php5-fpm stop\nsudo service php5-fpm start\nsudo service php5-fpm restart\nsudo service php5-fpm status\n\n配置php5监听端口  /etc/php5/fpm/pool.d/www.conf\n\n把\n\nlisten = /var/run/php5-fpm.sock  改为\n\nlisten = 127.0.0.1:9000\n\n重新运行php进程\n","source":"_posts/linux/nginx_config.md","raw":"---\nlayout: post\ntitle: nginx  support  php\ncategory: linux\ndate: 2016-12-10 11:30:55\ncomments: true\n\n---\n\n#  ubuntu14.04 +nginx+php5-fpm\n\n## 一，安装Nginx\n\n　　apt-get install nginx\n\n　　1，配置nginx\n\n　　　　nginx所有的配置在 /etc/nginx/nginx.conf中\n\n　　　　nginx.conf配置里面包括了\n\n　　　　　　include /etc/nginx/conf.d/*.conf;\n        　　　include /etc/nginx/sites-enabled/*;\n        这两个配置，所以这里面的配置也是有效的。\n       错误日志 error_log /var/log/nginx/error.log;\n \n　　这里我们把配置写在 /etc/nginx/sites-available/default中\n　　修改  root /usr/share/nginx/html;   这是网页的根目录，默认里面有一个index.html页面\n     index  index.html index.htm修改成index index.php index.html index.htm;\n     增加  \n       \n　　location ~ \\.php$ {\n              　　  try_files $uri =404;\n              　　  fastcgi_pass 127.0.0.1:9000;\n              　　  fastcgi_index index.php;\n              　　  include fastcgi_params;\n      　　  }\n \n　　2，保存文件，使配置生效 /etc/init.d/nginx reload\n \n　　3，启动nginx\n　　　　/etc/init.d/nginx start\n \n　　4，在 /usr/share/nginx/html下新建index.php\n　　　　<? php\n　　　　phpinfo();\n　　　　?>\n\n## 二 安装php\n\nsudo apt-get install php5-fpm\n\nsudo apt-get install php5-gd  # Popular image manipulation library; used extensively by Wordpress and it's plugins.\nsudo apt-get install php5-cli   # Makes the php5 command available to the terminal for php5 scripting\nsudo apt-get install php5-curl    # Allows curl (file downloading tool) to be called from PHP5\nsudo apt-get install php5-mcrypt   # Provides encryption algorithms to PHP scripts\nsudo apt-get install php5-mysql   # Allows PHP5 scripts to talk to a MySQL Database\nsudo apt-get install php5-readline  # Allows PHP5 scripts to use the readline function\n\n查看php5运行进程\n\nps -waux | grep php5\n\n打开关闭php5进程\n\nsudo service php5-fpm stop\nsudo service php5-fpm start\nsudo service php5-fpm restart\nsudo service php5-fpm status\n\n配置php5监听端口  /etc/php5/fpm/pool.d/www.conf\n\n把\n\nlisten = /var/run/php5-fpm.sock  改为\n\nlisten = 127.0.0.1:9000\n\n重新运行php进程\n","slug":"linux/nginx_config","published":1,"updated":"2019-03-02T10:16:37.988Z","photos":[],"link":"","_id":"cjwxes5d50014hdli1fwelcf9","content":"<h1 id=\"ubuntu14-04-nginx-php5-fpm\"><a href=\"#ubuntu14-04-nginx-php5-fpm\" class=\"headerlink\" title=\"ubuntu14.04 +nginx+php5-fpm\"></a>ubuntu14.04 +nginx+php5-fpm</h1><h2 id=\"一，安装Nginx\"><a href=\"#一，安装Nginx\" class=\"headerlink\" title=\"一，安装Nginx\"></a>一，安装Nginx</h2><p>　　apt-get install nginx</p>\n<p>　　1，配置nginx</p>\n<p>　　　　nginx所有的配置在 /etc/nginx/nginx.conf中</p>\n<p>　　　　nginx.conf配置里面包括了</p>\n<p>　　　　　　include /etc/nginx/conf.d/<em>.conf;<br>        　　　include /etc/nginx/sites-enabled/</em>;<br>        这两个配置，所以这里面的配置也是有效的。<br>       错误日志 error_log /var/log/nginx/error.log;</p>\n<p>　　这里我们把配置写在 /etc/nginx/sites-available/default中<br>　　修改  root /usr/share/nginx/html;   这是网页的根目录，默认里面有一个index.html页面<br>     index  index.html index.htm修改成index index.php index.html index.htm;<br>     增加  </p>\n<p>　　location ~ .php$ {<br>              　　  try_files $uri =404;<br>              　　  fastcgi_pass 127.0.0.1:9000;<br>              　　  fastcgi_index index.php;<br>              　　  include fastcgi_params;<br>      　　  }</p>\n<p>　　2，保存文件，使配置生效 /etc/init.d/nginx reload</p>\n<p>　　3，启动nginx<br>　　　　/etc/init.d/nginx start</p>\n<p>　　4，在 /usr/share/nginx/html下新建index.php<br>　　　　&lt;? php<br>　　　　phpinfo();<br>　　　　?&gt;</p>\n<h2 id=\"二-安装php\"><a href=\"#二-安装php\" class=\"headerlink\" title=\"二 安装php\"></a>二 安装php</h2><p>sudo apt-get install php5-fpm</p>\n<p>sudo apt-get install php5-gd  # Popular image manipulation library; used extensively by Wordpress and it’s plugins.<br>sudo apt-get install php5-cli   # Makes the php5 command available to the terminal for php5 scripting<br>sudo apt-get install php5-curl    # Allows curl (file downloading tool) to be called from PHP5<br>sudo apt-get install php5-mcrypt   # Provides encryption algorithms to PHP scripts<br>sudo apt-get install php5-mysql   # Allows PHP5 scripts to talk to a MySQL Database<br>sudo apt-get install php5-readline  # Allows PHP5 scripts to use the readline function</p>\n<p>查看php5运行进程</p>\n<p>ps -waux | grep php5</p>\n<p>打开关闭php5进程</p>\n<p>sudo service php5-fpm stop<br>sudo service php5-fpm start<br>sudo service php5-fpm restart<br>sudo service php5-fpm status</p>\n<p>配置php5监听端口  /etc/php5/fpm/pool.d/<a href=\"http://www.conf\" target=\"_blank\" rel=\"noopener\">www.conf</a></p>\n<p>把</p>\n<p>listen = /var/run/php5-fpm.sock  改为</p>\n<p>listen = 127.0.0.1:9000</p>\n<p>重新运行php进程</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ubuntu14-04-nginx-php5-fpm\"><a href=\"#ubuntu14-04-nginx-php5-fpm\" class=\"headerlink\" title=\"ubuntu14.04 +nginx+php5-fpm\"></a>ubuntu14.04 +nginx+php5-fpm</h1><h2 id=\"一，安装Nginx\"><a href=\"#一，安装Nginx\" class=\"headerlink\" title=\"一，安装Nginx\"></a>一，安装Nginx</h2><p>　　apt-get install nginx</p>\n<p>　　1，配置nginx</p>\n<p>　　　　nginx所有的配置在 /etc/nginx/nginx.conf中</p>\n<p>　　　　nginx.conf配置里面包括了</p>\n<p>　　　　　　include /etc/nginx/conf.d/<em>.conf;<br>        　　　include /etc/nginx/sites-enabled/</em>;<br>        这两个配置，所以这里面的配置也是有效的。<br>       错误日志 error_log /var/log/nginx/error.log;</p>\n<p>　　这里我们把配置写在 /etc/nginx/sites-available/default中<br>　　修改  root /usr/share/nginx/html;   这是网页的根目录，默认里面有一个index.html页面<br>     index  index.html index.htm修改成index index.php index.html index.htm;<br>     增加  </p>\n<p>　　location ~ .php$ {<br>              　　  try_files $uri =404;<br>              　　  fastcgi_pass 127.0.0.1:9000;<br>              　　  fastcgi_index index.php;<br>              　　  include fastcgi_params;<br>      　　  }</p>\n<p>　　2，保存文件，使配置生效 /etc/init.d/nginx reload</p>\n<p>　　3，启动nginx<br>　　　　/etc/init.d/nginx start</p>\n<p>　　4，在 /usr/share/nginx/html下新建index.php<br>　　　　&lt;? php<br>　　　　phpinfo();<br>　　　　?&gt;</p>\n<h2 id=\"二-安装php\"><a href=\"#二-安装php\" class=\"headerlink\" title=\"二 安装php\"></a>二 安装php</h2><p>sudo apt-get install php5-fpm</p>\n<p>sudo apt-get install php5-gd  # Popular image manipulation library; used extensively by Wordpress and it’s plugins.<br>sudo apt-get install php5-cli   # Makes the php5 command available to the terminal for php5 scripting<br>sudo apt-get install php5-curl    # Allows curl (file downloading tool) to be called from PHP5<br>sudo apt-get install php5-mcrypt   # Provides encryption algorithms to PHP scripts<br>sudo apt-get install php5-mysql   # Allows PHP5 scripts to talk to a MySQL Database<br>sudo apt-get install php5-readline  # Allows PHP5 scripts to use the readline function</p>\n<p>查看php5运行进程</p>\n<p>ps -waux | grep php5</p>\n<p>打开关闭php5进程</p>\n<p>sudo service php5-fpm stop<br>sudo service php5-fpm start<br>sudo service php5-fpm restart<br>sudo service php5-fpm status</p>\n<p>配置php5监听端口  /etc/php5/fpm/pool.d/<a href=\"http://www.conf\" target=\"_blank\" rel=\"noopener\">www.conf</a></p>\n<p>把</p>\n<p>listen = /var/run/php5-fpm.sock  改为</p>\n<p>listen = 127.0.0.1:9000</p>\n<p>重新运行php进程</p>\n"},{"layout":"post","title":"非对称加密(公钥加密)","date":"2016-07-21T06:35:58.000Z","comments":1,"_content":"\n\n<h1><center>公钥加密的工作原理</center></h1>\n## 对称加密：\n\n```c\n* 加密密钥和解密密钥是一样的。\n```\n<br>\n\n## 非对称加密：\n\n```c\n*\t(也叫公钥加密)\n* 两个密钥在加密和解密中配合使用，密钥对具有特殊的互补关系，密钥对在数学上存在特殊关系。\n```\n<br>\n\n## 邮件的电子签名过程：\n\n\n![](http://technet.microsoft.com/zh-cn/library/Aa998077.35451fb8-5e11-4d67-ba6e-e5d4da6febca%28zh-cn,TechNet.10%29.gif)\n\n```c\n* 捕获邮件正文-->计算邮件哈希值-->检索发件人私钥-->用发件人私钥加密哈希值-->附加到邮件底部(明文签名)/与原始邮件组合成二进制附件(不透明签名)-->发送mail\n* --私钥只有发件人才唯一拥有，公钥仅仅与一个私钥关联，所以可以用公钥唯一识别一个私钥。\n```\n<br>\n\n### 验证邮件签名的过程：\n\n\n![](http://technet.microsoft.com/zh-cn/library/Aa998077.d1b14a27-5cfb-4df2-89f7-990219378716%28zh-cn,TechNet.10%29.gif)\n```c\n* 接收邮件-->检索加密的哈希值-->检索邮件正文-->用正文计算邮件哈希值-->检索发件人的公钥-->用发件人公钥解密签名(加密的哈希值)-->和计算的哈希值对比-->验证签名邮件\n* --文件内容不变，计算的哈希值就不会变。\n* --私钥加密的东西，需要对应的公钥解密。\n* --如果哈希值一致，说明公钥对应的私钥是对的，私钥只有发件人知道，所以确定发件人属实。\n\n```\n\n<br>\n\n## 邮件内容的加密\n\n\n```c\n* 对称密钥加密的话，需要\"密钥协商\"，必须协商出一个双方都知道的密钥。\n* 非对称密钥加密的话，没有协商过程，因为一个公钥，可以很多人拥有，私钥是只有一个人有。\n* 由于非对称(公钥加密)密钥加密使用密钥对，加密和解密是一个昂贵的计算过程，速度慢。所以这么做呗......\n```\n<br>\n\n### send加密mail内容\n\n\n![](http://technet.microsoft.com/zh-cn/library/Aa998077.21058391-2d70-42f9-bf25-8ead79705b27%28zh-cn,TechNet.10%29.gif)\n```c\n* -- 1.找到邮件正文-->2.检索收件人公钥-->3.生成一次性的会话密钥(这个是对称密钥)-->4.用会话密钥加密正文-->5.用收件人公钥加密会话密钥，并附到邮件-->6.发送邮件\n```\n<br>\n\n### recv解密mail内容\n\n![](http://technet.microsoft.com/zh-cn/library/Aa998077.50f0afca-e520-46b5-8e12-6e295dfe86d9%28zh-cn,TechNet.10%29.gif)\n```c\n* -- 1.接收邮件-->2.检索加密邮件正文和会话密钥->3.检索收件人私钥解密会话密钥->4.用解密的会话密钥解密正文->5.解密邮件返回给收件人\n\n```\n<br>\n\n### 同时使用签名和邮件内容加密\n\n![tu](http://technet.microsoft.com/zh-cn/library/Aa998077.e81cca9b-c780-49d9-a3f9-69cc3c442183%28zh-cn,TechNet.10%29.gif)\n\n<br>\n\n### 同时使用签名和邮件内容加密后的解密\n\n\n![](http://technet.microsoft.com/zh-cn/library/Aa998077.97705e57-0a94-4197-99c3-40bb58a9eaa0%28zh-cn,TechNet.10%29.gif)\n<br>\n\n### 功能和所需的密钥表\n\n![](http://technet.microsoft.com/zh-cn/library/Aa998077.ef4e76b6-4799-45a9-90f8-ec7af508152a%28zh-cn,TechNet.10%29.gif)\n","source":"_posts/linux/public_key_encryption.md","raw":"---\nlayout: post\ntitle: 非对称加密(公钥加密)\ncategory: windows\ntags: encrypt\ndate: 2016-07-21 14:35:58\ncomments: true\n\n---\n\n\n<h1><center>公钥加密的工作原理</center></h1>\n## 对称加密：\n\n```c\n* 加密密钥和解密密钥是一样的。\n```\n<br>\n\n## 非对称加密：\n\n```c\n*\t(也叫公钥加密)\n* 两个密钥在加密和解密中配合使用，密钥对具有特殊的互补关系，密钥对在数学上存在特殊关系。\n```\n<br>\n\n## 邮件的电子签名过程：\n\n\n![](http://technet.microsoft.com/zh-cn/library/Aa998077.35451fb8-5e11-4d67-ba6e-e5d4da6febca%28zh-cn,TechNet.10%29.gif)\n\n```c\n* 捕获邮件正文-->计算邮件哈希值-->检索发件人私钥-->用发件人私钥加密哈希值-->附加到邮件底部(明文签名)/与原始邮件组合成二进制附件(不透明签名)-->发送mail\n* --私钥只有发件人才唯一拥有，公钥仅仅与一个私钥关联，所以可以用公钥唯一识别一个私钥。\n```\n<br>\n\n### 验证邮件签名的过程：\n\n\n![](http://technet.microsoft.com/zh-cn/library/Aa998077.d1b14a27-5cfb-4df2-89f7-990219378716%28zh-cn,TechNet.10%29.gif)\n```c\n* 接收邮件-->检索加密的哈希值-->检索邮件正文-->用正文计算邮件哈希值-->检索发件人的公钥-->用发件人公钥解密签名(加密的哈希值)-->和计算的哈希值对比-->验证签名邮件\n* --文件内容不变，计算的哈希值就不会变。\n* --私钥加密的东西，需要对应的公钥解密。\n* --如果哈希值一致，说明公钥对应的私钥是对的，私钥只有发件人知道，所以确定发件人属实。\n\n```\n\n<br>\n\n## 邮件内容的加密\n\n\n```c\n* 对称密钥加密的话，需要\"密钥协商\"，必须协商出一个双方都知道的密钥。\n* 非对称密钥加密的话，没有协商过程，因为一个公钥，可以很多人拥有，私钥是只有一个人有。\n* 由于非对称(公钥加密)密钥加密使用密钥对，加密和解密是一个昂贵的计算过程，速度慢。所以这么做呗......\n```\n<br>\n\n### send加密mail内容\n\n\n![](http://technet.microsoft.com/zh-cn/library/Aa998077.21058391-2d70-42f9-bf25-8ead79705b27%28zh-cn,TechNet.10%29.gif)\n```c\n* -- 1.找到邮件正文-->2.检索收件人公钥-->3.生成一次性的会话密钥(这个是对称密钥)-->4.用会话密钥加密正文-->5.用收件人公钥加密会话密钥，并附到邮件-->6.发送邮件\n```\n<br>\n\n### recv解密mail内容\n\n![](http://technet.microsoft.com/zh-cn/library/Aa998077.50f0afca-e520-46b5-8e12-6e295dfe86d9%28zh-cn,TechNet.10%29.gif)\n```c\n* -- 1.接收邮件-->2.检索加密邮件正文和会话密钥->3.检索收件人私钥解密会话密钥->4.用解密的会话密钥解密正文->5.解密邮件返回给收件人\n\n```\n<br>\n\n### 同时使用签名和邮件内容加密\n\n![tu](http://technet.microsoft.com/zh-cn/library/Aa998077.e81cca9b-c780-49d9-a3f9-69cc3c442183%28zh-cn,TechNet.10%29.gif)\n\n<br>\n\n### 同时使用签名和邮件内容加密后的解密\n\n\n![](http://technet.microsoft.com/zh-cn/library/Aa998077.97705e57-0a94-4197-99c3-40bb58a9eaa0%28zh-cn,TechNet.10%29.gif)\n<br>\n\n### 功能和所需的密钥表\n\n![](http://technet.microsoft.com/zh-cn/library/Aa998077.ef4e76b6-4799-45a9-90f8-ec7af508152a%28zh-cn,TechNet.10%29.gif)\n","slug":"linux/public_key_encryption","published":1,"updated":"2019-05-19T14:30:17.033Z","photos":[],"link":"","_id":"cjwxes5d60017hdliyam5r4hz","content":"<p></p><h1><center>公钥加密的工作原理</center></h1><p></p>\n<h2 id=\"对称加密：\"><a href=\"#对称加密：\" class=\"headerlink\" title=\"对称加密：\"></a>对称加密：</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 加密密钥和解密密钥是一样的。</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h2 id=\"非对称加密：\"><a href=\"#非对称加密：\" class=\"headerlink\" title=\"非对称加密：\"></a>非对称加密：</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*\t(也叫公钥加密)</span><br><span class=\"line\">* 两个密钥在加密和解密中配合使用，密钥对具有特殊的互补关系，密钥对在数学上存在特殊关系。</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h2 id=\"邮件的电子签名过程：\"><a href=\"#邮件的电子签名过程：\" class=\"headerlink\" title=\"邮件的电子签名过程：\"></a>邮件的电子签名过程：</h2><p><img src=\"http://technet.microsoft.com/zh-cn/library/Aa998077.35451fb8-5e11-4d67-ba6e-e5d4da6febca%28zh-cn,TechNet.10%29.gif\" alt=\"\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 捕获邮件正文--&gt;计算邮件哈希值--&gt;检索发件人私钥--&gt;用发件人私钥加密哈希值--&gt;附加到邮件底部(明文签名)/与原始邮件组合成二进制附件(不透明签名)--&gt;发送mail</span><br><span class=\"line\">* --私钥只有发件人才唯一拥有，公钥仅仅与一个私钥关联，所以可以用公钥唯一识别一个私钥。</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"验证邮件签名的过程：\"><a href=\"#验证邮件签名的过程：\" class=\"headerlink\" title=\"验证邮件签名的过程：\"></a>验证邮件签名的过程：</h3><p><img src=\"http://technet.microsoft.com/zh-cn/library/Aa998077.d1b14a27-5cfb-4df2-89f7-990219378716%28zh-cn,TechNet.10%29.gif\" alt=\"\"><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 接收邮件--&gt;检索加密的哈希值--&gt;检索邮件正文--&gt;用正文计算邮件哈希值--&gt;检索发件人的公钥--&gt;用发件人公钥解密签名(加密的哈希值)--&gt;和计算的哈希值对比--&gt;验证签名邮件</span><br><span class=\"line\">* --文件内容不变，计算的哈希值就不会变。</span><br><span class=\"line\">* --私钥加密的东西，需要对应的公钥解密。</span><br><span class=\"line\">* --如果哈希值一致，说明公钥对应的私钥是对的，私钥只有发件人知道，所以确定发件人属实。</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h2 id=\"邮件内容的加密\"><a href=\"#邮件内容的加密\" class=\"headerlink\" title=\"邮件内容的加密\"></a>邮件内容的加密</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 对称密钥加密的话，需要<span class=\"string\">\"密钥协商\"</span>，必须协商出一个双方都知道的密钥。</span><br><span class=\"line\">* 非对称密钥加密的话，没有协商过程，因为一个公钥，可以很多人拥有，私钥是只有一个人有。</span><br><span class=\"line\">* 由于非对称(公钥加密)密钥加密使用密钥对，加密和解密是一个昂贵的计算过程，速度慢。所以这么做呗......</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"send加密mail内容\"><a href=\"#send加密mail内容\" class=\"headerlink\" title=\"send加密mail内容\"></a>send加密mail内容</h3><p><img src=\"http://technet.microsoft.com/zh-cn/library/Aa998077.21058391-2d70-42f9-bf25-8ead79705b27%28zh-cn,TechNet.10%29.gif\" alt=\"\"><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* -- <span class=\"number\">1.</span>找到邮件正文--&gt;<span class=\"number\">2.</span>检索收件人公钥--&gt;<span class=\"number\">3.</span>生成一次性的会话密钥(这个是对称密钥)--&gt;<span class=\"number\">4.</span>用会话密钥加密正文--&gt;<span class=\"number\">5.</span>用收件人公钥加密会话密钥，并附到邮件--&gt;<span class=\"number\">6.</span>发送邮件</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"recv解密mail内容\"><a href=\"#recv解密mail内容\" class=\"headerlink\" title=\"recv解密mail内容\"></a>recv解密mail内容</h3><p><img src=\"http://technet.microsoft.com/zh-cn/library/Aa998077.50f0afca-e520-46b5-8e12-6e295dfe86d9%28zh-cn,TechNet.10%29.gif\" alt=\"\"><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* -- <span class=\"number\">1.</span>接收邮件--&gt;<span class=\"number\">2.</span>检索加密邮件正文和会话密钥-&gt;<span class=\"number\">3.</span>检索收件人私钥解密会话密钥-&gt;<span class=\"number\">4.</span>用解密的会话密钥解密正文-&gt;<span class=\"number\">5.</span>解密邮件返回给收件人</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"同时使用签名和邮件内容加密\"><a href=\"#同时使用签名和邮件内容加密\" class=\"headerlink\" title=\"同时使用签名和邮件内容加密\"></a>同时使用签名和邮件内容加密</h3><p><img src=\"http://technet.microsoft.com/zh-cn/library/Aa998077.e81cca9b-c780-49d9-a3f9-69cc3c442183%28zh-cn,TechNet.10%29.gif\" alt=\"tu\"></p>\n<p><br></p>\n<h3 id=\"同时使用签名和邮件内容加密后的解密\"><a href=\"#同时使用签名和邮件内容加密后的解密\" class=\"headerlink\" title=\"同时使用签名和邮件内容加密后的解密\"></a>同时使用签名和邮件内容加密后的解密</h3><p><img src=\"http://technet.microsoft.com/zh-cn/library/Aa998077.97705e57-0a94-4197-99c3-40bb58a9eaa0%28zh-cn,TechNet.10%29.gif\" alt=\"\"><br><br></p>\n<h3 id=\"功能和所需的密钥表\"><a href=\"#功能和所需的密钥表\" class=\"headerlink\" title=\"功能和所需的密钥表\"></a>功能和所需的密钥表</h3><p><img src=\"http://technet.microsoft.com/zh-cn/library/Aa998077.ef4e76b6-4799-45a9-90f8-ec7af508152a%28zh-cn,TechNet.10%29.gif\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p></p><h1><center>公钥加密的工作原理</center></h1><p></p>\n<h2 id=\"对称加密：\"><a href=\"#对称加密：\" class=\"headerlink\" title=\"对称加密：\"></a>对称加密：</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 加密密钥和解密密钥是一样的。</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h2 id=\"非对称加密：\"><a href=\"#非对称加密：\" class=\"headerlink\" title=\"非对称加密：\"></a>非对称加密：</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*\t(也叫公钥加密)</span><br><span class=\"line\">* 两个密钥在加密和解密中配合使用，密钥对具有特殊的互补关系，密钥对在数学上存在特殊关系。</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h2 id=\"邮件的电子签名过程：\"><a href=\"#邮件的电子签名过程：\" class=\"headerlink\" title=\"邮件的电子签名过程：\"></a>邮件的电子签名过程：</h2><p><img src=\"http://technet.microsoft.com/zh-cn/library/Aa998077.35451fb8-5e11-4d67-ba6e-e5d4da6febca%28zh-cn,TechNet.10%29.gif\" alt=\"\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 捕获邮件正文--&gt;计算邮件哈希值--&gt;检索发件人私钥--&gt;用发件人私钥加密哈希值--&gt;附加到邮件底部(明文签名)/与原始邮件组合成二进制附件(不透明签名)--&gt;发送mail</span><br><span class=\"line\">* --私钥只有发件人才唯一拥有，公钥仅仅与一个私钥关联，所以可以用公钥唯一识别一个私钥。</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"验证邮件签名的过程：\"><a href=\"#验证邮件签名的过程：\" class=\"headerlink\" title=\"验证邮件签名的过程：\"></a>验证邮件签名的过程：</h3><p><img src=\"http://technet.microsoft.com/zh-cn/library/Aa998077.d1b14a27-5cfb-4df2-89f7-990219378716%28zh-cn,TechNet.10%29.gif\" alt=\"\"><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 接收邮件--&gt;检索加密的哈希值--&gt;检索邮件正文--&gt;用正文计算邮件哈希值--&gt;检索发件人的公钥--&gt;用发件人公钥解密签名(加密的哈希值)--&gt;和计算的哈希值对比--&gt;验证签名邮件</span><br><span class=\"line\">* --文件内容不变，计算的哈希值就不会变。</span><br><span class=\"line\">* --私钥加密的东西，需要对应的公钥解密。</span><br><span class=\"line\">* --如果哈希值一致，说明公钥对应的私钥是对的，私钥只有发件人知道，所以确定发件人属实。</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h2 id=\"邮件内容的加密\"><a href=\"#邮件内容的加密\" class=\"headerlink\" title=\"邮件内容的加密\"></a>邮件内容的加密</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 对称密钥加密的话，需要<span class=\"string\">\"密钥协商\"</span>，必须协商出一个双方都知道的密钥。</span><br><span class=\"line\">* 非对称密钥加密的话，没有协商过程，因为一个公钥，可以很多人拥有，私钥是只有一个人有。</span><br><span class=\"line\">* 由于非对称(公钥加密)密钥加密使用密钥对，加密和解密是一个昂贵的计算过程，速度慢。所以这么做呗......</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"send加密mail内容\"><a href=\"#send加密mail内容\" class=\"headerlink\" title=\"send加密mail内容\"></a>send加密mail内容</h3><p><img src=\"http://technet.microsoft.com/zh-cn/library/Aa998077.21058391-2d70-42f9-bf25-8ead79705b27%28zh-cn,TechNet.10%29.gif\" alt=\"\"><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* -- <span class=\"number\">1.</span>找到邮件正文--&gt;<span class=\"number\">2.</span>检索收件人公钥--&gt;<span class=\"number\">3.</span>生成一次性的会话密钥(这个是对称密钥)--&gt;<span class=\"number\">4.</span>用会话密钥加密正文--&gt;<span class=\"number\">5.</span>用收件人公钥加密会话密钥，并附到邮件--&gt;<span class=\"number\">6.</span>发送邮件</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"recv解密mail内容\"><a href=\"#recv解密mail内容\" class=\"headerlink\" title=\"recv解密mail内容\"></a>recv解密mail内容</h3><p><img src=\"http://technet.microsoft.com/zh-cn/library/Aa998077.50f0afca-e520-46b5-8e12-6e295dfe86d9%28zh-cn,TechNet.10%29.gif\" alt=\"\"><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* -- <span class=\"number\">1.</span>接收邮件--&gt;<span class=\"number\">2.</span>检索加密邮件正文和会话密钥-&gt;<span class=\"number\">3.</span>检索收件人私钥解密会话密钥-&gt;<span class=\"number\">4.</span>用解密的会话密钥解密正文-&gt;<span class=\"number\">5.</span>解密邮件返回给收件人</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"同时使用签名和邮件内容加密\"><a href=\"#同时使用签名和邮件内容加密\" class=\"headerlink\" title=\"同时使用签名和邮件内容加密\"></a>同时使用签名和邮件内容加密</h3><p><img src=\"http://technet.microsoft.com/zh-cn/library/Aa998077.e81cca9b-c780-49d9-a3f9-69cc3c442183%28zh-cn,TechNet.10%29.gif\" alt=\"tu\"></p>\n<p><br></p>\n<h3 id=\"同时使用签名和邮件内容加密后的解密\"><a href=\"#同时使用签名和邮件内容加密后的解密\" class=\"headerlink\" title=\"同时使用签名和邮件内容加密后的解密\"></a>同时使用签名和邮件内容加密后的解密</h3><p><img src=\"http://technet.microsoft.com/zh-cn/library/Aa998077.97705e57-0a94-4197-99c3-40bb58a9eaa0%28zh-cn,TechNet.10%29.gif\" alt=\"\"><br><br></p>\n<h3 id=\"功能和所需的密钥表\"><a href=\"#功能和所需的密钥表\" class=\"headerlink\" title=\"功能和所需的密钥表\"></a>功能和所需的密钥表</h3><p><img src=\"http://technet.microsoft.com/zh-cn/library/Aa998077.ef4e76b6-4799-45a9-90f8-ec7af508152a%28zh-cn,TechNet.10%29.gif\" alt=\"\"></p>\n"},{"layout":"post","title":"tcp连接过程，半连接队列和全连接队列","date":"2019-02-15T04:06:00.000Z","_content":"\n\n## tcp三次握手的过程\n\n- 第一次：客户端发送SYN(Synchronize Sequence Numbers)报文，标志位SYN=1,序列号seq=j。\n- 第二次：服务端收到SYN报文后，回应ACK(Acknowledgement)，标志位ACK=1,确认号ack为j+1， 同时自己也发送一个SYN报文，SYN=1,序列号seq假设为k， 即一个ACK+SYN包\n- 第三次：客户端收到报文后，发送一个ACK报文，标志位ACK=1，确认号ack=(k+1) 到服务器，客户端和服务器进入ESTABLISHED状态，TCP链接成功。\n- SYN是同步报文标志位，建立连接时为1，连接建立后置为0，ACK时确认标志位一般为1\n\n## tcp四次挥手过程，为什么是4次呢？\n\n- 假如客户端主动发起关闭操作\n- 第一次： 客户端发送FIN报文，假设为序列号seq=i给服务器。\n- 第二次： 服务发送ACK报文，ack=(i+1)给客户端，可能数据还没有接收完毕，所以服务端socket状态由ESTABLISHED -> CLOSE_WAIT状态。\n- 第三次： 服务端端处理完毕，发送FIN报文，序列号为j。\n- 第四次： 客户端收到报文后，发送ACK报文，ack=j+1, 并进入TIME_WAIT状态。等待2MSL后自动关闭\n\n> * 为什么客户端不发完ack就释放呢，因为服务器可能没收到ack，服务器会重新发送FIN请求关闭连接，客户端重新发送ack，所以一个来回就是2\n个报文周期。当连接处于2MSL等待阶段时任何迟到的报文段都将被丢弃。\n\n借用一张图表示一下\n![aa](https://img-blog.csdnimg.cn/20190214095421560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pXRTc2MTYxNzU=,size_16,color_FFFFFF,t_70)\n\n\n## 如果已经建立了连接，但是客户端突然出现故障了怎么办？\n\n> TCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n\n\n## 查看网络链接的命令\n\n* 查看不同状态的链接数\n> * netstat -an | awk '/^tcp/ {++y[$NF]} END {for(w in y) print w, y[w]}'\n\n\n\n## 半连接状态队列sync_queue和全连接队列accept_queue\n\n * 第一种实现：\n> - BSD实现和在linux2.2之前，listen系统调用backlog参数表示半链接+全链接队列数之和\n> - 当队列满了以后，服务端再收到SYN时，将不会返回SYN/ACK。比较优雅的处理方法就是不处理这条连接，不返回RST，让客户端重试.\n> - accept系统调用只是简单地从完成队列中取出连接.\n* 第二种实现：\n> - linux内核2.2以上的版本，SYN_RCVD队列的大小由proc/sys/net/ipv4/tcp_max_syn_backlog系统参数指定，ESTABLISHED队列由backlog和/proc/sys/net/core/somaxconn中较小的指定\n\n- ![](http://img2.cnxct.com/2015/06/tcp-sync-queue-and-accept-queue-small.jpg)\n \n\n* 如果全连接队列满了怎么办？\n\n> - 服务器不予处理，这样客户端会任务数据丢失，重新发送ack确认，如果服务器有空间，会重新加入到ESTABLISHED队列。\n\n* 如果client端没收到服务器发来的FIN，那么client会一直是FIN_WAIT_2吗？\n\n> - 设置系统变量\n> - sysctl -w net.ipv4.tcp_fin_timeout=5  \n> - 直接ctrl+c杀死客户端，发现FIN_WAIT_2的状态的链接，一会就消失了，并不会进入TIMEWAIT状态。\n\n* 怎么查看链接状态呢？\n\n```shell\nnetstat -natp | grep 8888\n\n#8888是服务端监听的端口，因为tcp链接总是有一端是8888端口的。\n```\n\n* 查看每个ip和服务器的连接数\n```shell\nnetstat -nat|awk '{print$5}'|awk -F : '{print$1}'|sort|uniq -c|sort -rn\n```\n\n* 什么是MSL呢？\n\n> - linux上的定义，就是60s\n```c\n#define TCP_TIMEWAIT_LEN (60*HZ) /* how long to wait to destroy TIME-WAIT\n                  * state, about 60 seconds */\n```\n\n* 全连接队列满了怎么办呢？\n> -  服务器根据 /proc/sys/net/ipv4/tcp_abort_on_overflow的值处理\n> - 0 表示丢弃ack，让客户端重新发ack\n> - 1 表示表示发送一个RST给客户端，直接废弃掉这个握手过程，客户端会出现connection reset by peer的错误\n\n\n* [tcp协议RFC文档](https://tools.ietf.org/html/rfc793)\n* [参考链接1](https://blog.csdn.net/yangbodong22011/article/details/60399728)\n* [参考链接2](https://blog.csdn.net/hhhanpan/article/details/79388945)\n* [参考链接3](https://blog.csdn.net/dog250/article/details/81256550)\n* [socket耗尽，半连接队列限制](https://blog.csdn.net/jhcsdb/article/details/34921167)\n* [参考链接4](https://www.cnblogs.com/jessezeng/p/5617105.html)","source":"_posts/linux/tcp半连接队列和全连接队列.md","raw":"---\nlayout: post\ntitle: tcp连接过程，半连接队列和全连接队列\ncategory: linux \ndate: 2019-02-15 12:06:00\n---\n\n\n## tcp三次握手的过程\n\n- 第一次：客户端发送SYN(Synchronize Sequence Numbers)报文，标志位SYN=1,序列号seq=j。\n- 第二次：服务端收到SYN报文后，回应ACK(Acknowledgement)，标志位ACK=1,确认号ack为j+1， 同时自己也发送一个SYN报文，SYN=1,序列号seq假设为k， 即一个ACK+SYN包\n- 第三次：客户端收到报文后，发送一个ACK报文，标志位ACK=1，确认号ack=(k+1) 到服务器，客户端和服务器进入ESTABLISHED状态，TCP链接成功。\n- SYN是同步报文标志位，建立连接时为1，连接建立后置为0，ACK时确认标志位一般为1\n\n## tcp四次挥手过程，为什么是4次呢？\n\n- 假如客户端主动发起关闭操作\n- 第一次： 客户端发送FIN报文，假设为序列号seq=i给服务器。\n- 第二次： 服务发送ACK报文，ack=(i+1)给客户端，可能数据还没有接收完毕，所以服务端socket状态由ESTABLISHED -> CLOSE_WAIT状态。\n- 第三次： 服务端端处理完毕，发送FIN报文，序列号为j。\n- 第四次： 客户端收到报文后，发送ACK报文，ack=j+1, 并进入TIME_WAIT状态。等待2MSL后自动关闭\n\n> * 为什么客户端不发完ack就释放呢，因为服务器可能没收到ack，服务器会重新发送FIN请求关闭连接，客户端重新发送ack，所以一个来回就是2\n个报文周期。当连接处于2MSL等待阶段时任何迟到的报文段都将被丢弃。\n\n借用一张图表示一下\n![aa](https://img-blog.csdnimg.cn/20190214095421560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pXRTc2MTYxNzU=,size_16,color_FFFFFF,t_70)\n\n\n## 如果已经建立了连接，但是客户端突然出现故障了怎么办？\n\n> TCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n\n\n## 查看网络链接的命令\n\n* 查看不同状态的链接数\n> * netstat -an | awk '/^tcp/ {++y[$NF]} END {for(w in y) print w, y[w]}'\n\n\n\n## 半连接状态队列sync_queue和全连接队列accept_queue\n\n * 第一种实现：\n> - BSD实现和在linux2.2之前，listen系统调用backlog参数表示半链接+全链接队列数之和\n> - 当队列满了以后，服务端再收到SYN时，将不会返回SYN/ACK。比较优雅的处理方法就是不处理这条连接，不返回RST，让客户端重试.\n> - accept系统调用只是简单地从完成队列中取出连接.\n* 第二种实现：\n> - linux内核2.2以上的版本，SYN_RCVD队列的大小由proc/sys/net/ipv4/tcp_max_syn_backlog系统参数指定，ESTABLISHED队列由backlog和/proc/sys/net/core/somaxconn中较小的指定\n\n- ![](http://img2.cnxct.com/2015/06/tcp-sync-queue-and-accept-queue-small.jpg)\n \n\n* 如果全连接队列满了怎么办？\n\n> - 服务器不予处理，这样客户端会任务数据丢失，重新发送ack确认，如果服务器有空间，会重新加入到ESTABLISHED队列。\n\n* 如果client端没收到服务器发来的FIN，那么client会一直是FIN_WAIT_2吗？\n\n> - 设置系统变量\n> - sysctl -w net.ipv4.tcp_fin_timeout=5  \n> - 直接ctrl+c杀死客户端，发现FIN_WAIT_2的状态的链接，一会就消失了，并不会进入TIMEWAIT状态。\n\n* 怎么查看链接状态呢？\n\n```shell\nnetstat -natp | grep 8888\n\n#8888是服务端监听的端口，因为tcp链接总是有一端是8888端口的。\n```\n\n* 查看每个ip和服务器的连接数\n```shell\nnetstat -nat|awk '{print$5}'|awk -F : '{print$1}'|sort|uniq -c|sort -rn\n```\n\n* 什么是MSL呢？\n\n> - linux上的定义，就是60s\n```c\n#define TCP_TIMEWAIT_LEN (60*HZ) /* how long to wait to destroy TIME-WAIT\n                  * state, about 60 seconds */\n```\n\n* 全连接队列满了怎么办呢？\n> -  服务器根据 /proc/sys/net/ipv4/tcp_abort_on_overflow的值处理\n> - 0 表示丢弃ack，让客户端重新发ack\n> - 1 表示表示发送一个RST给客户端，直接废弃掉这个握手过程，客户端会出现connection reset by peer的错误\n\n\n* [tcp协议RFC文档](https://tools.ietf.org/html/rfc793)\n* [参考链接1](https://blog.csdn.net/yangbodong22011/article/details/60399728)\n* [参考链接2](https://blog.csdn.net/hhhanpan/article/details/79388945)\n* [参考链接3](https://blog.csdn.net/dog250/article/details/81256550)\n* [socket耗尽，半连接队列限制](https://blog.csdn.net/jhcsdb/article/details/34921167)\n* [参考链接4](https://www.cnblogs.com/jessezeng/p/5617105.html)","slug":"linux/tcp半连接队列和全连接队列","published":1,"updated":"2019-03-02T10:16:37.984Z","comments":1,"photos":[],"link":"","_id":"cjwxes5d7001ahdlicw99m1rw","content":"<h2 id=\"tcp三次握手的过程\"><a href=\"#tcp三次握手的过程\" class=\"headerlink\" title=\"tcp三次握手的过程\"></a>tcp三次握手的过程</h2><ul>\n<li>第一次：客户端发送SYN(Synchronize Sequence Numbers)报文，标志位SYN=1,序列号seq=j。</li>\n<li>第二次：服务端收到SYN报文后，回应ACK(Acknowledgement)，标志位ACK=1,确认号ack为j+1， 同时自己也发送一个SYN报文，SYN=1,序列号seq假设为k， 即一个ACK+SYN包</li>\n<li>第三次：客户端收到报文后，发送一个ACK报文，标志位ACK=1，确认号ack=(k+1) 到服务器，客户端和服务器进入ESTABLISHED状态，TCP链接成功。</li>\n<li>SYN是同步报文标志位，建立连接时为1，连接建立后置为0，ACK时确认标志位一般为1</li>\n</ul>\n<h2 id=\"tcp四次挥手过程，为什么是4次呢？\"><a href=\"#tcp四次挥手过程，为什么是4次呢？\" class=\"headerlink\" title=\"tcp四次挥手过程，为什么是4次呢？\"></a>tcp四次挥手过程，为什么是4次呢？</h2><ul>\n<li>假如客户端主动发起关闭操作</li>\n<li>第一次： 客户端发送FIN报文，假设为序列号seq=i给服务器。</li>\n<li>第二次： 服务发送ACK报文，ack=(i+1)给客户端，可能数据还没有接收完毕，所以服务端socket状态由ESTABLISHED -&gt; CLOSE_WAIT状态。</li>\n<li>第三次： 服务端端处理完毕，发送FIN报文，序列号为j。</li>\n<li>第四次： 客户端收到报文后，发送ACK报文，ack=j+1, 并进入TIME_WAIT状态。等待2MSL后自动关闭</li>\n</ul>\n<blockquote>\n<ul>\n<li>为什么客户端不发完ack就释放呢，因为服务器可能没收到ack，服务器会重新发送FIN请求关闭连接，客户端重新发送ack，所以一个来回就是2<br>个报文周期。当连接处于2MSL等待阶段时任何迟到的报文段都将被丢弃。</li>\n</ul>\n</blockquote>\n<p>借用一张图表示一下<br><img src=\"https://img-blog.csdnimg.cn/20190214095421560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pXRTc2MTYxNzU=,size_16,color_FFFFFF,t_70\" alt=\"aa\"></p>\n<h2 id=\"如果已经建立了连接，但是客户端突然出现故障了怎么办？\"><a href=\"#如果已经建立了连接，但是客户端突然出现故障了怎么办？\" class=\"headerlink\" title=\"如果已经建立了连接，但是客户端突然出现故障了怎么办？\"></a>如果已经建立了连接，但是客户端突然出现故障了怎么办？</h2><blockquote>\n<p>TCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p>\n</blockquote>\n<h2 id=\"查看网络链接的命令\"><a href=\"#查看网络链接的命令\" class=\"headerlink\" title=\"查看网络链接的命令\"></a>查看网络链接的命令</h2><ul>\n<li>查看不同状态的链接数<blockquote>\n<ul>\n<li>netstat -an | awk ‘/^tcp/ {++y[$NF]} END {for(w in y) print w, y[w]}’</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"半连接状态队列sync-queue和全连接队列accept-queue\"><a href=\"#半连接状态队列sync-queue和全连接队列accept-queue\" class=\"headerlink\" title=\"半连接状态队列sync_queue和全连接队列accept_queue\"></a>半连接状态队列sync_queue和全连接队列accept_queue</h2><ul>\n<li>第一种实现：<blockquote>\n<ul>\n<li>BSD实现和在linux2.2之前，listen系统调用backlog参数表示半链接+全链接队列数之和</li>\n<li>当队列满了以后，服务端再收到SYN时，将不会返回SYN/ACK。比较优雅的处理方法就是不处理这条连接，不返回RST，让客户端重试.</li>\n<li>accept系统调用只是简单地从完成队列中取出连接.</li>\n</ul>\n<ul>\n<li>第二种实现：</li>\n</ul>\n<ul>\n<li>linux内核2.2以上的版本，SYN_RCVD队列的大小由proc/sys/net/ipv4/tcp_max_syn_backlog系统参数指定，ESTABLISHED队列由backlog和/proc/sys/net/core/somaxconn中较小的指定</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><img src=\"http://img2.cnxct.com/2015/06/tcp-sync-queue-and-accept-queue-small.jpg\" alt=\"\"></li>\n</ul>\n<ul>\n<li>如果全连接队列满了怎么办？</li>\n</ul>\n<blockquote>\n<ul>\n<li>服务器不予处理，这样客户端会任务数据丢失，重新发送ack确认，如果服务器有空间，会重新加入到ESTABLISHED队列。</li>\n</ul>\n</blockquote>\n<ul>\n<li>如果client端没收到服务器发来的FIN，那么client会一直是FIN_WAIT_2吗？</li>\n</ul>\n<blockquote>\n<ul>\n<li>设置系统变量</li>\n<li>sysctl -w net.ipv4.tcp_fin_timeout=5  </li>\n<li>直接ctrl+c杀死客户端，发现FIN_WAIT_2的状态的链接，一会就消失了，并不会进入TIMEWAIT状态。</li>\n</ul>\n</blockquote>\n<ul>\n<li>怎么查看链接状态呢？</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -natp | grep 8888</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>8888是服务端监听的端口，因为tcp链接总是有一端是8888端口的。</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>查看每个ip和服务器的连接数</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -nat|awk '&#123;print$5&#125;'|awk -F : '&#123;print$1&#125;'|sort|uniq -c|sort -rn</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>什么是MSL呢？</p>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li>linux上的定义，就是60s<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TCP_TIMEWAIT_LEN (60*HZ) <span class=\"comment\">/* how long to wait to destroy TIME-WAIT</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"comment\">                  * state, about 60 seconds */</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>全连接队列满了怎么办呢？<blockquote>\n<ul>\n<li>服务器根据 /proc/sys/net/ipv4/tcp_abort_on_overflow的值处理</li>\n<li>0 表示丢弃ack，让客户端重新发ack</li>\n<li>1 表示表示发送一个RST给客户端，直接废弃掉这个握手过程，客户端会出现connection reset by peer的错误</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://tools.ietf.org/html/rfc793\" target=\"_blank\" rel=\"noopener\">tcp协议RFC文档</a></li>\n<li><a href=\"https://blog.csdn.net/yangbodong22011/article/details/60399728\" target=\"_blank\" rel=\"noopener\">参考链接1</a></li>\n<li><a href=\"https://blog.csdn.net/hhhanpan/article/details/79388945\" target=\"_blank\" rel=\"noopener\">参考链接2</a></li>\n<li><a href=\"https://blog.csdn.net/dog250/article/details/81256550\" target=\"_blank\" rel=\"noopener\">参考链接3</a></li>\n<li><a href=\"https://blog.csdn.net/jhcsdb/article/details/34921167\" target=\"_blank\" rel=\"noopener\">socket耗尽，半连接队列限制</a></li>\n<li><a href=\"https://www.cnblogs.com/jessezeng/p/5617105.html\" target=\"_blank\" rel=\"noopener\">参考链接4</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"tcp三次握手的过程\"><a href=\"#tcp三次握手的过程\" class=\"headerlink\" title=\"tcp三次握手的过程\"></a>tcp三次握手的过程</h2><ul>\n<li>第一次：客户端发送SYN(Synchronize Sequence Numbers)报文，标志位SYN=1,序列号seq=j。</li>\n<li>第二次：服务端收到SYN报文后，回应ACK(Acknowledgement)，标志位ACK=1,确认号ack为j+1， 同时自己也发送一个SYN报文，SYN=1,序列号seq假设为k， 即一个ACK+SYN包</li>\n<li>第三次：客户端收到报文后，发送一个ACK报文，标志位ACK=1，确认号ack=(k+1) 到服务器，客户端和服务器进入ESTABLISHED状态，TCP链接成功。</li>\n<li>SYN是同步报文标志位，建立连接时为1，连接建立后置为0，ACK时确认标志位一般为1</li>\n</ul>\n<h2 id=\"tcp四次挥手过程，为什么是4次呢？\"><a href=\"#tcp四次挥手过程，为什么是4次呢？\" class=\"headerlink\" title=\"tcp四次挥手过程，为什么是4次呢？\"></a>tcp四次挥手过程，为什么是4次呢？</h2><ul>\n<li>假如客户端主动发起关闭操作</li>\n<li>第一次： 客户端发送FIN报文，假设为序列号seq=i给服务器。</li>\n<li>第二次： 服务发送ACK报文，ack=(i+1)给客户端，可能数据还没有接收完毕，所以服务端socket状态由ESTABLISHED -&gt; CLOSE_WAIT状态。</li>\n<li>第三次： 服务端端处理完毕，发送FIN报文，序列号为j。</li>\n<li>第四次： 客户端收到报文后，发送ACK报文，ack=j+1, 并进入TIME_WAIT状态。等待2MSL后自动关闭</li>\n</ul>\n<blockquote>\n<ul>\n<li>为什么客户端不发完ack就释放呢，因为服务器可能没收到ack，服务器会重新发送FIN请求关闭连接，客户端重新发送ack，所以一个来回就是2<br>个报文周期。当连接处于2MSL等待阶段时任何迟到的报文段都将被丢弃。</li>\n</ul>\n</blockquote>\n<p>借用一张图表示一下<br><img src=\"https://img-blog.csdnimg.cn/20190214095421560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pXRTc2MTYxNzU=,size_16,color_FFFFFF,t_70\" alt=\"aa\"></p>\n<h2 id=\"如果已经建立了连接，但是客户端突然出现故障了怎么办？\"><a href=\"#如果已经建立了连接，但是客户端突然出现故障了怎么办？\" class=\"headerlink\" title=\"如果已经建立了连接，但是客户端突然出现故障了怎么办？\"></a>如果已经建立了连接，但是客户端突然出现故障了怎么办？</h2><blockquote>\n<p>TCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p>\n</blockquote>\n<h2 id=\"查看网络链接的命令\"><a href=\"#查看网络链接的命令\" class=\"headerlink\" title=\"查看网络链接的命令\"></a>查看网络链接的命令</h2><ul>\n<li>查看不同状态的链接数<blockquote>\n<ul>\n<li>netstat -an | awk ‘/^tcp/ {++y[$NF]} END {for(w in y) print w, y[w]}’</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"半连接状态队列sync-queue和全连接队列accept-queue\"><a href=\"#半连接状态队列sync-queue和全连接队列accept-queue\" class=\"headerlink\" title=\"半连接状态队列sync_queue和全连接队列accept_queue\"></a>半连接状态队列sync_queue和全连接队列accept_queue</h2><ul>\n<li>第一种实现：<blockquote>\n<ul>\n<li>BSD实现和在linux2.2之前，listen系统调用backlog参数表示半链接+全链接队列数之和</li>\n<li>当队列满了以后，服务端再收到SYN时，将不会返回SYN/ACK。比较优雅的处理方法就是不处理这条连接，不返回RST，让客户端重试.</li>\n<li>accept系统调用只是简单地从完成队列中取出连接.</li>\n</ul>\n<ul>\n<li>第二种实现：</li>\n</ul>\n<ul>\n<li>linux内核2.2以上的版本，SYN_RCVD队列的大小由proc/sys/net/ipv4/tcp_max_syn_backlog系统参数指定，ESTABLISHED队列由backlog和/proc/sys/net/core/somaxconn中较小的指定</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><img src=\"http://img2.cnxct.com/2015/06/tcp-sync-queue-and-accept-queue-small.jpg\" alt=\"\"></li>\n</ul>\n<ul>\n<li>如果全连接队列满了怎么办？</li>\n</ul>\n<blockquote>\n<ul>\n<li>服务器不予处理，这样客户端会任务数据丢失，重新发送ack确认，如果服务器有空间，会重新加入到ESTABLISHED队列。</li>\n</ul>\n</blockquote>\n<ul>\n<li>如果client端没收到服务器发来的FIN，那么client会一直是FIN_WAIT_2吗？</li>\n</ul>\n<blockquote>\n<ul>\n<li>设置系统变量</li>\n<li>sysctl -w net.ipv4.tcp_fin_timeout=5  </li>\n<li>直接ctrl+c杀死客户端，发现FIN_WAIT_2的状态的链接，一会就消失了，并不会进入TIMEWAIT状态。</li>\n</ul>\n</blockquote>\n<ul>\n<li>怎么查看链接状态呢？</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -natp | grep 8888</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>8888是服务端监听的端口，因为tcp链接总是有一端是8888端口的。</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>查看每个ip和服务器的连接数</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -nat|awk '&#123;print$5&#125;'|awk -F : '&#123;print$1&#125;'|sort|uniq -c|sort -rn</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>什么是MSL呢？</p>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li>linux上的定义，就是60s<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TCP_TIMEWAIT_LEN (60*HZ) <span class=\"comment\">/* how long to wait to destroy TIME-WAIT</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"comment\">                  * state, about 60 seconds */</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>全连接队列满了怎么办呢？<blockquote>\n<ul>\n<li>服务器根据 /proc/sys/net/ipv4/tcp_abort_on_overflow的值处理</li>\n<li>0 表示丢弃ack，让客户端重新发ack</li>\n<li>1 表示表示发送一个RST给客户端，直接废弃掉这个握手过程，客户端会出现connection reset by peer的错误</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://tools.ietf.org/html/rfc793\" target=\"_blank\" rel=\"noopener\">tcp协议RFC文档</a></li>\n<li><a href=\"https://blog.csdn.net/yangbodong22011/article/details/60399728\" target=\"_blank\" rel=\"noopener\">参考链接1</a></li>\n<li><a href=\"https://blog.csdn.net/hhhanpan/article/details/79388945\" target=\"_blank\" rel=\"noopener\">参考链接2</a></li>\n<li><a href=\"https://blog.csdn.net/dog250/article/details/81256550\" target=\"_blank\" rel=\"noopener\">参考链接3</a></li>\n<li><a href=\"https://blog.csdn.net/jhcsdb/article/details/34921167\" target=\"_blank\" rel=\"noopener\">socket耗尽，半连接队列限制</a></li>\n<li><a href=\"https://www.cnblogs.com/jessezeng/p/5617105.html\" target=\"_blank\" rel=\"noopener\">参考链接4</a></li>\n</ul>\n"},{"layout":"post","title":"nginx连接数和内核参数的联系","date":"2019-02-16T04:06:00.000Z","_content":"\n\n没明白呢。。\n","source":"_posts/linux/nginx连接数和内核参数关系.md","raw":"---\nlayout: post\ntitle: nginx连接数和内核参数的联系\ncategory: linux \ndate: 2019-02-16 12:06:00\n---\n\n\n没明白呢。。\n","slug":"linux/nginx连接数和内核参数关系","published":1,"updated":"2019-03-02T10:16:37.984Z","comments":1,"photos":[],"link":"","_id":"cjwxes5d8001dhdli9y5pmm9z","content":"<p>没明白呢。。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>没明白呢。。</p>\n"},{"layout":"post","title":"vim-emmet插件/html/css","date":"2016-10-26T16:00:00.000Z","_content":"\n# emmet-vim 插件就是以前的zencoding\n\n安装 可以git clone ，可以在vim里面安装PluginInstall\n\n来说一下快捷键\n快捷键一：\n\n输入html：5  按下ctrl+y 松开后在按逗号（英文的哦）\n立刻展开成如下了\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n    \n</body>\n</html>\n\n```\n\nhtml:xt 就是兼容的html版本\n\n快捷键二：\ndiv#page>div.logo+ul#navigation*2>li*5>a \n也是ctrl+y，松开后按英文逗号，展开后是：\n```html \n<div id=\"page\">\n    <div class=\"logo\"></div>\n    <ul id=\"navigation\">\n        <li><a href=\"\"></a></li>\n        <li><a href=\"\"></a></li>\n        <li><a href=\"\"></a></li>\n        <li><a href=\"\"></a></li>\n        <li><a href=\"\"></a></li>\n    </ul>\n    <ul id=\"navigation\">\n        <li><a href=\"\"></a></li>\n        <li><a href=\"\"></a></li>\n        <li><a href=\"\"></a></li>\n        <li><a href=\"\"></a></li>\n        <li><a href=\"\"></a></li>\n    </ul>\n</div>\n\n```\n\n可以看出来：\n\n\\#号是表示id \n\\.表示class \n\\+ 表示同一级的元素\n可以用*n 产生多个同名同级的元素\n\\>表示要包含的元素\n\\#xxx 默认的这个表示默认div元素，且id为xxx\n","source":"_posts/linux/vim-emmet.md","raw":"---\nlayout: post\ntitle: vim-emmet插件/html/css\ndate: 2016-10-27\ncategory : vim \n---\n\n# emmet-vim 插件就是以前的zencoding\n\n安装 可以git clone ，可以在vim里面安装PluginInstall\n\n来说一下快捷键\n快捷键一：\n\n输入html：5  按下ctrl+y 松开后在按逗号（英文的哦）\n立刻展开成如下了\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n    \n</body>\n</html>\n\n```\n\nhtml:xt 就是兼容的html版本\n\n快捷键二：\ndiv#page>div.logo+ul#navigation*2>li*5>a \n也是ctrl+y，松开后按英文逗号，展开后是：\n```html \n<div id=\"page\">\n    <div class=\"logo\"></div>\n    <ul id=\"navigation\">\n        <li><a href=\"\"></a></li>\n        <li><a href=\"\"></a></li>\n        <li><a href=\"\"></a></li>\n        <li><a href=\"\"></a></li>\n        <li><a href=\"\"></a></li>\n    </ul>\n    <ul id=\"navigation\">\n        <li><a href=\"\"></a></li>\n        <li><a href=\"\"></a></li>\n        <li><a href=\"\"></a></li>\n        <li><a href=\"\"></a></li>\n        <li><a href=\"\"></a></li>\n    </ul>\n</div>\n\n```\n\n可以看出来：\n\n\\#号是表示id \n\\.表示class \n\\+ 表示同一级的元素\n可以用*n 产生多个同名同级的元素\n\\>表示要包含的元素\n\\#xxx 默认的这个表示默认div元素，且id为xxx\n","slug":"linux/vim-emmet","published":1,"updated":"2019-05-19T14:18:38.610Z","comments":1,"photos":[],"link":"","_id":"cjwxes5d9001ghdlikxlatzxv","content":"<h1 id=\"emmet-vim-插件就是以前的zencoding\"><a href=\"#emmet-vim-插件就是以前的zencoding\" class=\"headerlink\" title=\"emmet-vim 插件就是以前的zencoding\"></a>emmet-vim 插件就是以前的zencoding</h1><p>安装 可以git clone ，可以在vim里面安装PluginInstall</p>\n<p>来说一下快捷键<br>快捷键一：</p>\n<p>输入html：5  按下ctrl+y 松开后在按逗号（英文的哦）<br>立刻展开成如下了<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>html:xt 就是兼容的html版本</p>\n<p>快捷键二：<br>div#page&gt;div.logo+ul#navigation<em>2&gt;li</em>5&gt;a<br>也是ctrl+y，松开后按英文逗号，展开后是：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"logo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"navigation\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"navigation\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>可以看出来：</p>\n<p>#号是表示id<br>.表示class<br>+ 表示同一级的元素<br>可以用*n 产生多个同名同级的元素<br>>表示要包含的元素<br>#xxx 默认的这个表示默认div元素，且id为xxx</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"emmet-vim-插件就是以前的zencoding\"><a href=\"#emmet-vim-插件就是以前的zencoding\" class=\"headerlink\" title=\"emmet-vim 插件就是以前的zencoding\"></a>emmet-vim 插件就是以前的zencoding</h1><p>安装 可以git clone ，可以在vim里面安装PluginInstall</p>\n<p>来说一下快捷键<br>快捷键一：</p>\n<p>输入html：5  按下ctrl+y 松开后在按逗号（英文的哦）<br>立刻展开成如下了<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>html:xt 就是兼容的html版本</p>\n<p>快捷键二：<br>div#page&gt;div.logo+ul#navigation<em>2&gt;li</em>5&gt;a<br>也是ctrl+y，松开后按英文逗号，展开后是：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"logo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"navigation\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"navigation\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>可以看出来：</p>\n<p>#号是表示id<br>.表示class<br>+ 表示同一级的元素<br>可以用*n 产生多个同名同级的元素<br>>表示要包含的元素<br>#xxx 默认的这个表示默认div元素，且id为xxx</p>\n"},{"layout":"post","title":"vim 乱码","date":"2016-10-26T10:37:00.000Z","_content":"\n# 首先 中文os下，我们一般的设置是：\n```shell \nset encoding=utf-8                                \"设置gvim内部编码\nset fileencoding=utf-8                               \"设置当前文件编码\nset fileencodings=gbk,utf-8,shift_jis,ucs-bom,latin1,gb2312,cp936,cp932    设置支持打开的文件的编码\n\nset termencoding=utf-8\nset guifont=DejaVu\\\\ Sans\\\\ Mono\\\\:h13   \n```\n\n上述，set fileencodings设置的文字编码解析顺位，对于中文是可以解析出来的,shift_jis编码的文件，就会出现乱码。除非你把shift_jis设置第一位：\n\n```shell\nset fileencodings=shift_jis,gbk,utf-8,ucs-bom,latin1,gb2312,cp936,cp932 \n```\n\n# 对于日文os ，安装gvim后，需要如下设置：\n由于本地ANSI是cp932 , 所以把cp932 放在第一或者第二的位置，\n如果放到第三或者后面就会出现shift_jis编码的日文打开后是文本乱码现象。\n\n```shell\nset encoding=utf-8                                    \"设置gvim内部编码\nset fileencoding=utf-8                               \"设置当前文件编码\nset fileencodings=CP932,utf-8,gbk,,ucs-bom,latin1,gb2312,cp936 #设置支持打开的文件的编码\n\nset termencoding=utf-8\n\nset guifont=DejaVu\\ Sans\\ Mono\\:h13 \nset guifontwide=NSimsun\\:h14  \n#设置新宋体      \n\n```\n\n由于DejaVu Sans Mono 字体是英文字符字体，无法正确显示宽字体，所以需要特别加入\n```shell\nset guifontwide=NSimsun\\:h14 \n#设置新宋体 ，显示汉字\n```\n\n所以大家在自己的sublime 或者vim中设置编辑器字体DejaVu Sans Mono就好像可以显示正确的汉字和英文，其实我们设置的只是英文字符显示的样式。汉字其实是系统本地ANSI编码。\n\n## 本地ANSI编码\n世界上每种语言对应的windows 系统都有各自的ANSI，互相不兼容。\n\n比如 中文ANSI == GBK(中文) ，gbk是gb2312(简体中文)的扩展，包含繁体，日文片假名。cp936就是gbk\n    日文ANSI == Windows-31J  就是cp932. \nshift_jis也是一种日文字符编码,不过，只实现了cp932的部分，所以cp932编码的东东，shift_jis可能乱码。shift_jis编码的，cp932一定正常显示。\n\n这是微软早起应对不同国家一种混合的编码：字母+对应的国家文字,这种字符也是多字节字符。比如：中文ANSI,字母数字是1字节 ,汉字是2字节。两种语言文字有可能在一起就显示乱码。不过微软提供了本地ANSI转换为标准unicode字符的方案，通过代码页转换表技术这一过度方案。\n\n## nnicode编码规范\nunicode 是将全世界所有的字符都统一编码的方案(规范))。那么字符a的编码本来是1byte ,现在统一和一个汉字一样长了。那么问题来了，字符串是'\\0'字符结尾。世界上的很久以前写的c程序，就没办法用了。所以说unicode应该早点出来。\n\n有了这种全字符集，解决了乱码，却没法用，蛋疼吧，可是utf8这一实现字符保存，传输的方案出现了。因为utf8是可变长的。不同位段，长度不一致。 \n\n## utf-8编码\n```html\nUCS-2编码(16进制)   UTF-8 字节流(二进制)\n0000 - 007F         0xxxxxxx\n0080 - 07FF         110xxxxx 10xxxxxx\n0800 - FFFF         1110xxxx 10xxxxxx 10xxxxxx \n \n例如“汉”字的Unicode编码是6C49。6C49在0800-FFFF之间，所以肯定要用3字节模板了：1110xxxx 10xxxxxx 10xxxxxx。将6C49写成二进制是：0110 110001 001001，用这个比特流依次代替模板中的x，得到：11100110 10110001 10001001，即E6 B1 89。\n \n可见UTF-8是变长的，将Unicode编码为00000000-0000007F的字符，用单个字节来表示； 00000080-000007FF的字符用两个字节表示；00000800-0000FFFF的字符用3字节表示。因为目前为止Unicode-16规范没有指定FFFF以上的字符，所以UTF-8最多是使用3个字节来表示一个字符。但理论上来说，UTF-8最多需要用6字节表示一个字符。 \n \nUTF-8兼容ASCII。\n```\n\n#utf16编码\nutf-16 和unicode规范是一致的，所以不兼容ascii。\n以上信息来源参考： ![这里的博客](http://polaris.blog.51cto.com/1146394/377468/)\n","source":"_posts/linux/vim_luanma.md","raw":"---\nlayout: \"post\"\ntitle: \"vim 乱码\"\ndate: \"2016-10-26 18:37\"\n\n---\n\n# 首先 中文os下，我们一般的设置是：\n```shell \nset encoding=utf-8                                \"设置gvim内部编码\nset fileencoding=utf-8                               \"设置当前文件编码\nset fileencodings=gbk,utf-8,shift_jis,ucs-bom,latin1,gb2312,cp936,cp932    设置支持打开的文件的编码\n\nset termencoding=utf-8\nset guifont=DejaVu\\\\ Sans\\\\ Mono\\\\:h13   \n```\n\n上述，set fileencodings设置的文字编码解析顺位，对于中文是可以解析出来的,shift_jis编码的文件，就会出现乱码。除非你把shift_jis设置第一位：\n\n```shell\nset fileencodings=shift_jis,gbk,utf-8,ucs-bom,latin1,gb2312,cp936,cp932 \n```\n\n# 对于日文os ，安装gvim后，需要如下设置：\n由于本地ANSI是cp932 , 所以把cp932 放在第一或者第二的位置，\n如果放到第三或者后面就会出现shift_jis编码的日文打开后是文本乱码现象。\n\n```shell\nset encoding=utf-8                                    \"设置gvim内部编码\nset fileencoding=utf-8                               \"设置当前文件编码\nset fileencodings=CP932,utf-8,gbk,,ucs-bom,latin1,gb2312,cp936 #设置支持打开的文件的编码\n\nset termencoding=utf-8\n\nset guifont=DejaVu\\ Sans\\ Mono\\:h13 \nset guifontwide=NSimsun\\:h14  \n#设置新宋体      \n\n```\n\n由于DejaVu Sans Mono 字体是英文字符字体，无法正确显示宽字体，所以需要特别加入\n```shell\nset guifontwide=NSimsun\\:h14 \n#设置新宋体 ，显示汉字\n```\n\n所以大家在自己的sublime 或者vim中设置编辑器字体DejaVu Sans Mono就好像可以显示正确的汉字和英文，其实我们设置的只是英文字符显示的样式。汉字其实是系统本地ANSI编码。\n\n## 本地ANSI编码\n世界上每种语言对应的windows 系统都有各自的ANSI，互相不兼容。\n\n比如 中文ANSI == GBK(中文) ，gbk是gb2312(简体中文)的扩展，包含繁体，日文片假名。cp936就是gbk\n    日文ANSI == Windows-31J  就是cp932. \nshift_jis也是一种日文字符编码,不过，只实现了cp932的部分，所以cp932编码的东东，shift_jis可能乱码。shift_jis编码的，cp932一定正常显示。\n\n这是微软早起应对不同国家一种混合的编码：字母+对应的国家文字,这种字符也是多字节字符。比如：中文ANSI,字母数字是1字节 ,汉字是2字节。两种语言文字有可能在一起就显示乱码。不过微软提供了本地ANSI转换为标准unicode字符的方案，通过代码页转换表技术这一过度方案。\n\n## nnicode编码规范\nunicode 是将全世界所有的字符都统一编码的方案(规范))。那么字符a的编码本来是1byte ,现在统一和一个汉字一样长了。那么问题来了，字符串是'\\0'字符结尾。世界上的很久以前写的c程序，就没办法用了。所以说unicode应该早点出来。\n\n有了这种全字符集，解决了乱码，却没法用，蛋疼吧，可是utf8这一实现字符保存，传输的方案出现了。因为utf8是可变长的。不同位段，长度不一致。 \n\n## utf-8编码\n```html\nUCS-2编码(16进制)   UTF-8 字节流(二进制)\n0000 - 007F         0xxxxxxx\n0080 - 07FF         110xxxxx 10xxxxxx\n0800 - FFFF         1110xxxx 10xxxxxx 10xxxxxx \n \n例如“汉”字的Unicode编码是6C49。6C49在0800-FFFF之间，所以肯定要用3字节模板了：1110xxxx 10xxxxxx 10xxxxxx。将6C49写成二进制是：0110 110001 001001，用这个比特流依次代替模板中的x，得到：11100110 10110001 10001001，即E6 B1 89。\n \n可见UTF-8是变长的，将Unicode编码为00000000-0000007F的字符，用单个字节来表示； 00000080-000007FF的字符用两个字节表示；00000800-0000FFFF的字符用3字节表示。因为目前为止Unicode-16规范没有指定FFFF以上的字符，所以UTF-8最多是使用3个字节来表示一个字符。但理论上来说，UTF-8最多需要用6字节表示一个字符。 \n \nUTF-8兼容ASCII。\n```\n\n#utf16编码\nutf-16 和unicode规范是一致的，所以不兼容ascii。\n以上信息来源参考： ![这里的博客](http://polaris.blog.51cto.com/1146394/377468/)\n","slug":"linux/vim_luanma","published":1,"updated":"2019-05-19T14:18:38.610Z","comments":1,"photos":[],"link":"","_id":"cjwxes5da001ihdlirn8zdhqc","content":"<h1 id=\"首先-中文os下，我们一般的设置是：\"><a href=\"#首先-中文os下，我们一般的设置是：\" class=\"headerlink\" title=\"首先 中文os下，我们一般的设置是：\"></a>首先 中文os下，我们一般的设置是：</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set encoding=utf-8                                \"设置gvim内部编码</span><br><span class=\"line\">set fileencoding=utf-8                               \"设置当前文件编码</span><br><span class=\"line\">set fileencodings=gbk,utf-8,shift_jis,ucs-bom,latin1,gb2312,cp936,cp932    设置支持打开的文件的编码</span><br><span class=\"line\"></span><br><span class=\"line\">set termencoding=utf-8</span><br><span class=\"line\">set guifont=DejaVu\\\\ Sans\\\\ Mono\\\\:h13</span><br></pre></td></tr></table></figure>\n<p>上述，set fileencodings设置的文字编码解析顺位，对于中文是可以解析出来的,shift_jis编码的文件，就会出现乱码。除非你把shift_jis设置第一位：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set fileencodings=shift_jis,gbk,utf-8,ucs-bom,latin1,gb2312,cp936,cp932</span><br></pre></td></tr></table></figure>\n<h1 id=\"对于日文os-，安装gvim后，需要如下设置：\"><a href=\"#对于日文os-，安装gvim后，需要如下设置：\" class=\"headerlink\" title=\"对于日文os ，安装gvim后，需要如下设置：\"></a>对于日文os ，安装gvim后，需要如下设置：</h1><p>由于本地ANSI是cp932 , 所以把cp932 放在第一或者第二的位置，<br>如果放到第三或者后面就会出现shift_jis编码的日文打开后是文本乱码现象。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set encoding=utf-8                                    \"设置gvim内部编码</span><br><span class=\"line\">set fileencoding=utf-8                               \"设置当前文件编码</span><br><span class=\"line\">set fileencodings=CP932,utf-8,gbk,,ucs-bom,latin1,gb2312,cp936 #设置支持打开的文件的编码</span><br><span class=\"line\"></span><br><span class=\"line\">set termencoding=utf-8</span><br><span class=\"line\"></span><br><span class=\"line\">set guifont=DejaVu\\ Sans\\ Mono\\:h13 </span><br><span class=\"line\">set guifontwide=NSimsun\\:h14  </span><br><span class=\"line\"><span class=\"meta\">#</span>设置新宋体</span><br></pre></td></tr></table></figure>\n<p>由于DejaVu Sans Mono 字体是英文字符字体，无法正确显示宽字体，所以需要特别加入<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set guifontwide=NSimsun\\:h14 </span><br><span class=\"line\"><span class=\"meta\">#</span>设置新宋体 ，显示汉字</span><br></pre></td></tr></table></figure></p>\n<p>所以大家在自己的sublime 或者vim中设置编辑器字体DejaVu Sans Mono就好像可以显示正确的汉字和英文，其实我们设置的只是英文字符显示的样式。汉字其实是系统本地ANSI编码。</p>\n<h2 id=\"本地ANSI编码\"><a href=\"#本地ANSI编码\" class=\"headerlink\" title=\"本地ANSI编码\"></a>本地ANSI编码</h2><p>世界上每种语言对应的windows 系统都有各自的ANSI，互相不兼容。</p>\n<p>比如 中文ANSI == GBK(中文) ，gbk是gb2312(简体中文)的扩展，包含繁体，日文片假名。cp936就是gbk<br>    日文ANSI == Windows-31J  就是cp932.<br>shift_jis也是一种日文字符编码,不过，只实现了cp932的部分，所以cp932编码的东东，shift_jis可能乱码。shift_jis编码的，cp932一定正常显示。</p>\n<p>这是微软早起应对不同国家一种混合的编码：字母+对应的国家文字,这种字符也是多字节字符。比如：中文ANSI,字母数字是1字节 ,汉字是2字节。两种语言文字有可能在一起就显示乱码。不过微软提供了本地ANSI转换为标准unicode字符的方案，通过代码页转换表技术这一过度方案。</p>\n<h2 id=\"nnicode编码规范\"><a href=\"#nnicode编码规范\" class=\"headerlink\" title=\"nnicode编码规范\"></a>nnicode编码规范</h2><p>unicode 是将全世界所有的字符都统一编码的方案(规范))。那么字符a的编码本来是1byte ,现在统一和一个汉字一样长了。那么问题来了，字符串是’\\0’字符结尾。世界上的很久以前写的c程序，就没办法用了。所以说unicode应该早点出来。</p>\n<p>有了这种全字符集，解决了乱码，却没法用，蛋疼吧，可是utf8这一实现字符保存，传输的方案出现了。因为utf8是可变长的。不同位段，长度不一致。 </p>\n<h2 id=\"utf-8编码\"><a href=\"#utf-8编码\" class=\"headerlink\" title=\"utf-8编码\"></a>utf-8编码</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UCS-2编码(16进制)   UTF-8 字节流(二进制)</span><br><span class=\"line\">0000 - 007F         0xxxxxxx</span><br><span class=\"line\">0080 - 07FF         110xxxxx 10xxxxxx</span><br><span class=\"line\">0800 - FFFF         1110xxxx 10xxxxxx 10xxxxxx </span><br><span class=\"line\"> </span><br><span class=\"line\">例如“汉”字的Unicode编码是6C49。6C49在0800-FFFF之间，所以肯定要用3字节模板了：1110xxxx 10xxxxxx 10xxxxxx。将6C49写成二进制是：0110 110001 001001，用这个比特流依次代替模板中的x，得到：11100110 10110001 10001001，即E6 B1 89。</span><br><span class=\"line\"> </span><br><span class=\"line\">可见UTF-8是变长的，将Unicode编码为00000000-0000007F的字符，用单个字节来表示； 00000080-000007FF的字符用两个字节表示；00000800-0000FFFF的字符用3字节表示。因为目前为止Unicode-16规范没有指定FFFF以上的字符，所以UTF-8最多是使用3个字节来表示一个字符。但理论上来说，UTF-8最多需要用6字节表示一个字符。 </span><br><span class=\"line\"> </span><br><span class=\"line\">UTF-8兼容ASCII。</span><br></pre></td></tr></table></figure>\n<p>#utf16编码<br>utf-16 和unicode规范是一致的，所以不兼容ascii。<br>以上信息来源参考： <img src=\"http://polaris.blog.51cto.com/1146394/377468/\" alt=\"这里的博客\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"首先-中文os下，我们一般的设置是：\"><a href=\"#首先-中文os下，我们一般的设置是：\" class=\"headerlink\" title=\"首先 中文os下，我们一般的设置是：\"></a>首先 中文os下，我们一般的设置是：</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set encoding=utf-8                                \"设置gvim内部编码</span><br><span class=\"line\">set fileencoding=utf-8                               \"设置当前文件编码</span><br><span class=\"line\">set fileencodings=gbk,utf-8,shift_jis,ucs-bom,latin1,gb2312,cp936,cp932    设置支持打开的文件的编码</span><br><span class=\"line\"></span><br><span class=\"line\">set termencoding=utf-8</span><br><span class=\"line\">set guifont=DejaVu\\\\ Sans\\\\ Mono\\\\:h13</span><br></pre></td></tr></table></figure>\n<p>上述，set fileencodings设置的文字编码解析顺位，对于中文是可以解析出来的,shift_jis编码的文件，就会出现乱码。除非你把shift_jis设置第一位：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set fileencodings=shift_jis,gbk,utf-8,ucs-bom,latin1,gb2312,cp936,cp932</span><br></pre></td></tr></table></figure>\n<h1 id=\"对于日文os-，安装gvim后，需要如下设置：\"><a href=\"#对于日文os-，安装gvim后，需要如下设置：\" class=\"headerlink\" title=\"对于日文os ，安装gvim后，需要如下设置：\"></a>对于日文os ，安装gvim后，需要如下设置：</h1><p>由于本地ANSI是cp932 , 所以把cp932 放在第一或者第二的位置，<br>如果放到第三或者后面就会出现shift_jis编码的日文打开后是文本乱码现象。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set encoding=utf-8                                    \"设置gvim内部编码</span><br><span class=\"line\">set fileencoding=utf-8                               \"设置当前文件编码</span><br><span class=\"line\">set fileencodings=CP932,utf-8,gbk,,ucs-bom,latin1,gb2312,cp936 #设置支持打开的文件的编码</span><br><span class=\"line\"></span><br><span class=\"line\">set termencoding=utf-8</span><br><span class=\"line\"></span><br><span class=\"line\">set guifont=DejaVu\\ Sans\\ Mono\\:h13 </span><br><span class=\"line\">set guifontwide=NSimsun\\:h14  </span><br><span class=\"line\"><span class=\"meta\">#</span>设置新宋体</span><br></pre></td></tr></table></figure>\n<p>由于DejaVu Sans Mono 字体是英文字符字体，无法正确显示宽字体，所以需要特别加入<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set guifontwide=NSimsun\\:h14 </span><br><span class=\"line\"><span class=\"meta\">#</span>设置新宋体 ，显示汉字</span><br></pre></td></tr></table></figure></p>\n<p>所以大家在自己的sublime 或者vim中设置编辑器字体DejaVu Sans Mono就好像可以显示正确的汉字和英文，其实我们设置的只是英文字符显示的样式。汉字其实是系统本地ANSI编码。</p>\n<h2 id=\"本地ANSI编码\"><a href=\"#本地ANSI编码\" class=\"headerlink\" title=\"本地ANSI编码\"></a>本地ANSI编码</h2><p>世界上每种语言对应的windows 系统都有各自的ANSI，互相不兼容。</p>\n<p>比如 中文ANSI == GBK(中文) ，gbk是gb2312(简体中文)的扩展，包含繁体，日文片假名。cp936就是gbk<br>    日文ANSI == Windows-31J  就是cp932.<br>shift_jis也是一种日文字符编码,不过，只实现了cp932的部分，所以cp932编码的东东，shift_jis可能乱码。shift_jis编码的，cp932一定正常显示。</p>\n<p>这是微软早起应对不同国家一种混合的编码：字母+对应的国家文字,这种字符也是多字节字符。比如：中文ANSI,字母数字是1字节 ,汉字是2字节。两种语言文字有可能在一起就显示乱码。不过微软提供了本地ANSI转换为标准unicode字符的方案，通过代码页转换表技术这一过度方案。</p>\n<h2 id=\"nnicode编码规范\"><a href=\"#nnicode编码规范\" class=\"headerlink\" title=\"nnicode编码规范\"></a>nnicode编码规范</h2><p>unicode 是将全世界所有的字符都统一编码的方案(规范))。那么字符a的编码本来是1byte ,现在统一和一个汉字一样长了。那么问题来了，字符串是’\\0’字符结尾。世界上的很久以前写的c程序，就没办法用了。所以说unicode应该早点出来。</p>\n<p>有了这种全字符集，解决了乱码，却没法用，蛋疼吧，可是utf8这一实现字符保存，传输的方案出现了。因为utf8是可变长的。不同位段，长度不一致。 </p>\n<h2 id=\"utf-8编码\"><a href=\"#utf-8编码\" class=\"headerlink\" title=\"utf-8编码\"></a>utf-8编码</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UCS-2编码(16进制)   UTF-8 字节流(二进制)</span><br><span class=\"line\">0000 - 007F         0xxxxxxx</span><br><span class=\"line\">0080 - 07FF         110xxxxx 10xxxxxx</span><br><span class=\"line\">0800 - FFFF         1110xxxx 10xxxxxx 10xxxxxx </span><br><span class=\"line\"> </span><br><span class=\"line\">例如“汉”字的Unicode编码是6C49。6C49在0800-FFFF之间，所以肯定要用3字节模板了：1110xxxx 10xxxxxx 10xxxxxx。将6C49写成二进制是：0110 110001 001001，用这个比特流依次代替模板中的x，得到：11100110 10110001 10001001，即E6 B1 89。</span><br><span class=\"line\"> </span><br><span class=\"line\">可见UTF-8是变长的，将Unicode编码为00000000-0000007F的字符，用单个字节来表示； 00000080-000007FF的字符用两个字节表示；00000800-0000FFFF的字符用3字节表示。因为目前为止Unicode-16规范没有指定FFFF以上的字符，所以UTF-8最多是使用3个字节来表示一个字符。但理论上来说，UTF-8最多需要用6字节表示一个字符。 </span><br><span class=\"line\"> </span><br><span class=\"line\">UTF-8兼容ASCII。</span><br></pre></td></tr></table></figure>\n<p>#utf16编码<br>utf-16 和unicode规范是一致的，所以不兼容ascii。<br>以上信息来源参考： <img src=\"http://polaris.blog.51cto.com/1146394/377468/\" alt=\"这里的博客\"></p>\n"},{"layout":"post","title":"nerdtree插件","date":"2016-10-06T12:07:30.000Z","comments":1,"_content":"\n#nerdtree插件，可以在vim左侧显示目录\n\n## 使用说明\n\n1、在linux命令行界面，输入vim\n\n2、输入 :NERDTree ，回车\n\n3、进入当前目录的树形界面，通过小键盘上下键，能移动选中的目录或文件\n\n4、目录前面有+或者>号，摁Enter会展开目录，文件前面是-号，摁Enter会在右侧窗口展现该文件的内容，光标自动移到右侧文件窗口。\n\n5、ctr+w+h 光标移到左侧树形目录，ctrl+w+l 光标移到右侧文件显示窗口。多次摁 ctrl+w，光标自动在左右侧窗口切换\n\n6、光标focus左侧树形窗口，摁? 弹出NERDTree的帮助，再次摁？关闭帮助显示\n\n7、输入:q回车，关闭光标所在窗口\n\n \n\n## 进阶用法\n\no 打开关闭文件或者目录\nt 在标签页中打开\nT 在后台标签页中打开\n! 执行此文件\np 到上层目录\nP 到根目录\nK 到第一个节点\nJ 到最后一个节点\nu 打开上层目录\nm 显示文件系统菜单（添加、删除、移动操作）\n? 帮助\nq 关闭\n","source":"_posts/linux/vim_nerdtree.md","raw":"---\nlayout: post\ntitle: nerdtree插件\ncategory: vim\ndate: 2016-10-6 20:07:30\ntags: vim\ncomments: true\n\n---\n\n#nerdtree插件，可以在vim左侧显示目录\n\n## 使用说明\n\n1、在linux命令行界面，输入vim\n\n2、输入 :NERDTree ，回车\n\n3、进入当前目录的树形界面，通过小键盘上下键，能移动选中的目录或文件\n\n4、目录前面有+或者>号，摁Enter会展开目录，文件前面是-号，摁Enter会在右侧窗口展现该文件的内容，光标自动移到右侧文件窗口。\n\n5、ctr+w+h 光标移到左侧树形目录，ctrl+w+l 光标移到右侧文件显示窗口。多次摁 ctrl+w，光标自动在左右侧窗口切换\n\n6、光标focus左侧树形窗口，摁? 弹出NERDTree的帮助，再次摁？关闭帮助显示\n\n7、输入:q回车，关闭光标所在窗口\n\n \n\n## 进阶用法\n\no 打开关闭文件或者目录\nt 在标签页中打开\nT 在后台标签页中打开\n! 执行此文件\np 到上层目录\nP 到根目录\nK 到第一个节点\nJ 到最后一个节点\nu 打开上层目录\nm 显示文件系统菜单（添加、删除、移动操作）\n? 帮助\nq 关闭\n","slug":"linux/vim_nerdtree","published":1,"updated":"2019-05-19T14:18:38.611Z","photos":[],"link":"","_id":"cjwxes5dc001mhdlij3d4yzze","content":"<p>#nerdtree插件，可以在vim左侧显示目录</p>\n<h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><p>1、在linux命令行界面，输入vim</p>\n<p>2、输入 :NERDTree ，回车</p>\n<p>3、进入当前目录的树形界面，通过小键盘上下键，能移动选中的目录或文件</p>\n<p>4、目录前面有+或者&gt;号，摁Enter会展开目录，文件前面是-号，摁Enter会在右侧窗口展现该文件的内容，光标自动移到右侧文件窗口。</p>\n<p>5、ctr+w+h 光标移到左侧树形目录，ctrl+w+l 光标移到右侧文件显示窗口。多次摁 ctrl+w，光标自动在左右侧窗口切换</p>\n<p>6、光标focus左侧树形窗口，摁? 弹出NERDTree的帮助，再次摁？关闭帮助显示</p>\n<p>7、输入:q回车，关闭光标所在窗口</p>\n<h2 id=\"进阶用法\"><a href=\"#进阶用法\" class=\"headerlink\" title=\"进阶用法\"></a>进阶用法</h2><p>o 打开关闭文件或者目录<br>t 在标签页中打开<br>T 在后台标签页中打开<br>! 执行此文件<br>p 到上层目录<br>P 到根目录<br>K 到第一个节点<br>J 到最后一个节点<br>u 打开上层目录<br>m 显示文件系统菜单（添加、删除、移动操作）<br>? 帮助<br>q 关闭</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#nerdtree插件，可以在vim左侧显示目录</p>\n<h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><p>1、在linux命令行界面，输入vim</p>\n<p>2、输入 :NERDTree ，回车</p>\n<p>3、进入当前目录的树形界面，通过小键盘上下键，能移动选中的目录或文件</p>\n<p>4、目录前面有+或者&gt;号，摁Enter会展开目录，文件前面是-号，摁Enter会在右侧窗口展现该文件的内容，光标自动移到右侧文件窗口。</p>\n<p>5、ctr+w+h 光标移到左侧树形目录，ctrl+w+l 光标移到右侧文件显示窗口。多次摁 ctrl+w，光标自动在左右侧窗口切换</p>\n<p>6、光标focus左侧树形窗口，摁? 弹出NERDTree的帮助，再次摁？关闭帮助显示</p>\n<p>7、输入:q回车，关闭光标所在窗口</p>\n<h2 id=\"进阶用法\"><a href=\"#进阶用法\" class=\"headerlink\" title=\"进阶用法\"></a>进阶用法</h2><p>o 打开关闭文件或者目录<br>t 在标签页中打开<br>T 在后台标签页中打开<br>! 执行此文件<br>p 到上层目录<br>P 到根目录<br>K 到第一个节点<br>J 到最后一个节点<br>u 打开上层目录<br>m 显示文件系统菜单（添加、删除、移动操作）<br>? 帮助<br>q 关闭</p>\n"},{"layout":"post","title":"syntastic vim  静态分析插件","date":"2016-10-05T12:10:30.000Z","comments":1,"_content":"\n# syntastic vim  静态分析插件，里面带有各种语言的分析工具，是为了代码补全提示\n\n```html\n配置如下：\n_vimrc文件加入：\nBundle 'scrooloose/syntastic'\n打开vim： BundleInstall 安装插件。\n配置如下：\nlet g:syntastic_error_symbol='>>'\nlet g:syntastic_warning_symbol='>'\nlet g:syntastic_check_on_open=1\nlet g:syntastic_check_on_wq=0\nlet g:syntastic_enable_highlighting=1\n#下面一行是指定使用哪种工具分析python语法和javascript语法\nlet g:syntastic_python_checkers=['pyflakes'] \" 使用pyflakes,速度比pylint快\nlet g:syntastic_javascript_checkers = ['jsl', 'jshint']\nlet g:syntastic_html_checkers=['tidy', 'jshint']\n\n```\n","source":"_posts/linux/vim_syntastic.md","raw":"---\nlayout: post\ntitle: syntastic vim  静态分析插件\ncategory: vim\ntags: vim\ndate: 2016-10-5 20:10:30\ncomments: true\n\n---\n\n# syntastic vim  静态分析插件，里面带有各种语言的分析工具，是为了代码补全提示\n\n```html\n配置如下：\n_vimrc文件加入：\nBundle 'scrooloose/syntastic'\n打开vim： BundleInstall 安装插件。\n配置如下：\nlet g:syntastic_error_symbol='>>'\nlet g:syntastic_warning_symbol='>'\nlet g:syntastic_check_on_open=1\nlet g:syntastic_check_on_wq=0\nlet g:syntastic_enable_highlighting=1\n#下面一行是指定使用哪种工具分析python语法和javascript语法\nlet g:syntastic_python_checkers=['pyflakes'] \" 使用pyflakes,速度比pylint快\nlet g:syntastic_javascript_checkers = ['jsl', 'jshint']\nlet g:syntastic_html_checkers=['tidy', 'jshint']\n\n```\n","slug":"linux/vim_syntastic","published":1,"updated":"2019-05-19T14:18:38.611Z","photos":[],"link":"","_id":"cjwxes5dd001ohdliqql5ax6j","content":"<h1 id=\"syntastic-vim-静态分析插件，里面带有各种语言的分析工具，是为了代码补全提示\"><a href=\"#syntastic-vim-静态分析插件，里面带有各种语言的分析工具，是为了代码补全提示\" class=\"headerlink\" title=\"syntastic vim  静态分析插件，里面带有各种语言的分析工具，是为了代码补全提示\"></a>syntastic vim  静态分析插件，里面带有各种语言的分析工具，是为了代码补全提示</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">配置如下：</span><br><span class=\"line\">_vimrc文件加入：</span><br><span class=\"line\">Bundle 'scrooloose/syntastic'</span><br><span class=\"line\">打开vim： BundleInstall 安装插件。</span><br><span class=\"line\">配置如下：</span><br><span class=\"line\">let g:syntastic_error_symbol='&gt;&gt;'</span><br><span class=\"line\">let g:syntastic_warning_symbol='&gt;'</span><br><span class=\"line\">let g:syntastic_check_on_open=1</span><br><span class=\"line\">let g:syntastic_check_on_wq=0</span><br><span class=\"line\">let g:syntastic_enable_highlighting=1</span><br><span class=\"line\">#下面一行是指定使用哪种工具分析python语法和javascript语法</span><br><span class=\"line\">let g:syntastic_python_checkers=['pyflakes'] \" 使用pyflakes,速度比pylint快</span><br><span class=\"line\">let g:syntastic_javascript_checkers = ['jsl', 'jshint']</span><br><span class=\"line\">let g:syntastic_html_checkers=['tidy', 'jshint']</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"syntastic-vim-静态分析插件，里面带有各种语言的分析工具，是为了代码补全提示\"><a href=\"#syntastic-vim-静态分析插件，里面带有各种语言的分析工具，是为了代码补全提示\" class=\"headerlink\" title=\"syntastic vim  静态分析插件，里面带有各种语言的分析工具，是为了代码补全提示\"></a>syntastic vim  静态分析插件，里面带有各种语言的分析工具，是为了代码补全提示</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">配置如下：</span><br><span class=\"line\">_vimrc文件加入：</span><br><span class=\"line\">Bundle 'scrooloose/syntastic'</span><br><span class=\"line\">打开vim： BundleInstall 安装插件。</span><br><span class=\"line\">配置如下：</span><br><span class=\"line\">let g:syntastic_error_symbol='&gt;&gt;'</span><br><span class=\"line\">let g:syntastic_warning_symbol='&gt;'</span><br><span class=\"line\">let g:syntastic_check_on_open=1</span><br><span class=\"line\">let g:syntastic_check_on_wq=0</span><br><span class=\"line\">let g:syntastic_enable_highlighting=1</span><br><span class=\"line\">#下面一行是指定使用哪种工具分析python语法和javascript语法</span><br><span class=\"line\">let g:syntastic_python_checkers=['pyflakes'] \" 使用pyflakes,速度比pylint快</span><br><span class=\"line\">let g:syntastic_javascript_checkers = ['jsl', 'jshint']</span><br><span class=\"line\">let g:syntastic_html_checkers=['tidy', 'jshint']</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"windows时间的处理","date":"2016-06-28T06:33:59.000Z","comments":1,"_content":"\n# windows时间的处理：\n\n## 系统时间：\n UTC时间（格林威治时间）,世界标准时间，北京时间是UTC+8\n\n## 本地时间：\n UTC时间+时区偏差，就是计算机右下角显示的时间\n\n## 文件时间：类型有三种\n 1.创建时间\n \n 2.访问时间\n \n 3.修改时间\n \n文件时间是：\n \n 64位的值记录了自1601年1月1日0点以来的以100纳秒（ns）为单位的格林威治时间间隔，我们鼠标右键查看文件属性，看到的是这个间隔加上时区差的，并且显示格式的SYSTEM结构体形式(年月日的形式)，不是FILETIME结构体形式（两个DWORD成员）。所以看起来跟本地时间差别不大。\n\n#  基本概念\n先来看看这两个结构体的定义：\n\n### FILETIME结构体:\n```cpp\ntypedef struct _FILETIME {\n    DWORDdwLowDateTime;\n    DWORDdwHighDateTime;\n} FILETIME, *PFILETIME, *LPFILETIME;\n```\n它在MSDN上的说明——Contains a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC时间).\n\n### SYSTEMTIME结构体：\n```cpp\ntypedef struct _SYSTEMTIME {\n\n    WORDwYear;\n\n    WORDwMonth;\n\n    WORDwDayOfWeek;\n\n    WORDwDay;\n\n    WORDwHour;\n\n    WORDwMinute;\n\n    WORDwSecond;\n\n    WORDwMilliseconds;\n\n} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;\n```\n\n### 代码示例\n\n ```c\n #include \"stdafx.h\"\n#include <windows.h>  \n#include <stdio.h>  \n//#include <conio.h>  \n\nclass CLocaltimeAndFiletime  \n{  \npublic:  \n    static void GetCurrentLocalTime(char *pstrDate, char *pstrTime);  \n    static void FileTimeToLocalTime(FILETIME &ft, char *pstrDate, char *pstrTime);  \n};  \n\n//取得：本地时间 = UTC+8（北京的）  //UTC是系统时间\nvoid CLocaltimeAndFiletime::GetCurrentLocalTime(char *pstrDate, char *pstrTime)  \n{  \n    SYSTEMTIME st;  \n    GetLocalTime(&st);  //取得本地时间\n\t//getsystemtime(&st) //依据所在时区，和本地时间，推算出UTC时间=本地-8小时\n    if (pstrDate != NULL)  \n        sprintf(pstrDate, \"%d-%d-%d\", st.wYear, st.wMonth, st.wDay);  \n    if (pstrTime != NULL)  \n        sprintf(pstrTime, \"%02d:%02d:%02d\", st.wHour, st.wMinute, st.wSecond);  \n}  \n\n//把一个64e位的文件时间（三种类型，创建/访问/修改），转换成SYSTEEMTIME结构类型\nvoid CLocaltimeAndFiletime::FileTimeToLocalTime(FILETIME &ft, char *pstrDate, char *pstrTime)  \n{  \n    FILETIME localft;  //文件时间是1601年--目前的UTC时间的差（64位整数），转换成UTC+本地时区的64位值，\n    FileTimeToLocalFileTime(&ft, &localft);  \n    SYSTEMTIME st;  \n    FileTimeToSystemTime(&localft, &st);  //转换成年月日形式\n\t\n    if (pstrDate != NULL)  \n        sprintf(pstrDate, \"%d-%d-%d\", st.wYear, st.wMonth, st.wDay);  \n    if (pstrTime != NULL)  \n        sprintf(pstrTime, \"%02d:%02d:%02d\", st.wHour, st.wMinute, st.wSecond);  \n}  \n\n\nint main(int argc, char *argv[])  \n{  \n    printf(\"windows(FILETIME和SYSTEMTIME) \\n\");          \n    \n    const int MAX_LEN = 30;  \n    char strDate[MAX_LEN], strTime[MAX_LEN];  \n    CLocaltimeAndFiletime::GetCurrentLocalTime(strDate, strTime);  \n    printf(\"current: %s %s\\n\", strDate, strTime);  \n\t\n    const char* pstrFileName = \"C:\\\\1.html\";  \n    printf(\"文件名：%s\\n\", pstrFileName);  \n    //打开一个文件取得句柄，利用这个句柄取得文件的时间属性（创建，访问，修改）\n    HANDLE handleFile = CreateFile(pstrFileName, GENERIC_READ,   \n        FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);  \n    FILETIME ftCreationTime, ftLastAccessTime, ftLastWriteTime;  \n    //取得时间属性\n    GetFileTime(handleFile, &ftCreationTime, &ftLastAccessTime, &ftLastWriteTime);  \n    //转换创建时间\n    CLocaltimeAndFiletime::FileTimeToLocalTime(ftCreationTime, strDate, strTime);  \n    printf(\"create: %s %s\\n\", strDate, strTime);  \n    //转换最后一次访问时间\n    CLocaltimeAndFiletime::FileTimeToLocalTime(ftLastAccessTime, strDate, strTime);  \n    printf(\"access: %s %s\\n\", strDate, strTime);\n    //转换修改时间\n    CLocaltimeAndFiletime::FileTimeToLocalTime(ftLastWriteTime, strDate, strTime);  \n    printf(\"modify: %s %s\\n\", strDate, strTime);  \n    //getch();  \n    return 0;  \n}  \n ```\n","source":"_posts/linux/win_time_func.md","raw":"---\nlayout: post\ntitle: windows时间的处理\ncategory: windows\ntags: c++\ndate: 2016-06-28 14:33:59\ncomments: true\n\n---\n\n# windows时间的处理：\n\n## 系统时间：\n UTC时间（格林威治时间）,世界标准时间，北京时间是UTC+8\n\n## 本地时间：\n UTC时间+时区偏差，就是计算机右下角显示的时间\n\n## 文件时间：类型有三种\n 1.创建时间\n \n 2.访问时间\n \n 3.修改时间\n \n文件时间是：\n \n 64位的值记录了自1601年1月1日0点以来的以100纳秒（ns）为单位的格林威治时间间隔，我们鼠标右键查看文件属性，看到的是这个间隔加上时区差的，并且显示格式的SYSTEM结构体形式(年月日的形式)，不是FILETIME结构体形式（两个DWORD成员）。所以看起来跟本地时间差别不大。\n\n#  基本概念\n先来看看这两个结构体的定义：\n\n### FILETIME结构体:\n```cpp\ntypedef struct _FILETIME {\n    DWORDdwLowDateTime;\n    DWORDdwHighDateTime;\n} FILETIME, *PFILETIME, *LPFILETIME;\n```\n它在MSDN上的说明——Contains a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC时间).\n\n### SYSTEMTIME结构体：\n```cpp\ntypedef struct _SYSTEMTIME {\n\n    WORDwYear;\n\n    WORDwMonth;\n\n    WORDwDayOfWeek;\n\n    WORDwDay;\n\n    WORDwHour;\n\n    WORDwMinute;\n\n    WORDwSecond;\n\n    WORDwMilliseconds;\n\n} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;\n```\n\n### 代码示例\n\n ```c\n #include \"stdafx.h\"\n#include <windows.h>  \n#include <stdio.h>  \n//#include <conio.h>  \n\nclass CLocaltimeAndFiletime  \n{  \npublic:  \n    static void GetCurrentLocalTime(char *pstrDate, char *pstrTime);  \n    static void FileTimeToLocalTime(FILETIME &ft, char *pstrDate, char *pstrTime);  \n};  \n\n//取得：本地时间 = UTC+8（北京的）  //UTC是系统时间\nvoid CLocaltimeAndFiletime::GetCurrentLocalTime(char *pstrDate, char *pstrTime)  \n{  \n    SYSTEMTIME st;  \n    GetLocalTime(&st);  //取得本地时间\n\t//getsystemtime(&st) //依据所在时区，和本地时间，推算出UTC时间=本地-8小时\n    if (pstrDate != NULL)  \n        sprintf(pstrDate, \"%d-%d-%d\", st.wYear, st.wMonth, st.wDay);  \n    if (pstrTime != NULL)  \n        sprintf(pstrTime, \"%02d:%02d:%02d\", st.wHour, st.wMinute, st.wSecond);  \n}  \n\n//把一个64e位的文件时间（三种类型，创建/访问/修改），转换成SYSTEEMTIME结构类型\nvoid CLocaltimeAndFiletime::FileTimeToLocalTime(FILETIME &ft, char *pstrDate, char *pstrTime)  \n{  \n    FILETIME localft;  //文件时间是1601年--目前的UTC时间的差（64位整数），转换成UTC+本地时区的64位值，\n    FileTimeToLocalFileTime(&ft, &localft);  \n    SYSTEMTIME st;  \n    FileTimeToSystemTime(&localft, &st);  //转换成年月日形式\n\t\n    if (pstrDate != NULL)  \n        sprintf(pstrDate, \"%d-%d-%d\", st.wYear, st.wMonth, st.wDay);  \n    if (pstrTime != NULL)  \n        sprintf(pstrTime, \"%02d:%02d:%02d\", st.wHour, st.wMinute, st.wSecond);  \n}  \n\n\nint main(int argc, char *argv[])  \n{  \n    printf(\"windows(FILETIME和SYSTEMTIME) \\n\");          \n    \n    const int MAX_LEN = 30;  \n    char strDate[MAX_LEN], strTime[MAX_LEN];  \n    CLocaltimeAndFiletime::GetCurrentLocalTime(strDate, strTime);  \n    printf(\"current: %s %s\\n\", strDate, strTime);  \n\t\n    const char* pstrFileName = \"C:\\\\1.html\";  \n    printf(\"文件名：%s\\n\", pstrFileName);  \n    //打开一个文件取得句柄，利用这个句柄取得文件的时间属性（创建，访问，修改）\n    HANDLE handleFile = CreateFile(pstrFileName, GENERIC_READ,   \n        FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);  \n    FILETIME ftCreationTime, ftLastAccessTime, ftLastWriteTime;  \n    //取得时间属性\n    GetFileTime(handleFile, &ftCreationTime, &ftLastAccessTime, &ftLastWriteTime);  \n    //转换创建时间\n    CLocaltimeAndFiletime::FileTimeToLocalTime(ftCreationTime, strDate, strTime);  \n    printf(\"create: %s %s\\n\", strDate, strTime);  \n    //转换最后一次访问时间\n    CLocaltimeAndFiletime::FileTimeToLocalTime(ftLastAccessTime, strDate, strTime);  \n    printf(\"access: %s %s\\n\", strDate, strTime);\n    //转换修改时间\n    CLocaltimeAndFiletime::FileTimeToLocalTime(ftLastWriteTime, strDate, strTime);  \n    printf(\"modify: %s %s\\n\", strDate, strTime);  \n    //getch();  \n    return 0;  \n}  \n ```\n","slug":"linux/win_time_func","published":1,"updated":"2019-05-19T14:30:17.033Z","photos":[],"link":"","_id":"cjwxes5de001shdlil4n4ogvs","content":"<h1 id=\"windows时间的处理：\"><a href=\"#windows时间的处理：\" class=\"headerlink\" title=\"windows时间的处理：\"></a>windows时间的处理：</h1><h2 id=\"系统时间：\"><a href=\"#系统时间：\" class=\"headerlink\" title=\"系统时间：\"></a>系统时间：</h2><p> UTC时间（格林威治时间）,世界标准时间，北京时间是UTC+8</p>\n<h2 id=\"本地时间：\"><a href=\"#本地时间：\" class=\"headerlink\" title=\"本地时间：\"></a>本地时间：</h2><p> UTC时间+时区偏差，就是计算机右下角显示的时间</p>\n<h2 id=\"文件时间：类型有三种\"><a href=\"#文件时间：类型有三种\" class=\"headerlink\" title=\"文件时间：类型有三种\"></a>文件时间：类型有三种</h2><p> 1.创建时间</p>\n<p> 2.访问时间</p>\n<p> 3.修改时间</p>\n<p>文件时间是：</p>\n<p> 64位的值记录了自1601年1月1日0点以来的以100纳秒（ns）为单位的格林威治时间间隔，我们鼠标右键查看文件属性，看到的是这个间隔加上时区差的，并且显示格式的SYSTEM结构体形式(年月日的形式)，不是FILETIME结构体形式（两个DWORD成员）。所以看起来跟本地时间差别不大。</p>\n<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><p>先来看看这两个结构体的定义：</p>\n<h3 id=\"FILETIME结构体\"><a href=\"#FILETIME结构体\" class=\"headerlink\" title=\"FILETIME结构体:\"></a>FILETIME结构体:</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">FILETIME</span> &#123;</span></span><br><span class=\"line\">    DWORDdwLowDateTime;</span><br><span class=\"line\">    DWORDdwHighDateTime;</span><br><span class=\"line\">&#125; FILETIME, *PFILETIME, *LPFILETIME;</span><br></pre></td></tr></table></figure>\n<p>它在MSDN上的说明——Contains a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC时间).</p>\n<h3 id=\"SYSTEMTIME结构体：\"><a href=\"#SYSTEMTIME结构体：\" class=\"headerlink\" title=\"SYSTEMTIME结构体：\"></a>SYSTEMTIME结构体：</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">SYSTEMTIME</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    WORDwYear;</span><br><span class=\"line\"></span><br><span class=\"line\">    WORDwMonth;</span><br><span class=\"line\"></span><br><span class=\"line\">    WORDwDayOfWeek;</span><br><span class=\"line\"></span><br><span class=\"line\">    WORDwDay;</span><br><span class=\"line\"></span><br><span class=\"line\">    WORDwHour;</span><br><span class=\"line\"></span><br><span class=\"line\">    WORDwMinute;</span><br><span class=\"line\"></span><br><span class=\"line\">    WORDwSecond;</span><br><span class=\"line\"></span><br><span class=\"line\">    WORDwMilliseconds;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;</span><br></pre></td></tr></table></figure>\n<h3 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3> <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdafx.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;windows.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"comment\">//#include &lt;conio.h&gt;  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CLocaltimeAndFiletime</span>  </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">GetCurrentLocalTime</span><span class=\"params\">(<span class=\"keyword\">char</span> *pstrDate, <span class=\"keyword\">char</span> *pstrTime)</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">FileTimeToLocalTime</span><span class=\"params\">(FILETIME &amp;ft, <span class=\"keyword\">char</span> *pstrDate, <span class=\"keyword\">char</span> *pstrTime)</span></span>;  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//取得：本地时间 = UTC+8（北京的）  //UTC是系统时间</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> CLocaltimeAndFiletime::GetCurrentLocalTime(<span class=\"keyword\">char</span> *pstrDate, <span class=\"keyword\">char</span> *pstrTime)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    SYSTEMTIME st;  </span><br><span class=\"line\">    GetLocalTime(&amp;st);  <span class=\"comment\">//取得本地时间</span></span><br><span class=\"line\">\t<span class=\"comment\">//getsystemtime(&amp;st) //依据所在时区，和本地时间，推算出UTC时间=本地-8小时</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pstrDate != <span class=\"literal\">NULL</span>)  </span><br><span class=\"line\">        <span class=\"built_in\">sprintf</span>(pstrDate, <span class=\"string\">\"%d-%d-%d\"</span>, st.wYear, st.wMonth, st.wDay);  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pstrTime != <span class=\"literal\">NULL</span>)  </span><br><span class=\"line\">        <span class=\"built_in\">sprintf</span>(pstrTime, <span class=\"string\">\"%02d:%02d:%02d\"</span>, st.wHour, st.wMinute, st.wSecond);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把一个64e位的文件时间（三种类型，创建/访问/修改），转换成SYSTEEMTIME结构类型</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> CLocaltimeAndFiletime::FileTimeToLocalTime(FILETIME &amp;ft, <span class=\"keyword\">char</span> *pstrDate, <span class=\"keyword\">char</span> *pstrTime)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    FILETIME localft;  <span class=\"comment\">//文件时间是1601年--目前的UTC时间的差（64位整数），转换成UTC+本地时区的64位值，</span></span><br><span class=\"line\">    FileTimeToLocalFileTime(&amp;ft, &amp;localft);  </span><br><span class=\"line\">    SYSTEMTIME st;  </span><br><span class=\"line\">    FileTimeToSystemTime(&amp;localft, &amp;st);  <span class=\"comment\">//转换成年月日形式</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pstrDate != <span class=\"literal\">NULL</span>)  </span><br><span class=\"line\">        <span class=\"built_in\">sprintf</span>(pstrDate, <span class=\"string\">\"%d-%d-%d\"</span>, st.wYear, st.wMonth, st.wDay);  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pstrTime != <span class=\"literal\">NULL</span>)  </span><br><span class=\"line\">        <span class=\"built_in\">sprintf</span>(pstrTime, <span class=\"string\">\"%02d:%02d:%02d\"</span>, st.wHour, st.wMinute, st.wSecond);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"windows(FILETIME和SYSTEMTIME) \\n\"</span>);          </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_LEN = <span class=\"number\">30</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> strDate[MAX_LEN], strTime[MAX_LEN];  </span><br><span class=\"line\">    CLocaltimeAndFiletime::GetCurrentLocalTime(strDate, strTime);  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"current: %s %s\\n\"</span>, strDate, strTime);  </span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pstrFileName = <span class=\"string\">\"C:\\\\1.html\"</span>;  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"文件名：%s\\n\"</span>, pstrFileName);  </span><br><span class=\"line\">    <span class=\"comment\">//打开一个文件取得句柄，利用这个句柄取得文件的时间属性（创建，访问，修改）</span></span><br><span class=\"line\">    HANDLE handleFile = CreateFile(pstrFileName, GENERIC_READ,   </span><br><span class=\"line\">        FILE_SHARE_READ, <span class=\"literal\">NULL</span>, OPEN_EXISTING, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);  </span><br><span class=\"line\">    FILETIME ftCreationTime, ftLastAccessTime, ftLastWriteTime;  </span><br><span class=\"line\">    <span class=\"comment\">//取得时间属性</span></span><br><span class=\"line\">    GetFileTime(handleFile, &amp;ftCreationTime, &amp;ftLastAccessTime, &amp;ftLastWriteTime);  </span><br><span class=\"line\">    <span class=\"comment\">//转换创建时间</span></span><br><span class=\"line\">    CLocaltimeAndFiletime::FileTimeToLocalTime(ftCreationTime, strDate, strTime);  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"create: %s %s\\n\"</span>, strDate, strTime);  </span><br><span class=\"line\">    <span class=\"comment\">//转换最后一次访问时间</span></span><br><span class=\"line\">    CLocaltimeAndFiletime::FileTimeToLocalTime(ftLastAccessTime, strDate, strTime);  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"access: %s %s\\n\"</span>, strDate, strTime);</span><br><span class=\"line\">    <span class=\"comment\">//转换修改时间</span></span><br><span class=\"line\">    CLocaltimeAndFiletime::FileTimeToLocalTime(ftLastWriteTime, strDate, strTime);  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"modify: %s %s\\n\"</span>, strDate, strTime);  </span><br><span class=\"line\">    <span class=\"comment\">//getch();  </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"windows时间的处理：\"><a href=\"#windows时间的处理：\" class=\"headerlink\" title=\"windows时间的处理：\"></a>windows时间的处理：</h1><h2 id=\"系统时间：\"><a href=\"#系统时间：\" class=\"headerlink\" title=\"系统时间：\"></a>系统时间：</h2><p> UTC时间（格林威治时间）,世界标准时间，北京时间是UTC+8</p>\n<h2 id=\"本地时间：\"><a href=\"#本地时间：\" class=\"headerlink\" title=\"本地时间：\"></a>本地时间：</h2><p> UTC时间+时区偏差，就是计算机右下角显示的时间</p>\n<h2 id=\"文件时间：类型有三种\"><a href=\"#文件时间：类型有三种\" class=\"headerlink\" title=\"文件时间：类型有三种\"></a>文件时间：类型有三种</h2><p> 1.创建时间</p>\n<p> 2.访问时间</p>\n<p> 3.修改时间</p>\n<p>文件时间是：</p>\n<p> 64位的值记录了自1601年1月1日0点以来的以100纳秒（ns）为单位的格林威治时间间隔，我们鼠标右键查看文件属性，看到的是这个间隔加上时区差的，并且显示格式的SYSTEM结构体形式(年月日的形式)，不是FILETIME结构体形式（两个DWORD成员）。所以看起来跟本地时间差别不大。</p>\n<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><p>先来看看这两个结构体的定义：</p>\n<h3 id=\"FILETIME结构体\"><a href=\"#FILETIME结构体\" class=\"headerlink\" title=\"FILETIME结构体:\"></a>FILETIME结构体:</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">FILETIME</span> &#123;</span></span><br><span class=\"line\">    DWORDdwLowDateTime;</span><br><span class=\"line\">    DWORDdwHighDateTime;</span><br><span class=\"line\">&#125; FILETIME, *PFILETIME, *LPFILETIME;</span><br></pre></td></tr></table></figure>\n<p>它在MSDN上的说明——Contains a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC时间).</p>\n<h3 id=\"SYSTEMTIME结构体：\"><a href=\"#SYSTEMTIME结构体：\" class=\"headerlink\" title=\"SYSTEMTIME结构体：\"></a>SYSTEMTIME结构体：</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">SYSTEMTIME</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    WORDwYear;</span><br><span class=\"line\"></span><br><span class=\"line\">    WORDwMonth;</span><br><span class=\"line\"></span><br><span class=\"line\">    WORDwDayOfWeek;</span><br><span class=\"line\"></span><br><span class=\"line\">    WORDwDay;</span><br><span class=\"line\"></span><br><span class=\"line\">    WORDwHour;</span><br><span class=\"line\"></span><br><span class=\"line\">    WORDwMinute;</span><br><span class=\"line\"></span><br><span class=\"line\">    WORDwSecond;</span><br><span class=\"line\"></span><br><span class=\"line\">    WORDwMilliseconds;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;</span><br></pre></td></tr></table></figure>\n<h3 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3> <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdafx.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;windows.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"comment\">//#include &lt;conio.h&gt;  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CLocaltimeAndFiletime</span>  </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">GetCurrentLocalTime</span><span class=\"params\">(<span class=\"keyword\">char</span> *pstrDate, <span class=\"keyword\">char</span> *pstrTime)</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">FileTimeToLocalTime</span><span class=\"params\">(FILETIME &amp;ft, <span class=\"keyword\">char</span> *pstrDate, <span class=\"keyword\">char</span> *pstrTime)</span></span>;  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//取得：本地时间 = UTC+8（北京的）  //UTC是系统时间</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> CLocaltimeAndFiletime::GetCurrentLocalTime(<span class=\"keyword\">char</span> *pstrDate, <span class=\"keyword\">char</span> *pstrTime)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    SYSTEMTIME st;  </span><br><span class=\"line\">    GetLocalTime(&amp;st);  <span class=\"comment\">//取得本地时间</span></span><br><span class=\"line\">\t<span class=\"comment\">//getsystemtime(&amp;st) //依据所在时区，和本地时间，推算出UTC时间=本地-8小时</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pstrDate != <span class=\"literal\">NULL</span>)  </span><br><span class=\"line\">        <span class=\"built_in\">sprintf</span>(pstrDate, <span class=\"string\">\"%d-%d-%d\"</span>, st.wYear, st.wMonth, st.wDay);  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pstrTime != <span class=\"literal\">NULL</span>)  </span><br><span class=\"line\">        <span class=\"built_in\">sprintf</span>(pstrTime, <span class=\"string\">\"%02d:%02d:%02d\"</span>, st.wHour, st.wMinute, st.wSecond);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把一个64e位的文件时间（三种类型，创建/访问/修改），转换成SYSTEEMTIME结构类型</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> CLocaltimeAndFiletime::FileTimeToLocalTime(FILETIME &amp;ft, <span class=\"keyword\">char</span> *pstrDate, <span class=\"keyword\">char</span> *pstrTime)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    FILETIME localft;  <span class=\"comment\">//文件时间是1601年--目前的UTC时间的差（64位整数），转换成UTC+本地时区的64位值，</span></span><br><span class=\"line\">    FileTimeToLocalFileTime(&amp;ft, &amp;localft);  </span><br><span class=\"line\">    SYSTEMTIME st;  </span><br><span class=\"line\">    FileTimeToSystemTime(&amp;localft, &amp;st);  <span class=\"comment\">//转换成年月日形式</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pstrDate != <span class=\"literal\">NULL</span>)  </span><br><span class=\"line\">        <span class=\"built_in\">sprintf</span>(pstrDate, <span class=\"string\">\"%d-%d-%d\"</span>, st.wYear, st.wMonth, st.wDay);  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pstrTime != <span class=\"literal\">NULL</span>)  </span><br><span class=\"line\">        <span class=\"built_in\">sprintf</span>(pstrTime, <span class=\"string\">\"%02d:%02d:%02d\"</span>, st.wHour, st.wMinute, st.wSecond);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"windows(FILETIME和SYSTEMTIME) \\n\"</span>);          </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_LEN = <span class=\"number\">30</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> strDate[MAX_LEN], strTime[MAX_LEN];  </span><br><span class=\"line\">    CLocaltimeAndFiletime::GetCurrentLocalTime(strDate, strTime);  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"current: %s %s\\n\"</span>, strDate, strTime);  </span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pstrFileName = <span class=\"string\">\"C:\\\\1.html\"</span>;  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"文件名：%s\\n\"</span>, pstrFileName);  </span><br><span class=\"line\">    <span class=\"comment\">//打开一个文件取得句柄，利用这个句柄取得文件的时间属性（创建，访问，修改）</span></span><br><span class=\"line\">    HANDLE handleFile = CreateFile(pstrFileName, GENERIC_READ,   </span><br><span class=\"line\">        FILE_SHARE_READ, <span class=\"literal\">NULL</span>, OPEN_EXISTING, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);  </span><br><span class=\"line\">    FILETIME ftCreationTime, ftLastAccessTime, ftLastWriteTime;  </span><br><span class=\"line\">    <span class=\"comment\">//取得时间属性</span></span><br><span class=\"line\">    GetFileTime(handleFile, &amp;ftCreationTime, &amp;ftLastAccessTime, &amp;ftLastWriteTime);  </span><br><span class=\"line\">    <span class=\"comment\">//转换创建时间</span></span><br><span class=\"line\">    CLocaltimeAndFiletime::FileTimeToLocalTime(ftCreationTime, strDate, strTime);  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"create: %s %s\\n\"</span>, strDate, strTime);  </span><br><span class=\"line\">    <span class=\"comment\">//转换最后一次访问时间</span></span><br><span class=\"line\">    CLocaltimeAndFiletime::FileTimeToLocalTime(ftLastAccessTime, strDate, strTime);  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"access: %s %s\\n\"</span>, strDate, strTime);</span><br><span class=\"line\">    <span class=\"comment\">//转换修改时间</span></span><br><span class=\"line\">    CLocaltimeAndFiletime::FileTimeToLocalTime(ftLastWriteTime, strDate, strTime);  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"modify: %s %s\\n\"</span>, strDate, strTime);  </span><br><span class=\"line\">    <span class=\"comment\">//getch();  </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"windowFTP的建立","date":"2016-07-31T07:30:55.000Z","comments":1,"_content":"\n# windows下建立ftp服务器 \n需要单独建立一个用户，然后把特定目录设置为ftp目录（单独的用户需要有访问权限哦），这样避免别人知道你的计算机用户名和密码。\n可以把新建的这个用户名密码告诉他们。别的目录不属于这个用户的文件夹，他就没法访问了。。\n\n# 运行：appwiz.cpl 添加ftp服务组件\n\n# 右键计算机 -管理-服务应用程序管理-IIS管理 ，添加ftp站点\n\n上传目录：一步一步设置，IP ,ftp上传目录，点口为21  ，基本，权限：可读可写，用户：所有用户，ssL可选，证书 ,完成。\n\n下载目录：IP ，端口2121 ，用户：所有用户，SSL可选，基本，权限：可读，完成。\n\n# 注意\n如果你使用的用户是administrator ，需要FTP上传目录和下载目录，添加用户权限，加入新建的用户。\n\n\nwindows下访问，可在文件浏览器输入ftp://IP  默认端口21  \nlinux下访问 ,当前目录home/username/  ,输入ftp ip port   提示输入ftp服务器的用户名和密码\n提示 user logged in。\nls 可显示ftp上面的文件和文件夹。\n下载文件: get xxx   ./（/home/username/）\n上传文件:  cd 进入到ftp的目录11/  cd 11 \n         然后 put  home/username/index.php  ,就把index.php上传了。。\n          \n\n\n\n\n\n\n\n","source":"_posts/linux/windowsFTP.md","raw":"---\nlayout: post\ntitle: windowFTP的建立\ncategory: windows \ntags: windows \ndate: 2016-7-31 15:30:55\ncomments: true\n\n---\n\n# windows下建立ftp服务器 \n需要单独建立一个用户，然后把特定目录设置为ftp目录（单独的用户需要有访问权限哦），这样避免别人知道你的计算机用户名和密码。\n可以把新建的这个用户名密码告诉他们。别的目录不属于这个用户的文件夹，他就没法访问了。。\n\n# 运行：appwiz.cpl 添加ftp服务组件\n\n# 右键计算机 -管理-服务应用程序管理-IIS管理 ，添加ftp站点\n\n上传目录：一步一步设置，IP ,ftp上传目录，点口为21  ，基本，权限：可读可写，用户：所有用户，ssL可选，证书 ,完成。\n\n下载目录：IP ，端口2121 ，用户：所有用户，SSL可选，基本，权限：可读，完成。\n\n# 注意\n如果你使用的用户是administrator ，需要FTP上传目录和下载目录，添加用户权限，加入新建的用户。\n\n\nwindows下访问，可在文件浏览器输入ftp://IP  默认端口21  \nlinux下访问 ,当前目录home/username/  ,输入ftp ip port   提示输入ftp服务器的用户名和密码\n提示 user logged in。\nls 可显示ftp上面的文件和文件夹。\n下载文件: get xxx   ./（/home/username/）\n上传文件:  cd 进入到ftp的目录11/  cd 11 \n         然后 put  home/username/index.php  ,就把index.php上传了。。\n          \n\n\n\n\n\n\n\n","slug":"linux/windowsFTP","published":1,"updated":"2019-05-19T14:30:17.033Z","photos":[],"link":"","_id":"cjwxes5df001uhdli7sz9v3po","content":"<h1 id=\"windows下建立ftp服务器\"><a href=\"#windows下建立ftp服务器\" class=\"headerlink\" title=\"windows下建立ftp服务器\"></a>windows下建立ftp服务器</h1><p>需要单独建立一个用户，然后把特定目录设置为ftp目录（单独的用户需要有访问权限哦），这样避免别人知道你的计算机用户名和密码。<br>可以把新建的这个用户名密码告诉他们。别的目录不属于这个用户的文件夹，他就没法访问了。。</p>\n<h1 id=\"运行：appwiz-cpl-添加ftp服务组件\"><a href=\"#运行：appwiz-cpl-添加ftp服务组件\" class=\"headerlink\" title=\"运行：appwiz.cpl 添加ftp服务组件\"></a>运行：appwiz.cpl 添加ftp服务组件</h1><h1 id=\"右键计算机-管理-服务应用程序管理-IIS管理-，添加ftp站点\"><a href=\"#右键计算机-管理-服务应用程序管理-IIS管理-，添加ftp站点\" class=\"headerlink\" title=\"右键计算机 -管理-服务应用程序管理-IIS管理 ，添加ftp站点\"></a>右键计算机 -管理-服务应用程序管理-IIS管理 ，添加ftp站点</h1><p>上传目录：一步一步设置，IP ,ftp上传目录，点口为21  ，基本，权限：可读可写，用户：所有用户，ssL可选，证书 ,完成。</p>\n<p>下载目录：IP ，端口2121 ，用户：所有用户，SSL可选，基本，权限：可读，完成。</p>\n<h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><p>如果你使用的用户是administrator ，需要FTP上传目录和下载目录，添加用户权限，加入新建的用户。</p>\n<p>windows下访问，可在文件浏览器输入<a href=\"ftp://IP\" target=\"_blank\" rel=\"noopener\">ftp://IP</a>  默认端口21<br>linux下访问 ,当前目录home/username/  ,输入ftp ip port   提示输入ftp服务器的用户名和密码<br>提示 user logged in。<br>ls 可显示ftp上面的文件和文件夹。<br>下载文件: get xxx   ./（/home/username/）<br>上传文件:  cd 进入到ftp的目录11/  cd 11<br>         然后 put  home/username/index.php  ,就把index.php上传了。。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"windows下建立ftp服务器\"><a href=\"#windows下建立ftp服务器\" class=\"headerlink\" title=\"windows下建立ftp服务器\"></a>windows下建立ftp服务器</h1><p>需要单独建立一个用户，然后把特定目录设置为ftp目录（单独的用户需要有访问权限哦），这样避免别人知道你的计算机用户名和密码。<br>可以把新建的这个用户名密码告诉他们。别的目录不属于这个用户的文件夹，他就没法访问了。。</p>\n<h1 id=\"运行：appwiz-cpl-添加ftp服务组件\"><a href=\"#运行：appwiz-cpl-添加ftp服务组件\" class=\"headerlink\" title=\"运行：appwiz.cpl 添加ftp服务组件\"></a>运行：appwiz.cpl 添加ftp服务组件</h1><h1 id=\"右键计算机-管理-服务应用程序管理-IIS管理-，添加ftp站点\"><a href=\"#右键计算机-管理-服务应用程序管理-IIS管理-，添加ftp站点\" class=\"headerlink\" title=\"右键计算机 -管理-服务应用程序管理-IIS管理 ，添加ftp站点\"></a>右键计算机 -管理-服务应用程序管理-IIS管理 ，添加ftp站点</h1><p>上传目录：一步一步设置，IP ,ftp上传目录，点口为21  ，基本，权限：可读可写，用户：所有用户，ssL可选，证书 ,完成。</p>\n<p>下载目录：IP ，端口2121 ，用户：所有用户，SSL可选，基本，权限：可读，完成。</p>\n<h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><p>如果你使用的用户是administrator ，需要FTP上传目录和下载目录，添加用户权限，加入新建的用户。</p>\n<p>windows下访问，可在文件浏览器输入<a href=\"ftp://IP\" target=\"_blank\" rel=\"noopener\">ftp://IP</a>  默认端口21<br>linux下访问 ,当前目录home/username/  ,输入ftp ip port   提示输入ftp服务器的用户名和密码<br>提示 user logged in。<br>ls 可显示ftp上面的文件和文件夹。<br>下载文件: get xxx   ./（/home/username/）<br>上传文件:  cd 进入到ftp的目录11/  cd 11<br>         然后 put  home/username/index.php  ,就把index.php上传了。。</p>\n"},{"layout":"post","title":"windows 管道通信","date":"2017-01-08T06:11:00.000Z","_content":"\n#windows 管道通信\n\n思路如下：\nserver端：\n1 建立一个可读可写的管道\n2 将cmd /c+命令建立的执行进程的输出（stdOutput）和错误(stdError)\n与管道写端关联。就是把cmd执行命令的结果写进管道。\n3 recv client端发来的命令比如： \"dir\"\n4 组合成字符串\"c:/windows/system32/cmd.exe /cdir\"\n5 利用字符串建立进程，就是执行的意思\n6 sleep(1000) 停止一秒，让进程完全执行完输出结果\n否则可能进程没执行完毕，就向下执行了，导致管道中\n只有部分cmd命令执行的结果。\n7 while循环ReadFile读取管道中的数据\n8 send发送数据给client端，显示\n\nclient端： \n这个很简单，建立一个阻塞的socket ，循环发送你想法的\n命令，到server端执行就可以了。\n\nserver端代码：\n```c\n//server.cpp  \n#include \"stdafx.h\"\n#include <stdio.h>\n#include <winsock2.h>\n#pragma comment(lib, \"ws2_32.lib\")\n\nint main(int argc, char* argv[])\n{\n\n    SOCKET sClient;\n    BYTE minorVer = 2; \n    BYTE majorVer = 2;\n    WSADATA wsaData;\n    WORD sockVersion = MAKEWORD(minorVer, majorVer);\n    if(WSAStartup(sockVersion, &wsaData) != 0)\n        return 0;\n    SOCKET sListen = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n    if(sListen == INVALID_SOCKET)\n    {\n        printf(\"socket error \\n\");\n        return 0;\n    }\n    sockaddr_in sin;\n    sin.sin_family = AF_INET;\n    sin.sin_port = htons(4500);\n    sin.sin_addr.S_un.S_addr = INADDR_ANY;  \n    if(bind(sListen, (LPSOCKADDR)&sin, sizeof(sin)) == SOCKET_ERROR)\n    {\n        printf(\"bind error \\n\");\n        return 0;\n    }\n    if(listen(sListen, 5) == SOCKET_ERROR)\n    {\n        printf(\"listen error \\n\");\n        return 0;\n    }\n\n    sClient  =accept(sListen,NULL,NULL);\n\n//  send(sClient,wMessage,strlen(wMessage),0);\n    char rBuffer[4096] = {0};\n    char totalbuffer[4096] ={0};\n    char cmdline[256]={0};\n\n    while(true)\n    {\n\n        memset(cmdline,0,256);\n        SECURITY_ATTRIBUTES sa;\n        HANDLE hRead,hWrite;\n        sa.nLength = sizeof(SECURITY_ATTRIBUTES);\n        sa.lpSecurityDescriptor = NULL;\n        sa.bInheritHandle = TRUE;\n        if (!CreatePipe(&hRead,&hWrite,&sa,0)) \n        {\n            printf(\"CreatePipe Error\");\n            return 0;\n        }   \n        STARTUPINFO si;\n        PROCESS_INFORMATION pi; \n        si.cb = sizeof(STARTUPINFO);\n        GetStartupInfo(&si); \n\n        si.hStdError = hWrite;\n        si.hStdOutput = hWrite;\n        si.wShowWindow = SW_HIDE;\n        si.dwFlags = STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;\n        \n        GetSystemDirectory(cmdline,sizeof(cmdline));\n        strcat(cmdline,\"\\\\cmd.exe /c\");\n        char cmdbuff[256];\n        ZeroMemory(cmdbuff,sizeof(cmdbuff));    \n    \n        recv(sClient,cmdbuff,256,NULL);\n        strncat(cmdline,cmdbuff,strlen(cmdbuff));\n        if (!CreateProcess(NULL,cmdline,NULL,NULL,TRUE,NULL,NULL,NULL,&si,&pi))     \n        {\n            printf(\"CreateProcess Error\");\n            continue;\n        }\n            ZeroMemory(cmdbuff,sizeof(cmdbuff));\n    \n        CloseHandle(hWrite);\n        DWORD dwRead;\n        Sleep(1000);\n     while(ReadFile(hRead,rBuffer,4096,&dwRead,NULL))\n        {  \n            char a[4] ={0};\n            sprintf(a,\"%d\",dwRead); //把数字转换成字符串放入数组\n            lstrcpy(totalbuffer,a); // 把总字节数写入数据最前面\n            lstrcat(totalbuffer,\"#\");//在加一个#符表示数字部分结束\n            lstrcat(totalbuffer,rBuffer);//缀数据部分\n            printf(\"%d\",dwRead);\n            send(sClient,totalbuffer,dwRead+5,0); //发送\n            printf(\"%s\",totalbuffer);   \n            memset(rBuffer,0,4096);  // 这是个死循环，一直读取管道中数据，所有要清零缓存\n            memset(totalbuffer,0,4096);\n        \n        }       \n    \n    \n    }\n\n    return 0;\n}\n\n```\n\n\nclient端代码：\n```c\n#include <stdio.h>\n#include \"stdafx.h\"\n#include <Winsock2.h>\n\n\n#pragma comment(lib,\"ws2_32.lib\")\nint main(int argc, char* argv[])\n{\n    \n    BYTE minorVer = 2; \n    BYTE majorVer = 2;\n    char recvBuf[4096]={0};\n    char buffer[4096]={0};\n    char temp[10]={0};\n    int len = 0;\n    int total = 0;\n    int t =0;\n    WSADATA wsaData;\n    WORD sockVersion = MAKEWORD(minorVer, majorVer);\n    if(WSAStartup(sockVersion, &wsaData) != 0)\n        return 0;\n    //创建套接字\n    SOCKET sockClient = socket( AF_INET,SOCK_STREAM, 0 );\n    SOCKADDR_IN addrSrv;\n    addrSrv.sin_addr.S_un.S_addr = inet_addr(\"172.28.125.137\"); //存server端ip ，\n    addrSrv.sin_family = AF_INET;\n    addrSrv.sin_port = htons(4500);\n    char x[15]={0}; //存放命令比如： cd ， dir ，ls ，pwd \n    //向服务器发出连接请求\n    connect( sockClient, (SOCKADDR*)&addrSrv, sizeof(SOCKADDR)); // 连接\n    while(1){\n        ZeroMemory(recvBuf,sizeof(recvBuf));   // 清零缓存\n        if(0!=scanf(\"%s\",x)){   // 等待输入命令\n          send(sockClient,x,lstrlen(x), 0 );\n                total=recv( sockClient, buffer, 4096, 0 ); //接收一次，可能收不完哦\n                lstrcat(recvBuf,buffer); // 存到总buffer里面\n                memcpy(temp,buffer,strstr(buffer,\"#\")-buffer);// 从buffer里面取出来数字部分，就是#前的字符串\n                t = atoi(temp); // 转成数字\n                printf(\"%d\",t);\n                while(total<t){ //如果第一次收到的小于这个数字，继续接收，存到临时buffer\n                    ZeroMemory(buffer,sizeof(buffer));\n                    len=recv( sockClient, buffer, 4096, 0 );\n                    total=len+total; // 取到的长度加上第一次的长度\n                    lstrcat(recvBuf,buffer);// 这次取得放到总的recvBuf里面\n                }\n            //  printf(\"%d\\n\",atoi(recvBuf));\n          printf(\"%s\\n\",recvBuf);\n          printf(\"%d\\n\",strlen(recvBuf));\n          total =0; // 以下清零是为了下次while循环准备，\n          len = 0;\n          t =0;\n          ZeroMemory(temp,sizeof(temp));\n          ZeroMemory(buffer,sizeof(buffer));\n         ZeroMemory(recvBuf,sizeof(recvBuf));\n        }   //接受数据\n\n }\n\n    closesocket(sockClient);\n    WSACleanup();\n    return 0;\n}\n\n```\n\n注意：ReadFile是异步或同步模式 ，ReadFileEx只有异步模式\n","source":"_posts/linux/windows_pipe.md","raw":"---\nlayout: post\ntitle: windows 管道通信\ndate: 2017-1-8 14:11:00\ncategory: windows \n\n---\n\n#windows 管道通信\n\n思路如下：\nserver端：\n1 建立一个可读可写的管道\n2 将cmd /c+命令建立的执行进程的输出（stdOutput）和错误(stdError)\n与管道写端关联。就是把cmd执行命令的结果写进管道。\n3 recv client端发来的命令比如： \"dir\"\n4 组合成字符串\"c:/windows/system32/cmd.exe /cdir\"\n5 利用字符串建立进程，就是执行的意思\n6 sleep(1000) 停止一秒，让进程完全执行完输出结果\n否则可能进程没执行完毕，就向下执行了，导致管道中\n只有部分cmd命令执行的结果。\n7 while循环ReadFile读取管道中的数据\n8 send发送数据给client端，显示\n\nclient端： \n这个很简单，建立一个阻塞的socket ，循环发送你想法的\n命令，到server端执行就可以了。\n\nserver端代码：\n```c\n//server.cpp  \n#include \"stdafx.h\"\n#include <stdio.h>\n#include <winsock2.h>\n#pragma comment(lib, \"ws2_32.lib\")\n\nint main(int argc, char* argv[])\n{\n\n    SOCKET sClient;\n    BYTE minorVer = 2; \n    BYTE majorVer = 2;\n    WSADATA wsaData;\n    WORD sockVersion = MAKEWORD(minorVer, majorVer);\n    if(WSAStartup(sockVersion, &wsaData) != 0)\n        return 0;\n    SOCKET sListen = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n    if(sListen == INVALID_SOCKET)\n    {\n        printf(\"socket error \\n\");\n        return 0;\n    }\n    sockaddr_in sin;\n    sin.sin_family = AF_INET;\n    sin.sin_port = htons(4500);\n    sin.sin_addr.S_un.S_addr = INADDR_ANY;  \n    if(bind(sListen, (LPSOCKADDR)&sin, sizeof(sin)) == SOCKET_ERROR)\n    {\n        printf(\"bind error \\n\");\n        return 0;\n    }\n    if(listen(sListen, 5) == SOCKET_ERROR)\n    {\n        printf(\"listen error \\n\");\n        return 0;\n    }\n\n    sClient  =accept(sListen,NULL,NULL);\n\n//  send(sClient,wMessage,strlen(wMessage),0);\n    char rBuffer[4096] = {0};\n    char totalbuffer[4096] ={0};\n    char cmdline[256]={0};\n\n    while(true)\n    {\n\n        memset(cmdline,0,256);\n        SECURITY_ATTRIBUTES sa;\n        HANDLE hRead,hWrite;\n        sa.nLength = sizeof(SECURITY_ATTRIBUTES);\n        sa.lpSecurityDescriptor = NULL;\n        sa.bInheritHandle = TRUE;\n        if (!CreatePipe(&hRead,&hWrite,&sa,0)) \n        {\n            printf(\"CreatePipe Error\");\n            return 0;\n        }   \n        STARTUPINFO si;\n        PROCESS_INFORMATION pi; \n        si.cb = sizeof(STARTUPINFO);\n        GetStartupInfo(&si); \n\n        si.hStdError = hWrite;\n        si.hStdOutput = hWrite;\n        si.wShowWindow = SW_HIDE;\n        si.dwFlags = STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;\n        \n        GetSystemDirectory(cmdline,sizeof(cmdline));\n        strcat(cmdline,\"\\\\cmd.exe /c\");\n        char cmdbuff[256];\n        ZeroMemory(cmdbuff,sizeof(cmdbuff));    \n    \n        recv(sClient,cmdbuff,256,NULL);\n        strncat(cmdline,cmdbuff,strlen(cmdbuff));\n        if (!CreateProcess(NULL,cmdline,NULL,NULL,TRUE,NULL,NULL,NULL,&si,&pi))     \n        {\n            printf(\"CreateProcess Error\");\n            continue;\n        }\n            ZeroMemory(cmdbuff,sizeof(cmdbuff));\n    \n        CloseHandle(hWrite);\n        DWORD dwRead;\n        Sleep(1000);\n     while(ReadFile(hRead,rBuffer,4096,&dwRead,NULL))\n        {  \n            char a[4] ={0};\n            sprintf(a,\"%d\",dwRead); //把数字转换成字符串放入数组\n            lstrcpy(totalbuffer,a); // 把总字节数写入数据最前面\n            lstrcat(totalbuffer,\"#\");//在加一个#符表示数字部分结束\n            lstrcat(totalbuffer,rBuffer);//缀数据部分\n            printf(\"%d\",dwRead);\n            send(sClient,totalbuffer,dwRead+5,0); //发送\n            printf(\"%s\",totalbuffer);   \n            memset(rBuffer,0,4096);  // 这是个死循环，一直读取管道中数据，所有要清零缓存\n            memset(totalbuffer,0,4096);\n        \n        }       \n    \n    \n    }\n\n    return 0;\n}\n\n```\n\n\nclient端代码：\n```c\n#include <stdio.h>\n#include \"stdafx.h\"\n#include <Winsock2.h>\n\n\n#pragma comment(lib,\"ws2_32.lib\")\nint main(int argc, char* argv[])\n{\n    \n    BYTE minorVer = 2; \n    BYTE majorVer = 2;\n    char recvBuf[4096]={0};\n    char buffer[4096]={0};\n    char temp[10]={0};\n    int len = 0;\n    int total = 0;\n    int t =0;\n    WSADATA wsaData;\n    WORD sockVersion = MAKEWORD(minorVer, majorVer);\n    if(WSAStartup(sockVersion, &wsaData) != 0)\n        return 0;\n    //创建套接字\n    SOCKET sockClient = socket( AF_INET,SOCK_STREAM, 0 );\n    SOCKADDR_IN addrSrv;\n    addrSrv.sin_addr.S_un.S_addr = inet_addr(\"172.28.125.137\"); //存server端ip ，\n    addrSrv.sin_family = AF_INET;\n    addrSrv.sin_port = htons(4500);\n    char x[15]={0}; //存放命令比如： cd ， dir ，ls ，pwd \n    //向服务器发出连接请求\n    connect( sockClient, (SOCKADDR*)&addrSrv, sizeof(SOCKADDR)); // 连接\n    while(1){\n        ZeroMemory(recvBuf,sizeof(recvBuf));   // 清零缓存\n        if(0!=scanf(\"%s\",x)){   // 等待输入命令\n          send(sockClient,x,lstrlen(x), 0 );\n                total=recv( sockClient, buffer, 4096, 0 ); //接收一次，可能收不完哦\n                lstrcat(recvBuf,buffer); // 存到总buffer里面\n                memcpy(temp,buffer,strstr(buffer,\"#\")-buffer);// 从buffer里面取出来数字部分，就是#前的字符串\n                t = atoi(temp); // 转成数字\n                printf(\"%d\",t);\n                while(total<t){ //如果第一次收到的小于这个数字，继续接收，存到临时buffer\n                    ZeroMemory(buffer,sizeof(buffer));\n                    len=recv( sockClient, buffer, 4096, 0 );\n                    total=len+total; // 取到的长度加上第一次的长度\n                    lstrcat(recvBuf,buffer);// 这次取得放到总的recvBuf里面\n                }\n            //  printf(\"%d\\n\",atoi(recvBuf));\n          printf(\"%s\\n\",recvBuf);\n          printf(\"%d\\n\",strlen(recvBuf));\n          total =0; // 以下清零是为了下次while循环准备，\n          len = 0;\n          t =0;\n          ZeroMemory(temp,sizeof(temp));\n          ZeroMemory(buffer,sizeof(buffer));\n         ZeroMemory(recvBuf,sizeof(recvBuf));\n        }   //接受数据\n\n }\n\n    closesocket(sockClient);\n    WSACleanup();\n    return 0;\n}\n\n```\n\n注意：ReadFile是异步或同步模式 ，ReadFileEx只有异步模式\n","slug":"linux/windows_pipe","published":1,"updated":"2019-05-19T14:30:17.033Z","comments":1,"photos":[],"link":"","_id":"cjwxes5df001xhdlibozy1oht","content":"<p>#windows 管道通信</p>\n<p>思路如下：<br>server端：<br>1 建立一个可读可写的管道<br>2 将cmd /c+命令建立的执行进程的输出（stdOutput）和错误(stdError)<br>与管道写端关联。就是把cmd执行命令的结果写进管道。<br>3 recv client端发来的命令比如： “dir”<br>4 组合成字符串”c:/windows/system32/cmd.exe /cdir”<br>5 利用字符串建立进程，就是执行的意思<br>6 sleep(1000) 停止一秒，让进程完全执行完输出结果<br>否则可能进程没执行完毕，就向下执行了，导致管道中<br>只有部分cmd命令执行的结果。<br>7 while循环ReadFile读取管道中的数据<br>8 send发送数据给client端，显示</p>\n<p>client端：<br>这个很简单，建立一个阻塞的socket ，循环发送你想法的<br>命令，到server端执行就可以了。</p>\n<p>server端代码：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//server.cpp  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdafx.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;winsock2.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"ws2_32.lib\"</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SOCKET sClient;</span><br><span class=\"line\">    BYTE minorVer = <span class=\"number\">2</span>; </span><br><span class=\"line\">    BYTE majorVer = <span class=\"number\">2</span>;</span><br><span class=\"line\">    WSADATA wsaData;</span><br><span class=\"line\">    WORD sockVersion = MAKEWORD(minorVer, majorVer);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(WSAStartup(sockVersion, &amp;wsaData) != <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    SOCKET sListen = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sListen == INVALID_SOCKET)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"socket error \\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sockaddr_in <span class=\"built_in\">sin</span>;</span><br><span class=\"line\">    <span class=\"built_in\">sin</span>.sin_family = AF_INET;</span><br><span class=\"line\">    <span class=\"built_in\">sin</span>.sin_port = htons(<span class=\"number\">4500</span>);</span><br><span class=\"line\">    <span class=\"built_in\">sin</span>.sin_addr.S_un.S_addr = INADDR_ANY;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(bind(sListen, (LPSOCKADDR)&amp;<span class=\"built_in\">sin</span>, <span class=\"keyword\">sizeof</span>(<span class=\"built_in\">sin</span>)) == SOCKET_ERROR)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"bind error \\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(listen(sListen, <span class=\"number\">5</span>) == SOCKET_ERROR)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"listen error \\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sClient  =accept(sListen,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  send(sClient,wMessage,strlen(wMessage),0);</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> rBuffer[<span class=\"number\">4096</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> totalbuffer[<span class=\"number\">4096</span>] =&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> cmdline[<span class=\"number\">256</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(cmdline,<span class=\"number\">0</span>,<span class=\"number\">256</span>);</span><br><span class=\"line\">        SECURITY_ATTRIBUTES sa;</span><br><span class=\"line\">        HANDLE hRead,hWrite;</span><br><span class=\"line\">        sa.nLength = <span class=\"keyword\">sizeof</span>(SECURITY_ATTRIBUTES);</span><br><span class=\"line\">        sa.lpSecurityDescriptor = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        sa.bInheritHandle = TRUE;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!CreatePipe(&amp;hRead,&amp;hWrite,&amp;sa,<span class=\"number\">0</span>)) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"CreatePipe Error\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">        STARTUPINFO si;</span><br><span class=\"line\">        PROCESS_INFORMATION pi; </span><br><span class=\"line\">        si.cb = <span class=\"keyword\">sizeof</span>(STARTUPINFO);</span><br><span class=\"line\">        GetStartupInfo(&amp;si); </span><br><span class=\"line\"></span><br><span class=\"line\">        si.hStdError = hWrite;</span><br><span class=\"line\">        si.hStdOutput = hWrite;</span><br><span class=\"line\">        si.wShowWindow = SW_HIDE;</span><br><span class=\"line\">        si.dwFlags = STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;</span><br><span class=\"line\">        </span><br><span class=\"line\">        GetSystemDirectory(cmdline,<span class=\"keyword\">sizeof</span>(cmdline));</span><br><span class=\"line\">        <span class=\"built_in\">strcat</span>(cmdline,<span class=\"string\">\"\\\\cmd.exe /c\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">char</span> cmdbuff[<span class=\"number\">256</span>];</span><br><span class=\"line\">        ZeroMemory(cmdbuff,<span class=\"keyword\">sizeof</span>(cmdbuff));    </span><br><span class=\"line\">    </span><br><span class=\"line\">        recv(sClient,cmdbuff,<span class=\"number\">256</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"built_in\">strncat</span>(cmdline,cmdbuff,<span class=\"built_in\">strlen</span>(cmdbuff));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!CreateProcess(<span class=\"literal\">NULL</span>,cmdline,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>,TRUE,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>,&amp;si,&amp;pi))     </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"CreateProcess Error\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            ZeroMemory(cmdbuff,<span class=\"keyword\">sizeof</span>(cmdbuff));</span><br><span class=\"line\">    </span><br><span class=\"line\">        CloseHandle(hWrite);</span><br><span class=\"line\">        DWORD dwRead;</span><br><span class=\"line\">        Sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">     <span class=\"keyword\">while</span>(ReadFile(hRead,rBuffer,<span class=\"number\">4096</span>,&amp;dwRead,<span class=\"literal\">NULL</span>))</span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">char</span> a[<span class=\"number\">4</span>] =&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">            <span class=\"built_in\">sprintf</span>(a,<span class=\"string\">\"%d\"</span>,dwRead); <span class=\"comment\">//把数字转换成字符串放入数组</span></span><br><span class=\"line\">            lstrcpy(totalbuffer,a); <span class=\"comment\">// 把总字节数写入数据最前面</span></span><br><span class=\"line\">            lstrcat(totalbuffer,<span class=\"string\">\"#\"</span>);<span class=\"comment\">//在加一个#符表示数字部分结束</span></span><br><span class=\"line\">            lstrcat(totalbuffer,rBuffer);<span class=\"comment\">//缀数据部分</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,dwRead);</span><br><span class=\"line\">            send(sClient,totalbuffer,dwRead+<span class=\"number\">5</span>,<span class=\"number\">0</span>); <span class=\"comment\">//发送</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,totalbuffer);   </span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(rBuffer,<span class=\"number\">0</span>,<span class=\"number\">4096</span>);  <span class=\"comment\">// 这是个死循环，一直读取管道中数据，所有要清零缓存</span></span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(totalbuffer,<span class=\"number\">0</span>,<span class=\"number\">4096</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#125;       </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>client端代码：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdafx.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;Winsock2.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib,<span class=\"meta-string\">\"ws2_32.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    BYTE minorVer = <span class=\"number\">2</span>; </span><br><span class=\"line\">    BYTE majorVer = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> recvBuf[<span class=\"number\">4096</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buffer[<span class=\"number\">4096</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> temp[<span class=\"number\">10</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t =<span class=\"number\">0</span>;</span><br><span class=\"line\">    WSADATA wsaData;</span><br><span class=\"line\">    WORD sockVersion = MAKEWORD(minorVer, majorVer);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(WSAStartup(sockVersion, &amp;wsaData) != <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//创建套接字</span></span><br><span class=\"line\">    SOCKET sockClient = socket( AF_INET,SOCK_STREAM, <span class=\"number\">0</span> );</span><br><span class=\"line\">    SOCKADDR_IN addrSrv;</span><br><span class=\"line\">    addrSrv.sin_addr.S_un.S_addr = inet_addr(<span class=\"string\">\"172.28.125.137\"</span>); <span class=\"comment\">//存server端ip ，</span></span><br><span class=\"line\">    addrSrv.sin_family = AF_INET;</span><br><span class=\"line\">    addrSrv.sin_port = htons(<span class=\"number\">4500</span>);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> x[<span class=\"number\">15</span>]=&#123;<span class=\"number\">0</span>&#125;; <span class=\"comment\">//存放命令比如： cd ， dir ，ls ，pwd </span></span><br><span class=\"line\">    <span class=\"comment\">//向服务器发出连接请求</span></span><br><span class=\"line\">    connect( sockClient, (SOCKADDR*)&amp;addrSrv, <span class=\"keyword\">sizeof</span>(SOCKADDR)); <span class=\"comment\">// 连接</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        ZeroMemory(recvBuf,<span class=\"keyword\">sizeof</span>(recvBuf));   <span class=\"comment\">// 清零缓存</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">0</span>!=<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,x))&#123;   <span class=\"comment\">// 等待输入命令</span></span><br><span class=\"line\">          send(sockClient,x,lstrlen(x), <span class=\"number\">0</span> );</span><br><span class=\"line\">                total=recv( sockClient, buffer, <span class=\"number\">4096</span>, <span class=\"number\">0</span> ); <span class=\"comment\">//接收一次，可能收不完哦</span></span><br><span class=\"line\">                lstrcat(recvBuf,buffer); <span class=\"comment\">// 存到总buffer里面</span></span><br><span class=\"line\">                <span class=\"built_in\">memcpy</span>(temp,buffer,<span class=\"built_in\">strstr</span>(buffer,<span class=\"string\">\"#\"</span>)-buffer);<span class=\"comment\">// 从buffer里面取出来数字部分，就是#前的字符串</span></span><br><span class=\"line\">                t = atoi(temp); <span class=\"comment\">// 转成数字</span></span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,t);</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(total&lt;t)&#123; <span class=\"comment\">//如果第一次收到的小于这个数字，继续接收，存到临时buffer</span></span><br><span class=\"line\">                    ZeroMemory(buffer,<span class=\"keyword\">sizeof</span>(buffer));</span><br><span class=\"line\">                    len=recv( sockClient, buffer, <span class=\"number\">4096</span>, <span class=\"number\">0</span> );</span><br><span class=\"line\">                    total=len+total; <span class=\"comment\">// 取到的长度加上第一次的长度</span></span><br><span class=\"line\">                    lstrcat(recvBuf,buffer);<span class=\"comment\">// 这次取得放到总的recvBuf里面</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"comment\">//  printf(\"%d\\n\",atoi(recvBuf));</span></span><br><span class=\"line\">          <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>,recvBuf);</span><br><span class=\"line\">          <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,<span class=\"built_in\">strlen</span>(recvBuf));</span><br><span class=\"line\">          total =<span class=\"number\">0</span>; <span class=\"comment\">// 以下清零是为了下次while循环准备，</span></span><br><span class=\"line\">          len = <span class=\"number\">0</span>;</span><br><span class=\"line\">          t =<span class=\"number\">0</span>;</span><br><span class=\"line\">          ZeroMemory(temp,<span class=\"keyword\">sizeof</span>(temp));</span><br><span class=\"line\">          ZeroMemory(buffer,<span class=\"keyword\">sizeof</span>(buffer));</span><br><span class=\"line\">         ZeroMemory(recvBuf,<span class=\"keyword\">sizeof</span>(recvBuf));</span><br><span class=\"line\">        &#125;   <span class=\"comment\">//接受数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    closesocket(sockClient);</span><br><span class=\"line\">    WSACleanup();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意：ReadFile是异步或同步模式 ，ReadFileEx只有异步模式</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#windows 管道通信</p>\n<p>思路如下：<br>server端：<br>1 建立一个可读可写的管道<br>2 将cmd /c+命令建立的执行进程的输出（stdOutput）和错误(stdError)<br>与管道写端关联。就是把cmd执行命令的结果写进管道。<br>3 recv client端发来的命令比如： “dir”<br>4 组合成字符串”c:/windows/system32/cmd.exe /cdir”<br>5 利用字符串建立进程，就是执行的意思<br>6 sleep(1000) 停止一秒，让进程完全执行完输出结果<br>否则可能进程没执行完毕，就向下执行了，导致管道中<br>只有部分cmd命令执行的结果。<br>7 while循环ReadFile读取管道中的数据<br>8 send发送数据给client端，显示</p>\n<p>client端：<br>这个很简单，建立一个阻塞的socket ，循环发送你想法的<br>命令，到server端执行就可以了。</p>\n<p>server端代码：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//server.cpp  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdafx.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;winsock2.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"ws2_32.lib\"</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SOCKET sClient;</span><br><span class=\"line\">    BYTE minorVer = <span class=\"number\">2</span>; </span><br><span class=\"line\">    BYTE majorVer = <span class=\"number\">2</span>;</span><br><span class=\"line\">    WSADATA wsaData;</span><br><span class=\"line\">    WORD sockVersion = MAKEWORD(minorVer, majorVer);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(WSAStartup(sockVersion, &amp;wsaData) != <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    SOCKET sListen = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sListen == INVALID_SOCKET)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"socket error \\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sockaddr_in <span class=\"built_in\">sin</span>;</span><br><span class=\"line\">    <span class=\"built_in\">sin</span>.sin_family = AF_INET;</span><br><span class=\"line\">    <span class=\"built_in\">sin</span>.sin_port = htons(<span class=\"number\">4500</span>);</span><br><span class=\"line\">    <span class=\"built_in\">sin</span>.sin_addr.S_un.S_addr = INADDR_ANY;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(bind(sListen, (LPSOCKADDR)&amp;<span class=\"built_in\">sin</span>, <span class=\"keyword\">sizeof</span>(<span class=\"built_in\">sin</span>)) == SOCKET_ERROR)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"bind error \\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(listen(sListen, <span class=\"number\">5</span>) == SOCKET_ERROR)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"listen error \\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sClient  =accept(sListen,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  send(sClient,wMessage,strlen(wMessage),0);</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> rBuffer[<span class=\"number\">4096</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> totalbuffer[<span class=\"number\">4096</span>] =&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> cmdline[<span class=\"number\">256</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(cmdline,<span class=\"number\">0</span>,<span class=\"number\">256</span>);</span><br><span class=\"line\">        SECURITY_ATTRIBUTES sa;</span><br><span class=\"line\">        HANDLE hRead,hWrite;</span><br><span class=\"line\">        sa.nLength = <span class=\"keyword\">sizeof</span>(SECURITY_ATTRIBUTES);</span><br><span class=\"line\">        sa.lpSecurityDescriptor = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        sa.bInheritHandle = TRUE;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!CreatePipe(&amp;hRead,&amp;hWrite,&amp;sa,<span class=\"number\">0</span>)) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"CreatePipe Error\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">        STARTUPINFO si;</span><br><span class=\"line\">        PROCESS_INFORMATION pi; </span><br><span class=\"line\">        si.cb = <span class=\"keyword\">sizeof</span>(STARTUPINFO);</span><br><span class=\"line\">        GetStartupInfo(&amp;si); </span><br><span class=\"line\"></span><br><span class=\"line\">        si.hStdError = hWrite;</span><br><span class=\"line\">        si.hStdOutput = hWrite;</span><br><span class=\"line\">        si.wShowWindow = SW_HIDE;</span><br><span class=\"line\">        si.dwFlags = STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;</span><br><span class=\"line\">        </span><br><span class=\"line\">        GetSystemDirectory(cmdline,<span class=\"keyword\">sizeof</span>(cmdline));</span><br><span class=\"line\">        <span class=\"built_in\">strcat</span>(cmdline,<span class=\"string\">\"\\\\cmd.exe /c\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">char</span> cmdbuff[<span class=\"number\">256</span>];</span><br><span class=\"line\">        ZeroMemory(cmdbuff,<span class=\"keyword\">sizeof</span>(cmdbuff));    </span><br><span class=\"line\">    </span><br><span class=\"line\">        recv(sClient,cmdbuff,<span class=\"number\">256</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"built_in\">strncat</span>(cmdline,cmdbuff,<span class=\"built_in\">strlen</span>(cmdbuff));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!CreateProcess(<span class=\"literal\">NULL</span>,cmdline,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>,TRUE,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>,&amp;si,&amp;pi))     </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"CreateProcess Error\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            ZeroMemory(cmdbuff,<span class=\"keyword\">sizeof</span>(cmdbuff));</span><br><span class=\"line\">    </span><br><span class=\"line\">        CloseHandle(hWrite);</span><br><span class=\"line\">        DWORD dwRead;</span><br><span class=\"line\">        Sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">     <span class=\"keyword\">while</span>(ReadFile(hRead,rBuffer,<span class=\"number\">4096</span>,&amp;dwRead,<span class=\"literal\">NULL</span>))</span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">char</span> a[<span class=\"number\">4</span>] =&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">            <span class=\"built_in\">sprintf</span>(a,<span class=\"string\">\"%d\"</span>,dwRead); <span class=\"comment\">//把数字转换成字符串放入数组</span></span><br><span class=\"line\">            lstrcpy(totalbuffer,a); <span class=\"comment\">// 把总字节数写入数据最前面</span></span><br><span class=\"line\">            lstrcat(totalbuffer,<span class=\"string\">\"#\"</span>);<span class=\"comment\">//在加一个#符表示数字部分结束</span></span><br><span class=\"line\">            lstrcat(totalbuffer,rBuffer);<span class=\"comment\">//缀数据部分</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,dwRead);</span><br><span class=\"line\">            send(sClient,totalbuffer,dwRead+<span class=\"number\">5</span>,<span class=\"number\">0</span>); <span class=\"comment\">//发送</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,totalbuffer);   </span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(rBuffer,<span class=\"number\">0</span>,<span class=\"number\">4096</span>);  <span class=\"comment\">// 这是个死循环，一直读取管道中数据，所有要清零缓存</span></span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(totalbuffer,<span class=\"number\">0</span>,<span class=\"number\">4096</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#125;       </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>client端代码：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdafx.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;Winsock2.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib,<span class=\"meta-string\">\"ws2_32.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    BYTE minorVer = <span class=\"number\">2</span>; </span><br><span class=\"line\">    BYTE majorVer = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> recvBuf[<span class=\"number\">4096</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buffer[<span class=\"number\">4096</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> temp[<span class=\"number\">10</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t =<span class=\"number\">0</span>;</span><br><span class=\"line\">    WSADATA wsaData;</span><br><span class=\"line\">    WORD sockVersion = MAKEWORD(minorVer, majorVer);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(WSAStartup(sockVersion, &amp;wsaData) != <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//创建套接字</span></span><br><span class=\"line\">    SOCKET sockClient = socket( AF_INET,SOCK_STREAM, <span class=\"number\">0</span> );</span><br><span class=\"line\">    SOCKADDR_IN addrSrv;</span><br><span class=\"line\">    addrSrv.sin_addr.S_un.S_addr = inet_addr(<span class=\"string\">\"172.28.125.137\"</span>); <span class=\"comment\">//存server端ip ，</span></span><br><span class=\"line\">    addrSrv.sin_family = AF_INET;</span><br><span class=\"line\">    addrSrv.sin_port = htons(<span class=\"number\">4500</span>);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> x[<span class=\"number\">15</span>]=&#123;<span class=\"number\">0</span>&#125;; <span class=\"comment\">//存放命令比如： cd ， dir ，ls ，pwd </span></span><br><span class=\"line\">    <span class=\"comment\">//向服务器发出连接请求</span></span><br><span class=\"line\">    connect( sockClient, (SOCKADDR*)&amp;addrSrv, <span class=\"keyword\">sizeof</span>(SOCKADDR)); <span class=\"comment\">// 连接</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        ZeroMemory(recvBuf,<span class=\"keyword\">sizeof</span>(recvBuf));   <span class=\"comment\">// 清零缓存</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">0</span>!=<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,x))&#123;   <span class=\"comment\">// 等待输入命令</span></span><br><span class=\"line\">          send(sockClient,x,lstrlen(x), <span class=\"number\">0</span> );</span><br><span class=\"line\">                total=recv( sockClient, buffer, <span class=\"number\">4096</span>, <span class=\"number\">0</span> ); <span class=\"comment\">//接收一次，可能收不完哦</span></span><br><span class=\"line\">                lstrcat(recvBuf,buffer); <span class=\"comment\">// 存到总buffer里面</span></span><br><span class=\"line\">                <span class=\"built_in\">memcpy</span>(temp,buffer,<span class=\"built_in\">strstr</span>(buffer,<span class=\"string\">\"#\"</span>)-buffer);<span class=\"comment\">// 从buffer里面取出来数字部分，就是#前的字符串</span></span><br><span class=\"line\">                t = atoi(temp); <span class=\"comment\">// 转成数字</span></span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,t);</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(total&lt;t)&#123; <span class=\"comment\">//如果第一次收到的小于这个数字，继续接收，存到临时buffer</span></span><br><span class=\"line\">                    ZeroMemory(buffer,<span class=\"keyword\">sizeof</span>(buffer));</span><br><span class=\"line\">                    len=recv( sockClient, buffer, <span class=\"number\">4096</span>, <span class=\"number\">0</span> );</span><br><span class=\"line\">                    total=len+total; <span class=\"comment\">// 取到的长度加上第一次的长度</span></span><br><span class=\"line\">                    lstrcat(recvBuf,buffer);<span class=\"comment\">// 这次取得放到总的recvBuf里面</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"comment\">//  printf(\"%d\\n\",atoi(recvBuf));</span></span><br><span class=\"line\">          <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>,recvBuf);</span><br><span class=\"line\">          <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,<span class=\"built_in\">strlen</span>(recvBuf));</span><br><span class=\"line\">          total =<span class=\"number\">0</span>; <span class=\"comment\">// 以下清零是为了下次while循环准备，</span></span><br><span class=\"line\">          len = <span class=\"number\">0</span>;</span><br><span class=\"line\">          t =<span class=\"number\">0</span>;</span><br><span class=\"line\">          ZeroMemory(temp,<span class=\"keyword\">sizeof</span>(temp));</span><br><span class=\"line\">          ZeroMemory(buffer,<span class=\"keyword\">sizeof</span>(buffer));</span><br><span class=\"line\">         ZeroMemory(recvBuf,<span class=\"keyword\">sizeof</span>(recvBuf));</span><br><span class=\"line\">        &#125;   <span class=\"comment\">//接受数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    closesocket(sockClient);</span><br><span class=\"line\">    WSACleanup();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意：ReadFile是异步或同步模式 ，ReadFileEx只有异步模式</p>\n"},{"layout":"post","title":"一张导图了解cookie和session","date":"2019-06-09T13:50:00.000Z","_content":"\n# cookie和session的区别\n![](cookie_and_session/cookie_and_session.png)\n","source":"_posts/ngx_lua/cookie_and_session.md","raw":"---\nlayout: post\ntitle: 一张导图了解cookie和session \ndate: 2019-06-09 21:50:00\ncategory: nginx \n\n---\n\n# cookie和session的区别\n![](cookie_and_session/cookie_and_session.png)\n","slug":"ngx_lua/cookie_and_session","published":1,"updated":"2019-06-09T13:52:51.990Z","comments":1,"photos":[],"link":"","_id":"cjwxes5dg0021hdlio7uaoj5t","content":"<h1 id=\"cookie和session的区别\"><a href=\"#cookie和session的区别\" class=\"headerlink\" title=\"cookie和session的区别\"></a>cookie和session的区别</h1><p><img src=\"/2019/06/09/ngx_lua/cookie_and_session/cookie_and_session.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"cookie和session的区别\"><a href=\"#cookie和session的区别\" class=\"headerlink\" title=\"cookie和session的区别\"></a>cookie和session的区别</h1><p><img src=\"/2019/06/09/ngx_lua/cookie_and_session/cookie_and_session.png\" alt=\"\"></p>\n"},{"layout":"post","title":"如何在centos7中添加开机启动项","date":"2019-06-08T02:34:58.000Z","comments":1,"_content":"\n#### 1. linux的启动等级\n0 关机模式\n1 单用户模式\n2 无网络多用户模式\n3 有网络多用户模式，如果没网络和2一样。\n4.系统保留，未使用\n5.GUI图形界面\n6.重启模式，默认不能是这个级别，否则就会无限循环重启\n* *正常默认就是3了, 命令行模式，有桌面的，应该默认是5.*\n* *关机就可以终端输入init 0，重启就init 6*\n\n7.默认级别在centos7之前是/etc/inittab文件设置的，之后就由systemctl接管了\n* 查看默认运行级别的方式为:\n> systemctl get-default\n* 设置默认运行级别的方式:\n> systemctl set-default TARGET.target\n\n\n*级别分别对应如下: *\n* > shutdown.target\n* > emergency.target\n* > rescure.target\n* > multi-user.target\n* > 无\n* > graphical.target\n* > 无\n\n#### 2. 每个等级，系统初始化运行了哪些脚本呢\n\n* /etc/init.d/ 目录是个软连接 实际是/etc/rc.d/init.d\n* /etc/rc1.d/\n* /etc/rc2.d/\n* /etc/rc3.d/\n* /etc/rc4.d/\n* /etc/rc5.d/\n* /etc/rc6.d/ 以上6个目录也都是软连接，实际是/etc/rc.d/目录下的\n\n\n* *最终就是/etc/rc.d/init.d/ 和/etc/rc.d/rcX.d/目录了*\n* *但是rcX.d/目录下的文件实质也是软连接，指向/etc/rc.d/init.d/目录下的脚本*\n\n\n#### 3. 添加开机启动项(chkconfig)\n* 经过之前的分析，实际上就是/etc/rc.d/init.d 目录下的东东，分析发现 都是shell脚本\n* 脚本 按自己的操作写就ok\n* 比如你写一个nginx自启动的脚本/etc/rc.d/init.d/nginx\n\n```shell\n#! /bin/bash\n\n#chkconfig: 2345 80 90\n#description:auto_run\n. /etc/init.d/functions\nif [ \"$1\" == \"start\" ]; then\n    /usr/local/openresty/nginx/sbin/nginx\n    exit  0\nfi\n\nif [ \"$1\" == \"stop\" ]; then\n    /usr/local/openresty/nginx/sbin/nginx -s stop\n    exit  0\nfi\n\n\nif [[ $1 == 'reload' ]]; then\n    /usr/local/openresty/nginx/sbin/nginx -s reload\n    exit  0\nfi\n\necho \"sh nginx start|stop|reload\"\n```\n* chmod +x nginx\n* chkconfig --add nginx (老写法：chkconfig nginx on)\n* **这样在对应等级rcX.d/目录下就会生成对应的链接，K开头脚本这个服务关闭，S开头的脚本是这个服务要开启.**\n* 每个添加的自启动脚本必须要有2行注释：\n* > #chkconfig: 2345 80 90\n* > #description:nginx_test 可以随便写描述\n*  centos7 开头这么加也可以\n```shell\n### BEGIN INIT INFO\n# Provides:          php-fpm\n# Required-Start:    $remote_fs $network\n# Required-Stop:     $remote_fs $network\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: starts php-fpm\n# Description:       starts the PHP FastCGI Process Manager daemon\n### END INIT INFO\n```\n* 解释下: 2345表示四个启动等级可以需要运行nginx服务; 在rc2|3|4|5.d目录下生成S**80**nginx脚本，rc0|6.d目录下生成K**90**nginx脚本都指向/etc/rc.d/init.d/nginx脚本（80，90为了标识脚本含义是开启还是关闭，虽然脚本内容一样，但是**K开头执行时加参数 stop，S开头的执行时加参数 start**）\n\n#### 4. 在rc.local文件中添加启动项\n* /etc/rc.d/init.d/rc.local 这个是init.d--> rc.d 执行或之后执行的脚本，通常是用户自己定义的一些开机启动任务.\n\n* **下次总结一下Centos6的启动顺序**\n","source":"_posts/linux/一文了解linux开机启动.md","raw":"---\nlayout: post\ntitle: 如何在centos7中添加开机启动项\ncategory: linux\ntags: hexo\ndate: 2019-6-08 10:34:58\ncomments: true\n---\n\n#### 1. linux的启动等级\n0 关机模式\n1 单用户模式\n2 无网络多用户模式\n3 有网络多用户模式，如果没网络和2一样。\n4.系统保留，未使用\n5.GUI图形界面\n6.重启模式，默认不能是这个级别，否则就会无限循环重启\n* *正常默认就是3了, 命令行模式，有桌面的，应该默认是5.*\n* *关机就可以终端输入init 0，重启就init 6*\n\n7.默认级别在centos7之前是/etc/inittab文件设置的，之后就由systemctl接管了\n* 查看默认运行级别的方式为:\n> systemctl get-default\n* 设置默认运行级别的方式:\n> systemctl set-default TARGET.target\n\n\n*级别分别对应如下: *\n* > shutdown.target\n* > emergency.target\n* > rescure.target\n* > multi-user.target\n* > 无\n* > graphical.target\n* > 无\n\n#### 2. 每个等级，系统初始化运行了哪些脚本呢\n\n* /etc/init.d/ 目录是个软连接 实际是/etc/rc.d/init.d\n* /etc/rc1.d/\n* /etc/rc2.d/\n* /etc/rc3.d/\n* /etc/rc4.d/\n* /etc/rc5.d/\n* /etc/rc6.d/ 以上6个目录也都是软连接，实际是/etc/rc.d/目录下的\n\n\n* *最终就是/etc/rc.d/init.d/ 和/etc/rc.d/rcX.d/目录了*\n* *但是rcX.d/目录下的文件实质也是软连接，指向/etc/rc.d/init.d/目录下的脚本*\n\n\n#### 3. 添加开机启动项(chkconfig)\n* 经过之前的分析，实际上就是/etc/rc.d/init.d 目录下的东东，分析发现 都是shell脚本\n* 脚本 按自己的操作写就ok\n* 比如你写一个nginx自启动的脚本/etc/rc.d/init.d/nginx\n\n```shell\n#! /bin/bash\n\n#chkconfig: 2345 80 90\n#description:auto_run\n. /etc/init.d/functions\nif [ \"$1\" == \"start\" ]; then\n    /usr/local/openresty/nginx/sbin/nginx\n    exit  0\nfi\n\nif [ \"$1\" == \"stop\" ]; then\n    /usr/local/openresty/nginx/sbin/nginx -s stop\n    exit  0\nfi\n\n\nif [[ $1 == 'reload' ]]; then\n    /usr/local/openresty/nginx/sbin/nginx -s reload\n    exit  0\nfi\n\necho \"sh nginx start|stop|reload\"\n```\n* chmod +x nginx\n* chkconfig --add nginx (老写法：chkconfig nginx on)\n* **这样在对应等级rcX.d/目录下就会生成对应的链接，K开头脚本这个服务关闭，S开头的脚本是这个服务要开启.**\n* 每个添加的自启动脚本必须要有2行注释：\n* > #chkconfig: 2345 80 90\n* > #description:nginx_test 可以随便写描述\n*  centos7 开头这么加也可以\n```shell\n### BEGIN INIT INFO\n# Provides:          php-fpm\n# Required-Start:    $remote_fs $network\n# Required-Stop:     $remote_fs $network\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: starts php-fpm\n# Description:       starts the PHP FastCGI Process Manager daemon\n### END INIT INFO\n```\n* 解释下: 2345表示四个启动等级可以需要运行nginx服务; 在rc2|3|4|5.d目录下生成S**80**nginx脚本，rc0|6.d目录下生成K**90**nginx脚本都指向/etc/rc.d/init.d/nginx脚本（80，90为了标识脚本含义是开启还是关闭，虽然脚本内容一样，但是**K开头执行时加参数 stop，S开头的执行时加参数 start**）\n\n#### 4. 在rc.local文件中添加启动项\n* /etc/rc.d/init.d/rc.local 这个是init.d--> rc.d 执行或之后执行的脚本，通常是用户自己定义的一些开机启动任务.\n\n* **下次总结一下Centos6的启动顺序**\n","slug":"linux/一文了解linux开机启动","published":1,"updated":"2019-06-09T00:33:51.058Z","photos":[],"link":"","_id":"cjwxes5dh0024hdli32vb1ykx","content":"<h4 id=\"1-linux的启动等级\"><a href=\"#1-linux的启动等级\" class=\"headerlink\" title=\"1. linux的启动等级\"></a>1. linux的启动等级</h4><p>0 关机模式<br>1 单用户模式<br>2 无网络多用户模式<br>3 有网络多用户模式，如果没网络和2一样。<br>4.系统保留，未使用<br>5.GUI图形界面<br>6.重启模式，默认不能是这个级别，否则就会无限循环重启</p>\n<ul>\n<li><em>正常默认就是3了, 命令行模式，有桌面的，应该默认是5.</em></li>\n<li><em>关机就可以终端输入init 0，重启就init 6</em></li>\n</ul>\n<p>7.默认级别在centos7之前是/etc/inittab文件设置的，之后就由systemctl接管了</p>\n<ul>\n<li>查看默认运行级别的方式为:<blockquote>\n<p>systemctl get-default</p>\n</blockquote>\n</li>\n<li>设置默认运行级别的方式:<blockquote>\n<p>systemctl set-default TARGET.target</p>\n</blockquote>\n</li>\n</ul>\n<p><em>级别分别对应如下: </em></p>\n<ul>\n<li><blockquote>\n<p>shutdown.target</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>emergency.target</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>rescure.target</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>multi-user.target</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>无</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>graphical.target</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>无</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"2-每个等级，系统初始化运行了哪些脚本呢\"><a href=\"#2-每个等级，系统初始化运行了哪些脚本呢\" class=\"headerlink\" title=\"2. 每个等级，系统初始化运行了哪些脚本呢\"></a>2. 每个等级，系统初始化运行了哪些脚本呢</h4><ul>\n<li>/etc/init.d/ 目录是个软连接 实际是/etc/rc.d/init.d</li>\n<li>/etc/rc1.d/</li>\n<li>/etc/rc2.d/</li>\n<li>/etc/rc3.d/</li>\n<li>/etc/rc4.d/</li>\n<li>/etc/rc5.d/</li>\n<li>/etc/rc6.d/ 以上6个目录也都是软连接，实际是/etc/rc.d/目录下的</li>\n</ul>\n<ul>\n<li><em>最终就是/etc/rc.d/init.d/ 和/etc/rc.d/rcX.d/目录了</em></li>\n<li><em>但是rcX.d/目录下的文件实质也是软连接，指向/etc/rc.d/init.d/目录下的脚本</em></li>\n</ul>\n<h4 id=\"3-添加开机启动项-chkconfig\"><a href=\"#3-添加开机启动项-chkconfig\" class=\"headerlink\" title=\"3. 添加开机启动项(chkconfig)\"></a>3. 添加开机启动项(chkconfig)</h4><ul>\n<li>经过之前的分析，实际上就是/etc/rc.d/init.d 目录下的东东，分析发现 都是shell脚本</li>\n<li>脚本 按自己的操作写就ok</li>\n<li>比如你写一个nginx自启动的脚本/etc/rc.d/init.d/nginx</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>! /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>chkconfig: 2345 80 90</span><br><span class=\"line\"><span class=\"meta\">#</span>description:auto_run</span><br><span class=\"line\">. /etc/init.d/functions</span><br><span class=\"line\">if [ \"$1\" == \"start\" ]; then</span><br><span class=\"line\">    /usr/local/openresty/nginx/sbin/nginx</span><br><span class=\"line\">    exit  0</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ \"$1\" == \"stop\" ]; then</span><br><span class=\"line\">    /usr/local/openresty/nginx/sbin/nginx -s stop</span><br><span class=\"line\">    exit  0</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $1 == 'reload' ]]; then</span><br><span class=\"line\">    /usr/local/openresty/nginx/sbin/nginx -s reload</span><br><span class=\"line\">    exit  0</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo \"sh nginx start|stop|reload\"</span><br></pre></td></tr></table></figure>\n<ul>\n<li>chmod +x nginx</li>\n<li>chkconfig –add nginx (老写法：chkconfig nginx on)</li>\n<li><strong>这样在对应等级rcX.d/目录下就会生成对应的链接，K开头脚本这个服务关闭，S开头的脚本是这个服务要开启.</strong></li>\n<li>每个添加的自启动脚本必须要有2行注释：</li>\n<li><blockquote>\n<p>#chkconfig: 2345 80 90</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>#description:nginx_test 可以随便写描述</p>\n</blockquote>\n</li>\n<li><p>centos7 开头这么加也可以</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>## BEGIN INIT INFO</span><br><span class=\"line\"><span class=\"meta\">#</span> Provides:          php-fpm</span><br><span class=\"line\"><span class=\"meta\">#</span> Required-Start:    $remote_fs $network</span><br><span class=\"line\"><span class=\"meta\">#</span> Required-Stop:     $remote_fs $network</span><br><span class=\"line\"><span class=\"meta\">#</span> Default-Start:     2 3 4 5</span><br><span class=\"line\"><span class=\"meta\">#</span> Default-Stop:      0 1 6</span><br><span class=\"line\"><span class=\"meta\">#</span> Short-Description: starts php-fpm</span><br><span class=\"line\"><span class=\"meta\">#</span> Description:       starts the PHP FastCGI Process Manager daemon</span><br><span class=\"line\"><span class=\"meta\">#</span>## END INIT INFO</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解释下: 2345表示四个启动等级可以需要运行nginx服务; 在rc2|3|4|5.d目录下生成S<strong>80</strong>nginx脚本，rc0|6.d目录下生成K<strong>90</strong>nginx脚本都指向/etc/rc.d/init.d/nginx脚本（80，90为了标识脚本含义是开启还是关闭，虽然脚本内容一样，但是<strong>K开头执行时加参数 stop，S开头的执行时加参数 start</strong>）</p>\n</li>\n</ul>\n<h4 id=\"4-在rc-local文件中添加启动项\"><a href=\"#4-在rc-local文件中添加启动项\" class=\"headerlink\" title=\"4. 在rc.local文件中添加启动项\"></a>4. 在rc.local文件中添加启动项</h4><ul>\n<li><p>/etc/rc.d/init.d/rc.local 这个是init.d–&gt; rc.d 执行或之后执行的脚本，通常是用户自己定义的一些开机启动任务.</p>\n</li>\n<li><p><strong>下次总结一下Centos6的启动顺序</strong></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-linux的启动等级\"><a href=\"#1-linux的启动等级\" class=\"headerlink\" title=\"1. linux的启动等级\"></a>1. linux的启动等级</h4><p>0 关机模式<br>1 单用户模式<br>2 无网络多用户模式<br>3 有网络多用户模式，如果没网络和2一样。<br>4.系统保留，未使用<br>5.GUI图形界面<br>6.重启模式，默认不能是这个级别，否则就会无限循环重启</p>\n<ul>\n<li><em>正常默认就是3了, 命令行模式，有桌面的，应该默认是5.</em></li>\n<li><em>关机就可以终端输入init 0，重启就init 6</em></li>\n</ul>\n<p>7.默认级别在centos7之前是/etc/inittab文件设置的，之后就由systemctl接管了</p>\n<ul>\n<li>查看默认运行级别的方式为:<blockquote>\n<p>systemctl get-default</p>\n</blockquote>\n</li>\n<li>设置默认运行级别的方式:<blockquote>\n<p>systemctl set-default TARGET.target</p>\n</blockquote>\n</li>\n</ul>\n<p><em>级别分别对应如下: </em></p>\n<ul>\n<li><blockquote>\n<p>shutdown.target</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>emergency.target</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>rescure.target</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>multi-user.target</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>无</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>graphical.target</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>无</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"2-每个等级，系统初始化运行了哪些脚本呢\"><a href=\"#2-每个等级，系统初始化运行了哪些脚本呢\" class=\"headerlink\" title=\"2. 每个等级，系统初始化运行了哪些脚本呢\"></a>2. 每个等级，系统初始化运行了哪些脚本呢</h4><ul>\n<li>/etc/init.d/ 目录是个软连接 实际是/etc/rc.d/init.d</li>\n<li>/etc/rc1.d/</li>\n<li>/etc/rc2.d/</li>\n<li>/etc/rc3.d/</li>\n<li>/etc/rc4.d/</li>\n<li>/etc/rc5.d/</li>\n<li>/etc/rc6.d/ 以上6个目录也都是软连接，实际是/etc/rc.d/目录下的</li>\n</ul>\n<ul>\n<li><em>最终就是/etc/rc.d/init.d/ 和/etc/rc.d/rcX.d/目录了</em></li>\n<li><em>但是rcX.d/目录下的文件实质也是软连接，指向/etc/rc.d/init.d/目录下的脚本</em></li>\n</ul>\n<h4 id=\"3-添加开机启动项-chkconfig\"><a href=\"#3-添加开机启动项-chkconfig\" class=\"headerlink\" title=\"3. 添加开机启动项(chkconfig)\"></a>3. 添加开机启动项(chkconfig)</h4><ul>\n<li>经过之前的分析，实际上就是/etc/rc.d/init.d 目录下的东东，分析发现 都是shell脚本</li>\n<li>脚本 按自己的操作写就ok</li>\n<li>比如你写一个nginx自启动的脚本/etc/rc.d/init.d/nginx</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>! /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>chkconfig: 2345 80 90</span><br><span class=\"line\"><span class=\"meta\">#</span>description:auto_run</span><br><span class=\"line\">. /etc/init.d/functions</span><br><span class=\"line\">if [ \"$1\" == \"start\" ]; then</span><br><span class=\"line\">    /usr/local/openresty/nginx/sbin/nginx</span><br><span class=\"line\">    exit  0</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ \"$1\" == \"stop\" ]; then</span><br><span class=\"line\">    /usr/local/openresty/nginx/sbin/nginx -s stop</span><br><span class=\"line\">    exit  0</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $1 == 'reload' ]]; then</span><br><span class=\"line\">    /usr/local/openresty/nginx/sbin/nginx -s reload</span><br><span class=\"line\">    exit  0</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo \"sh nginx start|stop|reload\"</span><br></pre></td></tr></table></figure>\n<ul>\n<li>chmod +x nginx</li>\n<li>chkconfig –add nginx (老写法：chkconfig nginx on)</li>\n<li><strong>这样在对应等级rcX.d/目录下就会生成对应的链接，K开头脚本这个服务关闭，S开头的脚本是这个服务要开启.</strong></li>\n<li>每个添加的自启动脚本必须要有2行注释：</li>\n<li><blockquote>\n<p>#chkconfig: 2345 80 90</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>#description:nginx_test 可以随便写描述</p>\n</blockquote>\n</li>\n<li><p>centos7 开头这么加也可以</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>## BEGIN INIT INFO</span><br><span class=\"line\"><span class=\"meta\">#</span> Provides:          php-fpm</span><br><span class=\"line\"><span class=\"meta\">#</span> Required-Start:    $remote_fs $network</span><br><span class=\"line\"><span class=\"meta\">#</span> Required-Stop:     $remote_fs $network</span><br><span class=\"line\"><span class=\"meta\">#</span> Default-Start:     2 3 4 5</span><br><span class=\"line\"><span class=\"meta\">#</span> Default-Stop:      0 1 6</span><br><span class=\"line\"><span class=\"meta\">#</span> Short-Description: starts php-fpm</span><br><span class=\"line\"><span class=\"meta\">#</span> Description:       starts the PHP FastCGI Process Manager daemon</span><br><span class=\"line\"><span class=\"meta\">#</span>## END INIT INFO</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解释下: 2345表示四个启动等级可以需要运行nginx服务; 在rc2|3|4|5.d目录下生成S<strong>80</strong>nginx脚本，rc0|6.d目录下生成K<strong>90</strong>nginx脚本都指向/etc/rc.d/init.d/nginx脚本（80，90为了标识脚本含义是开启还是关闭，虽然脚本内容一样，但是<strong>K开头执行时加参数 stop，S开头的执行时加参数 start</strong>）</p>\n</li>\n</ul>\n<h4 id=\"4-在rc-local文件中添加启动项\"><a href=\"#4-在rc-local文件中添加启动项\" class=\"headerlink\" title=\"4. 在rc.local文件中添加启动项\"></a>4. 在rc.local文件中添加启动项</h4><ul>\n<li><p>/etc/rc.d/init.d/rc.local 这个是init.d–&gt; rc.d 执行或之后执行的脚本，通常是用户自己定义的一些开机启动任务.</p>\n</li>\n<li><p><strong>下次总结一下Centos6的启动顺序</strong></p>\n</li>\n</ul>\n"},{"layout":"post","title":"vim-markdown插件","date":"2016-10-27T07:30:00.000Z","_content":"\n# 首先为了高亮显示markdown文件 ，安装vim-markdown插件(vundle管理的)\n\n```shell\nPlugin 'godlygeek/tabular'\nPlugin 'tpope/vim-markdown'\n```\n\n# 安装时时预览插件 只支持macos/linux ,打开markdown文件就会出现浏览器窗口预览\n\n```shell\n\"Plugin 'suan/vim-instant-markdown' \n```\n#windows 下有一个python2支持的插件，也能预览\n\n需要python2的支持--python2.7就可以。\n需要nodejs的支持，自行安装。\n完成后：\n\n```shell\nnpm -g install instant-markdown-d\n```\n\n在vim配置文件中添加:\n\n```shell\nPlugin 'suan/vim-instant-markdown'\n```\n打开vim 更新安装插件 ：\n\n```shell\n:PluginInstall\n```\n\n\n\n","source":"_posts/linux/vim-markdown.md","raw":"---\nlayout: post\ntitle: vim-markdown插件\ndate: 2016-10-27 15:30:00\ntags: vim \n\n---\n\n# 首先为了高亮显示markdown文件 ，安装vim-markdown插件(vundle管理的)\n\n```shell\nPlugin 'godlygeek/tabular'\nPlugin 'tpope/vim-markdown'\n```\n\n# 安装时时预览插件 只支持macos/linux ,打开markdown文件就会出现浏览器窗口预览\n\n```shell\n\"Plugin 'suan/vim-instant-markdown' \n```\n#windows 下有一个python2支持的插件，也能预览\n\n需要python2的支持--python2.7就可以。\n需要nodejs的支持，自行安装。\n完成后：\n\n```shell\nnpm -g install instant-markdown-d\n```\n\n在vim配置文件中添加:\n\n```shell\nPlugin 'suan/vim-instant-markdown'\n```\n打开vim 更新安装插件 ：\n\n```shell\n:PluginInstall\n```\n\n\n\n","slug":"linux/vim-markdown","published":1,"updated":"2019-05-19T14:18:38.610Z","comments":1,"photos":[],"link":"","_id":"cjwxes5di0027hdlibqzw2v41","content":"<h1 id=\"首先为了高亮显示markdown文件-，安装vim-markdown插件-vundle管理的\"><a href=\"#首先为了高亮显示markdown文件-，安装vim-markdown插件-vundle管理的\" class=\"headerlink\" title=\"首先为了高亮显示markdown文件 ，安装vim-markdown插件(vundle管理的)\"></a>首先为了高亮显示markdown文件 ，安装vim-markdown插件(vundle管理的)</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plugin 'godlygeek/tabular'</span><br><span class=\"line\">Plugin 'tpope/vim-markdown'</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装时时预览插件-只支持macos-linux-打开markdown文件就会出现浏览器窗口预览\"><a href=\"#安装时时预览插件-只支持macos-linux-打开markdown文件就会出现浏览器窗口预览\" class=\"headerlink\" title=\"安装时时预览插件 只支持macos/linux ,打开markdown文件就会出现浏览器窗口预览\"></a>安装时时预览插件 只支持macos/linux ,打开markdown文件就会出现浏览器窗口预览</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"Plugin 'suan/vim-instant-markdown'</span><br></pre></td></tr></table></figure>\n<p>#windows 下有一个python2支持的插件，也能预览</p>\n<p>需要python2的支持–python2.7就可以。<br>需要nodejs的支持，自行安装。<br>完成后：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -g install instant-markdown-d</span><br></pre></td></tr></table></figure>\n<p>在vim配置文件中添加:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plugin 'suan/vim-instant-markdown'</span><br></pre></td></tr></table></figure>\n<p>打开vim 更新安装插件 ：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:PluginInstall</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"首先为了高亮显示markdown文件-，安装vim-markdown插件-vundle管理的\"><a href=\"#首先为了高亮显示markdown文件-，安装vim-markdown插件-vundle管理的\" class=\"headerlink\" title=\"首先为了高亮显示markdown文件 ，安装vim-markdown插件(vundle管理的)\"></a>首先为了高亮显示markdown文件 ，安装vim-markdown插件(vundle管理的)</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plugin 'godlygeek/tabular'</span><br><span class=\"line\">Plugin 'tpope/vim-markdown'</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装时时预览插件-只支持macos-linux-打开markdown文件就会出现浏览器窗口预览\"><a href=\"#安装时时预览插件-只支持macos-linux-打开markdown文件就会出现浏览器窗口预览\" class=\"headerlink\" title=\"安装时时预览插件 只支持macos/linux ,打开markdown文件就会出现浏览器窗口预览\"></a>安装时时预览插件 只支持macos/linux ,打开markdown文件就会出现浏览器窗口预览</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"Plugin 'suan/vim-instant-markdown'</span><br></pre></td></tr></table></figure>\n<p>#windows 下有一个python2支持的插件，也能预览</p>\n<p>需要python2的支持–python2.7就可以。<br>需要nodejs的支持，自行安装。<br>完成后：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -g install instant-markdown-d</span><br></pre></td></tr></table></figure>\n<p>在vim配置文件中添加:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plugin 'suan/vim-instant-markdown'</span><br></pre></td></tr></table></figure>\n<p>打开vim 更新安装插件 ：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:PluginInstall</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"DLL导出方法","date":"2016-10-06T12:04:30.000Z","comments":1,"_content":"\n# DLL导出方法\n\n## dll导出方法1 ：\n\n模块定义def文件，不支持c++的重载，以c的方式编译，导出的函数名不被修改，这样\n显示调用dll取得函数地址就没事。提供给vb，python等语言,需要_stdcall约定(函数自己清理堆栈)，这样无论是c文件还是c++文件，导出函数都会被改名字。所以dll做成必须要用def文件，否则找不到名字。除非你记得\n修饰过的函数名。\n\n## dll导出方法2：\n\n函数声明头文件声明如下：\n__declspec(dllexport)这种方式，方便c++代码的重载，同名函数不同参数，导出名字会被修饰，所以能区分开。\n这种方式实现了DLL的隐式调用（只提供dll的导出符号lib文件，就可直接调用函数，（只是导出函数符号，没有具体实现，\n不同于静态库的lib文件），def文件导出的dll不能用隐式调用，只能取得函数地址getProcAddress方式）\n\n```c\n\n#ifndef _EXSOPINF_H_\n#define _EXSOPINF_H_\n\n#ifdef __cplusplus  //cpp文件时，用c方式编译导出，不会修改导出函数名。但是_stdcall\n//调用也会修改，_cdecl(默认)调用不会修改\nextern \"C\" {\n#endif\n__declspec(dllexport) DWORD WINAPI function1( LPCSTR lpszFolderName, LPSTR lpszCode );\n__declspec(dllexport) DWORD WINAPI function2( LPCSTR lpszFolderName, LPSTR lpszCode );\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n\n函数定义时，也需要在函数名前：加入修饰\n__declspec(dllexport) DWORD WINAPI function1(LPCSTR lpszFolderName, LPSTR lpszCode ){\n\n    return 0;\n}\n其中WINAPI是调用约定。\n```\n## 常见调用约定\n\n```c\n\n调用协议常用场合\n__stdcall：Windows API默认的函数调用协议。\n__cdecl：C/C++默认的函数调用协议。\n__fastcall：适用于对性能要求较高的场合。\n函数参数入栈方式\n__stdcall：函数参数由右向左入栈。\n__cdecl：函数参数由右向左入栈。\n__fastcall：从左开始不大于4字节的参数放入CPU的ECX和EDX寄存器，其余参数从右向左入栈。\n问题一：__fastcall在寄存器中放入不大于4字节的参数，故性能较高，适用于需要高性能的场合。\n栈内数据清除方式\n__stdcall：函数调用结束后由被调用函数清除栈内数据。\n__cdecl：函数调用结束后由函数调用者清除栈内数据。\n__fastcall：函数调用结束后由被调用函数清除栈内数据。\n问题一：不同编译器设定的栈结构不尽相同，跨开发平台时由函数调用者清除栈内数据不可行。\n问题二：某些函数的参数是可变的，如printf函数，这样的函数只能由函数调用者清除栈内数据。\n问题三：由调用者清除栈内数据时，每次调用都包含清除栈内数据的代码，故可执行文件较大。\nC语言编译器函数名称修饰规则\n__stdcall：编译后，函数名被修饰为“_functionname@number”。\n__cdecl：编译后，函数名被修饰为“_functionname”。\n__fastcall：编译后，函数名给修饰为“@functionname@nmuber”。\n注：“functionname”为函数名，“number”为参数字节数。\n注：函数实现和函数定义时如果使用了不同的函数调用协议，则无法实现函数调用。\nC++语言编译器函数名称修饰规则\n__stdcall：编译后，函数名被修饰为“?functionname@@YG******@Z”。\n__cdecl：编译后，函数名被修饰为“?functionname@@YA******@Z”。\n__fastcall：编译后，函数名被修饰为“?functionname@@YI******@Z”。\n注：“******”为函数返回值类型和参数类型表。\n注：函数实现和函数定义时如果使用了不同的函数调用协议，则无法实现函数调用。\nC语言和C++语言间如果不进行特殊处理，也无法实现函数的互相调用。\n\n```\n\n\n## _stdcall与_cdecl的区别(函数调用方式)\n\n(1). 是C Declaration的缩写，表示C语言默认的函数调用方法，实际上也是C++的默认的函数调用方法。\n(2). 所有参数从右到左依次入栈，这些参数由调用者清除，称为手动清栈。具体所示：调用方的函数调用->被调用函数的执行->被调用函数的结果返回->调用方清除调整堆栈。\n(3). 被调用函数无需要求调用者传递多少参数，调用者传递过多或者过少的参数，甚至完全不同的参数都不会产生编译阶段的错误。总的来说函数的参数个数可变的(就像printf函数一样)，因为只有调用者才知道它传给被调用函数几个参数，才能在调用结束时适当地调整堆栈。\n(4). 因为每个调用的地方都需要生成一段调整堆栈的代码，所以最后生成的文件较大。\n\n###   _stdcall(CALLBACK/WINAPI)\n\n(1). 是Standard Call的缩写，要想函数按照此调用方式必须在函数名加入_stdcall，通常_ win32 api 应该是_stdcall调用规则。通过VC++编写的DLL欲被其他语言编写的程序调用，应将函数的调用方式声明为_stdcall 方式，WINAPI都采用这种方式。\n(2).  所有参数从右到左依次入栈，如果是调用类成员的话，最后一个入栈的是this指针。具体所示：调用方的函数调用->被调用函数的执行-> 被调用方清除调整堆栈->被调用函数的结果返回。\n(3).  这些堆栈中的参数由被调用的函数在返回后清除，使用的指令是 retn X，X表示参数占用的字节数，CPU在ret之后自动弹出X个字节的堆栈空间。称为自动清栈。\n(4).  函数在编译的时候就必须确定参数个数，并且调用者必须严格的控制参数的生成，不能多，不能少，否则返回后会出错。总的来说，就是函数的参数个数不能是可变的。是从 _cdecl 修改而来, _stdcall 不支持可变参数,并且清栈由被调用者负责,其他的都一样\n(5).  因为只需在被调用函数的地方生成一段调整堆栈的代码，所以最后生成的文件较小。\n\nPASCAL 是Pascal语言的函数调用方式，也可以在C/C++中使用，参数压栈顺序与前两者相反。返回时的清栈方式忘记了。。。\n\n_fastcall 是编译器指定的快速调用方式。由于大多数的函数参数个数很少，使用堆栈传递比较费时。因此_fastcall通常规定将前两个（或若干个）参数由寄存器传递，其余参数还是通过堆栈传递。不同编译器编译的程序规定的寄存器不同。返回方式和_stdcall相当。\n\n_thiscall 是为了解决类成员调用中this指针传递而规定的。_thiscall要求把this指针放在特定寄存器中，该寄存器由编译器决定。VC使用ecx，Borland的C++编译器使用eax。返回方式和_stdcall相当。\n\n_fastcall 和 _thiscall涉及的寄存器由编译器决定，因此不能用作跨编译器的接口。所以Windows上的COM对象接口都定义为_stdcall调用方式。\n\nC中不加说明默认函数为_cdecl方式（C中也只能用这种方式），C++也一样，但是默认的调用方式可以在IDE环境中设置。\n\n带有可变参数的函数必须且只能使用_cdecl方式，例如下面的函数:\n      int printf(char * fmtStr, ...);\n\n      int scanf(char * fmtStr, ...);\n\n###  函数名修饰\n\n(1). _cdecl ：对于_cdecl而言，如果对于定义在C程序文件(编译器会通过后缀名为.C判断)的输出函数，函数名会保持原样；对于定义在C++程序文件中的输出函数，函数名会被修饰(见10)。为使函数名不被修饰，有两种方法：A.可通过在前面加上extern “c”以去除函数名修饰；B. 可通过.def文件去除函数名修饰。\n\n(2). _stdcall：无论是C程序文件中的输出函数还是C++程序文件中的输出函数，函数名都会被修饰。对于定义在C++程序文件中的输出函数，好像更复杂，和_cdecl的情况类似。去除函数名修饰方法：只能通过.def文件去除函数名修饰。\n\n### 函数名修饰规则：\n\n(1). 为什么要函数名修饰：\n      函数名修饰就是编译器在编译期间创建的一个字符串，用来指明函数的定义和原型。LINK程序或其他工具有时需要指定函数的名字修饰来定位函数的正确位置。多少情况下程序员并不需要知道函数的名字修饰，LINK程序或其他工具会自动区分他们。当然，在某些情况下需要指定函数名修饰，例如在c++程序中，为了让LINK程序或其他工具能够匹配到正确的函数名字，就必须为重载函数后一些特殊函数(如构造函数和析构函数)指定名字修饰。另一种需要指定函数名修饰的情况是在汇编程序中调用C或C++函数。\n(2). C语言：\n      对于_stdcall调用约定，编译器和链接器会在输出函数名前加上一个下划线前缀，函数名后面加上一个“@”符号和其参数的字节数，例如_functionname@number。_cdecl调用约定仅在输出函数名前加上一个下划线前缀，例如_functionname。_fastcall调用约定在输出函数名前加上一个 “@“符号，后面也是一个”@“符号和其参数的字节数，例如@functionname@number。\n(3). C++语言：\n   C++的函数名修饰规则有些复杂，但是信息更充分，通过分析修饰名不仅能够知道函数的调用方式，返回值类型，参数个数甚至参数类型。不管__cdecl，__fastcall还是__stdcall调用方式，函数修饰都是以一个“?”开始，后面紧跟函数的名字，再后面是参数表的开始标识和按照参数类型代号拼出的参数表。对于__stdcall方式，参数表的开始标识是“@@YG”，对于__cdecl方式则是“@@YA”，对于__fastcall方式则是“@@YI”。参数表的拼写代号如下所示：\nX--void\nD--char\nE--unsigned char\nF--short\nH--int\nI--unsigned int\nJ--long\nK--unsigned long（DWORD）\nM--float\nN--double\n_N—bool\nU—struct\n\n指针的方式有些特别，用PA表示指针，用PB表示const类型的指针。后面的代号表明指针类型，如果相同类型的指针连续出现，以“0”代替，一个“0”代表一次重复。U表示结构类型，通常后跟结构体的类型名，用“@@”表示结构类型名的结束。函数的返回值不作特殊处理，它的描述方式和函数参数一样，紧跟着参数表的开始标志，也就是说，函数参数表的第一项实际上是表示函数的返回值类型。参数表后以“@Z”标识整个名字的结束，如果该函数无参数，则以“Z”标识结束。下面举两个例子，假如有以下函数声明：\nint Function1(char *var1,unsigned long);\n其函数修饰名为“?Function1@@YGHPADK@Z”，而对于函数声明：\noid Function2();\n其函数修饰名则为“?Function2@@YGXXZ” 。\n对于C++的类成员函数（其调用方式是thiscall），函数的名字修饰与非成员的C++函数稍有不同，首先就是在函数名字和参数表之间插入以“@”字符引导的类名；其次是参数表的开始标识不同，公有（public）成员函数的标识是“@@QAE”,保护（protected）成员函数的标识是“@@IAE”,私有（private）成员函数的标识是“@@AAE”，如果函数声明使用了const关键字，则相应的标识应分别为“@@QBE”，“@@IBE”和“@@ABE”。如果参数类型是类实例的引用，则使用“AAV1”，对于const类型的引用，则使用“ABV1”。\n\n###   查看函数的名字修饰\n 有两种方式可以检查你的程序中的函数的名字修饰：使用编译输出列表或使用Dumpbin工具。使用/FAc，/FAs或/FAcs命令行参数可以让编译器输出函数或变量名字列表。使用dumpbin.exe /SYMBOLS命令也可以获得obj文件或lib文件中的函数或变量名字列表。此外，还可以使用 undname.exe 将修饰名转换为未修饰形式。\n\n###   _beginthread需要_cdecl的线程函数地址，_beginthreadex和_CreateThread需要_stdcall的线程函数地址。\n\n```c\n\n#define CALLBACK __stdcall //这就是传说中的回调函数\n#define WINAPI __stdcall //这就是传说中的WINAPI\n#define WINAPIV __cdecl\n#define APIENTRY WINAPI //DllMain的入口就在这里\n#define APIPRIVATE __stdcall\n#define PASCAL __stdcall\n```\n","source":"_posts/linux/dll_export.md","raw":"---\nlayout: post\ntitle:  DLL导出方法\ncategory: windows \ndate: 2016-10-6 20:04:30\ncomments: true\n---\n\n# DLL导出方法\n\n## dll导出方法1 ：\n\n模块定义def文件，不支持c++的重载，以c的方式编译，导出的函数名不被修改，这样\n显示调用dll取得函数地址就没事。提供给vb，python等语言,需要_stdcall约定(函数自己清理堆栈)，这样无论是c文件还是c++文件，导出函数都会被改名字。所以dll做成必须要用def文件，否则找不到名字。除非你记得\n修饰过的函数名。\n\n## dll导出方法2：\n\n函数声明头文件声明如下：\n__declspec(dllexport)这种方式，方便c++代码的重载，同名函数不同参数，导出名字会被修饰，所以能区分开。\n这种方式实现了DLL的隐式调用（只提供dll的导出符号lib文件，就可直接调用函数，（只是导出函数符号，没有具体实现，\n不同于静态库的lib文件），def文件导出的dll不能用隐式调用，只能取得函数地址getProcAddress方式）\n\n```c\n\n#ifndef _EXSOPINF_H_\n#define _EXSOPINF_H_\n\n#ifdef __cplusplus  //cpp文件时，用c方式编译导出，不会修改导出函数名。但是_stdcall\n//调用也会修改，_cdecl(默认)调用不会修改\nextern \"C\" {\n#endif\n__declspec(dllexport) DWORD WINAPI function1( LPCSTR lpszFolderName, LPSTR lpszCode );\n__declspec(dllexport) DWORD WINAPI function2( LPCSTR lpszFolderName, LPSTR lpszCode );\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n\n函数定义时，也需要在函数名前：加入修饰\n__declspec(dllexport) DWORD WINAPI function1(LPCSTR lpszFolderName, LPSTR lpszCode ){\n\n    return 0;\n}\n其中WINAPI是调用约定。\n```\n## 常见调用约定\n\n```c\n\n调用协议常用场合\n__stdcall：Windows API默认的函数调用协议。\n__cdecl：C/C++默认的函数调用协议。\n__fastcall：适用于对性能要求较高的场合。\n函数参数入栈方式\n__stdcall：函数参数由右向左入栈。\n__cdecl：函数参数由右向左入栈。\n__fastcall：从左开始不大于4字节的参数放入CPU的ECX和EDX寄存器，其余参数从右向左入栈。\n问题一：__fastcall在寄存器中放入不大于4字节的参数，故性能较高，适用于需要高性能的场合。\n栈内数据清除方式\n__stdcall：函数调用结束后由被调用函数清除栈内数据。\n__cdecl：函数调用结束后由函数调用者清除栈内数据。\n__fastcall：函数调用结束后由被调用函数清除栈内数据。\n问题一：不同编译器设定的栈结构不尽相同，跨开发平台时由函数调用者清除栈内数据不可行。\n问题二：某些函数的参数是可变的，如printf函数，这样的函数只能由函数调用者清除栈内数据。\n问题三：由调用者清除栈内数据时，每次调用都包含清除栈内数据的代码，故可执行文件较大。\nC语言编译器函数名称修饰规则\n__stdcall：编译后，函数名被修饰为“_functionname@number”。\n__cdecl：编译后，函数名被修饰为“_functionname”。\n__fastcall：编译后，函数名给修饰为“@functionname@nmuber”。\n注：“functionname”为函数名，“number”为参数字节数。\n注：函数实现和函数定义时如果使用了不同的函数调用协议，则无法实现函数调用。\nC++语言编译器函数名称修饰规则\n__stdcall：编译后，函数名被修饰为“?functionname@@YG******@Z”。\n__cdecl：编译后，函数名被修饰为“?functionname@@YA******@Z”。\n__fastcall：编译后，函数名被修饰为“?functionname@@YI******@Z”。\n注：“******”为函数返回值类型和参数类型表。\n注：函数实现和函数定义时如果使用了不同的函数调用协议，则无法实现函数调用。\nC语言和C++语言间如果不进行特殊处理，也无法实现函数的互相调用。\n\n```\n\n\n## _stdcall与_cdecl的区别(函数调用方式)\n\n(1). 是C Declaration的缩写，表示C语言默认的函数调用方法，实际上也是C++的默认的函数调用方法。\n(2). 所有参数从右到左依次入栈，这些参数由调用者清除，称为手动清栈。具体所示：调用方的函数调用->被调用函数的执行->被调用函数的结果返回->调用方清除调整堆栈。\n(3). 被调用函数无需要求调用者传递多少参数，调用者传递过多或者过少的参数，甚至完全不同的参数都不会产生编译阶段的错误。总的来说函数的参数个数可变的(就像printf函数一样)，因为只有调用者才知道它传给被调用函数几个参数，才能在调用结束时适当地调整堆栈。\n(4). 因为每个调用的地方都需要生成一段调整堆栈的代码，所以最后生成的文件较大。\n\n###   _stdcall(CALLBACK/WINAPI)\n\n(1). 是Standard Call的缩写，要想函数按照此调用方式必须在函数名加入_stdcall，通常_ win32 api 应该是_stdcall调用规则。通过VC++编写的DLL欲被其他语言编写的程序调用，应将函数的调用方式声明为_stdcall 方式，WINAPI都采用这种方式。\n(2).  所有参数从右到左依次入栈，如果是调用类成员的话，最后一个入栈的是this指针。具体所示：调用方的函数调用->被调用函数的执行-> 被调用方清除调整堆栈->被调用函数的结果返回。\n(3).  这些堆栈中的参数由被调用的函数在返回后清除，使用的指令是 retn X，X表示参数占用的字节数，CPU在ret之后自动弹出X个字节的堆栈空间。称为自动清栈。\n(4).  函数在编译的时候就必须确定参数个数，并且调用者必须严格的控制参数的生成，不能多，不能少，否则返回后会出错。总的来说，就是函数的参数个数不能是可变的。是从 _cdecl 修改而来, _stdcall 不支持可变参数,并且清栈由被调用者负责,其他的都一样\n(5).  因为只需在被调用函数的地方生成一段调整堆栈的代码，所以最后生成的文件较小。\n\nPASCAL 是Pascal语言的函数调用方式，也可以在C/C++中使用，参数压栈顺序与前两者相反。返回时的清栈方式忘记了。。。\n\n_fastcall 是编译器指定的快速调用方式。由于大多数的函数参数个数很少，使用堆栈传递比较费时。因此_fastcall通常规定将前两个（或若干个）参数由寄存器传递，其余参数还是通过堆栈传递。不同编译器编译的程序规定的寄存器不同。返回方式和_stdcall相当。\n\n_thiscall 是为了解决类成员调用中this指针传递而规定的。_thiscall要求把this指针放在特定寄存器中，该寄存器由编译器决定。VC使用ecx，Borland的C++编译器使用eax。返回方式和_stdcall相当。\n\n_fastcall 和 _thiscall涉及的寄存器由编译器决定，因此不能用作跨编译器的接口。所以Windows上的COM对象接口都定义为_stdcall调用方式。\n\nC中不加说明默认函数为_cdecl方式（C中也只能用这种方式），C++也一样，但是默认的调用方式可以在IDE环境中设置。\n\n带有可变参数的函数必须且只能使用_cdecl方式，例如下面的函数:\n      int printf(char * fmtStr, ...);\n\n      int scanf(char * fmtStr, ...);\n\n###  函数名修饰\n\n(1). _cdecl ：对于_cdecl而言，如果对于定义在C程序文件(编译器会通过后缀名为.C判断)的输出函数，函数名会保持原样；对于定义在C++程序文件中的输出函数，函数名会被修饰(见10)。为使函数名不被修饰，有两种方法：A.可通过在前面加上extern “c”以去除函数名修饰；B. 可通过.def文件去除函数名修饰。\n\n(2). _stdcall：无论是C程序文件中的输出函数还是C++程序文件中的输出函数，函数名都会被修饰。对于定义在C++程序文件中的输出函数，好像更复杂，和_cdecl的情况类似。去除函数名修饰方法：只能通过.def文件去除函数名修饰。\n\n### 函数名修饰规则：\n\n(1). 为什么要函数名修饰：\n      函数名修饰就是编译器在编译期间创建的一个字符串，用来指明函数的定义和原型。LINK程序或其他工具有时需要指定函数的名字修饰来定位函数的正确位置。多少情况下程序员并不需要知道函数的名字修饰，LINK程序或其他工具会自动区分他们。当然，在某些情况下需要指定函数名修饰，例如在c++程序中，为了让LINK程序或其他工具能够匹配到正确的函数名字，就必须为重载函数后一些特殊函数(如构造函数和析构函数)指定名字修饰。另一种需要指定函数名修饰的情况是在汇编程序中调用C或C++函数。\n(2). C语言：\n      对于_stdcall调用约定，编译器和链接器会在输出函数名前加上一个下划线前缀，函数名后面加上一个“@”符号和其参数的字节数，例如_functionname@number。_cdecl调用约定仅在输出函数名前加上一个下划线前缀，例如_functionname。_fastcall调用约定在输出函数名前加上一个 “@“符号，后面也是一个”@“符号和其参数的字节数，例如@functionname@number。\n(3). C++语言：\n   C++的函数名修饰规则有些复杂，但是信息更充分，通过分析修饰名不仅能够知道函数的调用方式，返回值类型，参数个数甚至参数类型。不管__cdecl，__fastcall还是__stdcall调用方式，函数修饰都是以一个“?”开始，后面紧跟函数的名字，再后面是参数表的开始标识和按照参数类型代号拼出的参数表。对于__stdcall方式，参数表的开始标识是“@@YG”，对于__cdecl方式则是“@@YA”，对于__fastcall方式则是“@@YI”。参数表的拼写代号如下所示：\nX--void\nD--char\nE--unsigned char\nF--short\nH--int\nI--unsigned int\nJ--long\nK--unsigned long（DWORD）\nM--float\nN--double\n_N—bool\nU—struct\n\n指针的方式有些特别，用PA表示指针，用PB表示const类型的指针。后面的代号表明指针类型，如果相同类型的指针连续出现，以“0”代替，一个“0”代表一次重复。U表示结构类型，通常后跟结构体的类型名，用“@@”表示结构类型名的结束。函数的返回值不作特殊处理，它的描述方式和函数参数一样，紧跟着参数表的开始标志，也就是说，函数参数表的第一项实际上是表示函数的返回值类型。参数表后以“@Z”标识整个名字的结束，如果该函数无参数，则以“Z”标识结束。下面举两个例子，假如有以下函数声明：\nint Function1(char *var1,unsigned long);\n其函数修饰名为“?Function1@@YGHPADK@Z”，而对于函数声明：\noid Function2();\n其函数修饰名则为“?Function2@@YGXXZ” 。\n对于C++的类成员函数（其调用方式是thiscall），函数的名字修饰与非成员的C++函数稍有不同，首先就是在函数名字和参数表之间插入以“@”字符引导的类名；其次是参数表的开始标识不同，公有（public）成员函数的标识是“@@QAE”,保护（protected）成员函数的标识是“@@IAE”,私有（private）成员函数的标识是“@@AAE”，如果函数声明使用了const关键字，则相应的标识应分别为“@@QBE”，“@@IBE”和“@@ABE”。如果参数类型是类实例的引用，则使用“AAV1”，对于const类型的引用，则使用“ABV1”。\n\n###   查看函数的名字修饰\n 有两种方式可以检查你的程序中的函数的名字修饰：使用编译输出列表或使用Dumpbin工具。使用/FAc，/FAs或/FAcs命令行参数可以让编译器输出函数或变量名字列表。使用dumpbin.exe /SYMBOLS命令也可以获得obj文件或lib文件中的函数或变量名字列表。此外，还可以使用 undname.exe 将修饰名转换为未修饰形式。\n\n###   _beginthread需要_cdecl的线程函数地址，_beginthreadex和_CreateThread需要_stdcall的线程函数地址。\n\n```c\n\n#define CALLBACK __stdcall //这就是传说中的回调函数\n#define WINAPI __stdcall //这就是传说中的WINAPI\n#define WINAPIV __cdecl\n#define APIENTRY WINAPI //DllMain的入口就在这里\n#define APIPRIVATE __stdcall\n#define PASCAL __stdcall\n```\n","slug":"linux/dll_export","published":1,"updated":"2019-05-19T14:30:17.032Z","photos":[],"link":"","_id":"cjwxes5dw002rhdlibs86473f","content":"<h1 id=\"DLL导出方法\"><a href=\"#DLL导出方法\" class=\"headerlink\" title=\"DLL导出方法\"></a>DLL导出方法</h1><h2 id=\"dll导出方法1-：\"><a href=\"#dll导出方法1-：\" class=\"headerlink\" title=\"dll导出方法1 ：\"></a>dll导出方法1 ：</h2><p>模块定义def文件，不支持c++的重载，以c的方式编译，导出的函数名不被修改，这样<br>显示调用dll取得函数地址就没事。提供给vb，python等语言,需要_stdcall约定(函数自己清理堆栈)，这样无论是c文件还是c++文件，导出函数都会被改名字。所以dll做成必须要用def文件，否则找不到名字。除非你记得<br>修饰过的函数名。</p>\n<h2 id=\"dll导出方法2：\"><a href=\"#dll导出方法2：\" class=\"headerlink\" title=\"dll导出方法2：\"></a>dll导出方法2：</h2><p>函数声明头文件声明如下：<br>__declspec(dllexport)这种方式，方便c++代码的重载，同名函数不同参数，导出名字会被修饰，所以能区分开。<br>这种方式实现了DLL的隐式调用（只提供dll的导出符号lib文件，就可直接调用函数，（只是导出函数符号，没有具体实现，<br>不同于静态库的lib文件），def文件导出的dll不能用隐式调用，只能取得函数地址getProcAddress方式）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _EXSOPINF_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _EXSOPINF_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus  <span class=\"comment\">//cpp文件时，用c方式编译导出，不会修改导出函数名。但是_stdcall</span></span></span><br><span class=\"line\"><span class=\"comment\">//调用也会修改，_cdecl(默认)调用不会修改</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">__declspec(dllexport) <span class=\"function\">DWORD WINAPI <span class=\"title\">function1</span><span class=\"params\">( LPCSTR lpszFolderName, LPSTR lpszCode )</span></span>;</span><br><span class=\"line\">__declspec(dllexport) <span class=\"function\">DWORD WINAPI <span class=\"title\">function2</span><span class=\"params\">( LPCSTR lpszFolderName, LPSTR lpszCode )</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">函数定义时，也需要在函数名前：加入修饰</span><br><span class=\"line\">__declspec(dllexport) <span class=\"function\">DWORD WINAPI <span class=\"title\">function1</span><span class=\"params\">(LPCSTR lpszFolderName, LPSTR lpszCode )</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">其中WINAPI是调用约定。</span><br></pre></td></tr></table></figure>\n<h2 id=\"常见调用约定\"><a href=\"#常见调用约定\" class=\"headerlink\" title=\"常见调用约定\"></a>常见调用约定</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">调用协议常用场合</span><br><span class=\"line\">__stdcall：Windows API默认的函数调用协议。</span><br><span class=\"line\">__cdecl：C/C++默认的函数调用协议。</span><br><span class=\"line\">__fastcall：适用于对性能要求较高的场合。</span><br><span class=\"line\">函数参数入栈方式</span><br><span class=\"line\">__stdcall：函数参数由右向左入栈。</span><br><span class=\"line\">__cdecl：函数参数由右向左入栈。</span><br><span class=\"line\">__fastcall：从左开始不大于<span class=\"number\">4</span>字节的参数放入CPU的ECX和EDX寄存器，其余参数从右向左入栈。</span><br><span class=\"line\">问题一：__fastcall在寄存器中放入不大于<span class=\"number\">4</span>字节的参数，故性能较高，适用于需要高性能的场合。</span><br><span class=\"line\">栈内数据清除方式</span><br><span class=\"line\">__stdcall：函数调用结束后由被调用函数清除栈内数据。</span><br><span class=\"line\">__cdecl：函数调用结束后由函数调用者清除栈内数据。</span><br><span class=\"line\">__fastcall：函数调用结束后由被调用函数清除栈内数据。</span><br><span class=\"line\">问题一：不同编译器设定的栈结构不尽相同，跨开发平台时由函数调用者清除栈内数据不可行。</span><br><span class=\"line\">问题二：某些函数的参数是可变的，如<span class=\"built_in\">printf</span>函数，这样的函数只能由函数调用者清除栈内数据。</span><br><span class=\"line\">问题三：由调用者清除栈内数据时，每次调用都包含清除栈内数据的代码，故可执行文件较大。</span><br><span class=\"line\">C语言编译器函数名称修饰规则</span><br><span class=\"line\">__stdcall：编译后，函数名被修饰为“_functionname@number”。</span><br><span class=\"line\">__cdecl：编译后，函数名被修饰为“_functionname”。</span><br><span class=\"line\">__fastcall：编译后，函数名给修饰为“@functionname@nmuber”。</span><br><span class=\"line\">注：“functionname”为函数名，“number”为参数字节数。</span><br><span class=\"line\">注：函数实现和函数定义时如果使用了不同的函数调用协议，则无法实现函数调用。</span><br><span class=\"line\">C++语言编译器函数名称修饰规则</span><br><span class=\"line\">__stdcall：编译后，函数名被修饰为“?functionname@@YG******@Z”。</span><br><span class=\"line\">__cdecl：编译后，函数名被修饰为“?functionname@@YA******@Z”。</span><br><span class=\"line\">__fastcall：编译后，函数名被修饰为“?functionname@@YI******@Z”。</span><br><span class=\"line\">注：“******”为函数返回值类型和参数类型表。</span><br><span class=\"line\">注：函数实现和函数定义时如果使用了不同的函数调用协议，则无法实现函数调用。</span><br><span class=\"line\">C语言和C++语言间如果不进行特殊处理，也无法实现函数的互相调用。</span><br></pre></td></tr></table></figure>\n<h2 id=\"stdcall与-cdecl的区别-函数调用方式\"><a href=\"#stdcall与-cdecl的区别-函数调用方式\" class=\"headerlink\" title=\"_stdcall与_cdecl的区别(函数调用方式)\"></a>_stdcall与_cdecl的区别(函数调用方式)</h2><p>(1). 是C Declaration的缩写，表示C语言默认的函数调用方法，实际上也是C++的默认的函数调用方法。<br>(2). 所有参数从右到左依次入栈，这些参数由调用者清除，称为手动清栈。具体所示：调用方的函数调用-&gt;被调用函数的执行-&gt;被调用函数的结果返回-&gt;调用方清除调整堆栈。<br>(3). 被调用函数无需要求调用者传递多少参数，调用者传递过多或者过少的参数，甚至完全不同的参数都不会产生编译阶段的错误。总的来说函数的参数个数可变的(就像printf函数一样)，因为只有调用者才知道它传给被调用函数几个参数，才能在调用结束时适当地调整堆栈。<br>(4). 因为每个调用的地方都需要生成一段调整堆栈的代码，所以最后生成的文件较大。</p>\n<h3 id=\"stdcall-CALLBACK-WINAPI\"><a href=\"#stdcall-CALLBACK-WINAPI\" class=\"headerlink\" title=\"_stdcall(CALLBACK/WINAPI)\"></a>_stdcall(CALLBACK/WINAPI)</h3><p>(1). 是Standard Call的缩写，要想函数按照此调用方式必须在函数名加入<em>stdcall，通常</em> win32 api 应该是_stdcall调用规则。通过VC++编写的DLL欲被其他语言编写的程序调用，应将函数的调用方式声明为_stdcall 方式，WINAPI都采用这种方式。<br>(2).  所有参数从右到左依次入栈，如果是调用类成员的话，最后一个入栈的是this指针。具体所示：调用方的函数调用-&gt;被调用函数的执行-&gt; 被调用方清除调整堆栈-&gt;被调用函数的结果返回。<br>(3).  这些堆栈中的参数由被调用的函数在返回后清除，使用的指令是 retn X，X表示参数占用的字节数，CPU在ret之后自动弹出X个字节的堆栈空间。称为自动清栈。<br>(4).  函数在编译的时候就必须确定参数个数，并且调用者必须严格的控制参数的生成，不能多，不能少，否则返回后会出错。总的来说，就是函数的参数个数不能是可变的。是从 _cdecl 修改而来, _stdcall 不支持可变参数,并且清栈由被调用者负责,其他的都一样<br>(5).  因为只需在被调用函数的地方生成一段调整堆栈的代码，所以最后生成的文件较小。</p>\n<p>PASCAL 是Pascal语言的函数调用方式，也可以在C/C++中使用，参数压栈顺序与前两者相反。返回时的清栈方式忘记了。。。</p>\n<p>_fastcall 是编译器指定的快速调用方式。由于大多数的函数参数个数很少，使用堆栈传递比较费时。因此_fastcall通常规定将前两个（或若干个）参数由寄存器传递，其余参数还是通过堆栈传递。不同编译器编译的程序规定的寄存器不同。返回方式和_stdcall相当。</p>\n<p>_thiscall 是为了解决类成员调用中this指针传递而规定的。_thiscall要求把this指针放在特定寄存器中，该寄存器由编译器决定。VC使用ecx，Borland的C++编译器使用eax。返回方式和_stdcall相当。</p>\n<p>_fastcall 和 _thiscall涉及的寄存器由编译器决定，因此不能用作跨编译器的接口。所以Windows上的COM对象接口都定义为_stdcall调用方式。</p>\n<p>C中不加说明默认函数为_cdecl方式（C中也只能用这种方式），C++也一样，但是默认的调用方式可以在IDE环境中设置。</p>\n<p>带有可变参数的函数必须且只能使用_cdecl方式，例如下面的函数:<br>      int printf(char * fmtStr, …);</p>\n<pre><code>int scanf(char * fmtStr, ...);\n</code></pre><h3 id=\"函数名修饰\"><a href=\"#函数名修饰\" class=\"headerlink\" title=\"函数名修饰\"></a>函数名修饰</h3><p>(1). _cdecl ：对于_cdecl而言，如果对于定义在C程序文件(编译器会通过后缀名为.C判断)的输出函数，函数名会保持原样；对于定义在C++程序文件中的输出函数，函数名会被修饰(见10)。为使函数名不被修饰，有两种方法：A.可通过在前面加上extern “c”以去除函数名修饰；B. 可通过.def文件去除函数名修饰。</p>\n<p>(2). _stdcall：无论是C程序文件中的输出函数还是C++程序文件中的输出函数，函数名都会被修饰。对于定义在C++程序文件中的输出函数，好像更复杂，和_cdecl的情况类似。去除函数名修饰方法：只能通过.def文件去除函数名修饰。</p>\n<h3 id=\"函数名修饰规则：\"><a href=\"#函数名修饰规则：\" class=\"headerlink\" title=\"函数名修饰规则：\"></a>函数名修饰规则：</h3><p>(1). 为什么要函数名修饰：<br>      函数名修饰就是编译器在编译期间创建的一个字符串，用来指明函数的定义和原型。LINK程序或其他工具有时需要指定函数的名字修饰来定位函数的正确位置。多少情况下程序员并不需要知道函数的名字修饰，LINK程序或其他工具会自动区分他们。当然，在某些情况下需要指定函数名修饰，例如在c++程序中，为了让LINK程序或其他工具能够匹配到正确的函数名字，就必须为重载函数后一些特殊函数(如构造函数和析构函数)指定名字修饰。另一种需要指定函数名修饰的情况是在汇编程序中调用C或C++函数。<br>(2). C语言：<br>      对于_stdcall调用约定，编译器和链接器会在输出函数名前加上一个下划线前缀，函数名后面加上一个“@”符号和其参数的字节数，例如_functionname@number。_cdecl调用约定仅在输出函数名前加上一个下划线前缀，例如_functionname。_fastcall调用约定在输出函数名前加上一个 “@“符号，后面也是一个”@“符号和其参数的字节数，例如@functionname@number。<br>(3). C++语言：<br>   C++的函数名修饰规则有些复杂，但是信息更充分，通过分析修饰名不仅能够知道函数的调用方式，返回值类型，参数个数甚至参数类型。不管<strong>cdecl，</strong>fastcall还是<strong>stdcall调用方式，函数修饰都是以一个“?”开始，后面紧跟函数的名字，再后面是参数表的开始标识和按照参数类型代号拼出的参数表。对于</strong>stdcall方式，参数表的开始标识是“@@YG”，对于<strong>cdecl方式则是“@@YA”，对于</strong>fastcall方式则是“@@YI”。参数表的拼写代号如下所示：<br>X–void<br>D–char<br>E–unsigned char<br>F–short<br>H–int<br>I–unsigned int<br>J–long<br>K–unsigned long（DWORD）<br>M–float<br>N–double<br>_N—bool<br>U—struct</p>\n<p>指针的方式有些特别，用PA表示指针，用PB表示const类型的指针。后面的代号表明指针类型，如果相同类型的指针连续出现，以“0”代替，一个“0”代表一次重复。U表示结构类型，通常后跟结构体的类型名，用“@@”表示结构类型名的结束。函数的返回值不作特殊处理，它的描述方式和函数参数一样，紧跟着参数表的开始标志，也就是说，函数参数表的第一项实际上是表示函数的返回值类型。参数表后以“@Z”标识整个名字的结束，如果该函数无参数，则以“Z”标识结束。下面举两个例子，假如有以下函数声明：<br>int Function1(char *var1,unsigned long);<br>其函数修饰名为“?Function1@@YGHPADK@Z”，而对于函数声明：<br>oid Function2();<br>其函数修饰名则为“?Function2@@YGXXZ” 。<br>对于C++的类成员函数（其调用方式是thiscall），函数的名字修饰与非成员的C++函数稍有不同，首先就是在函数名字和参数表之间插入以“@”字符引导的类名；其次是参数表的开始标识不同，公有（public）成员函数的标识是“@@QAE”,保护（protected）成员函数的标识是“@@IAE”,私有（private）成员函数的标识是“@@AAE”，如果函数声明使用了const关键字，则相应的标识应分别为“@@QBE”，“@@IBE”和“@@ABE”。如果参数类型是类实例的引用，则使用“AAV1”，对于const类型的引用，则使用“ABV1”。</p>\n<h3 id=\"查看函数的名字修饰\"><a href=\"#查看函数的名字修饰\" class=\"headerlink\" title=\"查看函数的名字修饰\"></a>查看函数的名字修饰</h3><p> 有两种方式可以检查你的程序中的函数的名字修饰：使用编译输出列表或使用Dumpbin工具。使用/FAc，/FAs或/FAcs命令行参数可以让编译器输出函数或变量名字列表。使用dumpbin.exe /SYMBOLS命令也可以获得obj文件或lib文件中的函数或变量名字列表。此外，还可以使用 undname.exe 将修饰名转换为未修饰形式。</p>\n<h3 id=\"beginthread需要-cdecl的线程函数地址，-beginthreadex和-CreateThread需要-stdcall的线程函数地址。\"><a href=\"#beginthread需要-cdecl的线程函数地址，-beginthreadex和-CreateThread需要-stdcall的线程函数地址。\" class=\"headerlink\" title=\"_beginthread需要_cdecl的线程函数地址，_beginthreadex和_CreateThread需要_stdcall的线程函数地址。\"></a>_beginthread需要_cdecl的线程函数地址，_beginthreadex和_CreateThread需要_stdcall的线程函数地址。</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> CALLBACK __stdcall <span class=\"comment\">//这就是传说中的回调函数</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> WINAPI __stdcall <span class=\"comment\">//这就是传说中的WINAPI</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> WINAPIV __cdecl</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> APIENTRY WINAPI <span class=\"comment\">//DllMain的入口就在这里</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> APIPRIVATE __stdcall</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PASCAL __stdcall</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"DLL导出方法\"><a href=\"#DLL导出方法\" class=\"headerlink\" title=\"DLL导出方法\"></a>DLL导出方法</h1><h2 id=\"dll导出方法1-：\"><a href=\"#dll导出方法1-：\" class=\"headerlink\" title=\"dll导出方法1 ：\"></a>dll导出方法1 ：</h2><p>模块定义def文件，不支持c++的重载，以c的方式编译，导出的函数名不被修改，这样<br>显示调用dll取得函数地址就没事。提供给vb，python等语言,需要_stdcall约定(函数自己清理堆栈)，这样无论是c文件还是c++文件，导出函数都会被改名字。所以dll做成必须要用def文件，否则找不到名字。除非你记得<br>修饰过的函数名。</p>\n<h2 id=\"dll导出方法2：\"><a href=\"#dll导出方法2：\" class=\"headerlink\" title=\"dll导出方法2：\"></a>dll导出方法2：</h2><p>函数声明头文件声明如下：<br>__declspec(dllexport)这种方式，方便c++代码的重载，同名函数不同参数，导出名字会被修饰，所以能区分开。<br>这种方式实现了DLL的隐式调用（只提供dll的导出符号lib文件，就可直接调用函数，（只是导出函数符号，没有具体实现，<br>不同于静态库的lib文件），def文件导出的dll不能用隐式调用，只能取得函数地址getProcAddress方式）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _EXSOPINF_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _EXSOPINF_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus  <span class=\"comment\">//cpp文件时，用c方式编译导出，不会修改导出函数名。但是_stdcall</span></span></span><br><span class=\"line\"><span class=\"comment\">//调用也会修改，_cdecl(默认)调用不会修改</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">__declspec(dllexport) <span class=\"function\">DWORD WINAPI <span class=\"title\">function1</span><span class=\"params\">( LPCSTR lpszFolderName, LPSTR lpszCode )</span></span>;</span><br><span class=\"line\">__declspec(dllexport) <span class=\"function\">DWORD WINAPI <span class=\"title\">function2</span><span class=\"params\">( LPCSTR lpszFolderName, LPSTR lpszCode )</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">函数定义时，也需要在函数名前：加入修饰</span><br><span class=\"line\">__declspec(dllexport) <span class=\"function\">DWORD WINAPI <span class=\"title\">function1</span><span class=\"params\">(LPCSTR lpszFolderName, LPSTR lpszCode )</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">其中WINAPI是调用约定。</span><br></pre></td></tr></table></figure>\n<h2 id=\"常见调用约定\"><a href=\"#常见调用约定\" class=\"headerlink\" title=\"常见调用约定\"></a>常见调用约定</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">调用协议常用场合</span><br><span class=\"line\">__stdcall：Windows API默认的函数调用协议。</span><br><span class=\"line\">__cdecl：C/C++默认的函数调用协议。</span><br><span class=\"line\">__fastcall：适用于对性能要求较高的场合。</span><br><span class=\"line\">函数参数入栈方式</span><br><span class=\"line\">__stdcall：函数参数由右向左入栈。</span><br><span class=\"line\">__cdecl：函数参数由右向左入栈。</span><br><span class=\"line\">__fastcall：从左开始不大于<span class=\"number\">4</span>字节的参数放入CPU的ECX和EDX寄存器，其余参数从右向左入栈。</span><br><span class=\"line\">问题一：__fastcall在寄存器中放入不大于<span class=\"number\">4</span>字节的参数，故性能较高，适用于需要高性能的场合。</span><br><span class=\"line\">栈内数据清除方式</span><br><span class=\"line\">__stdcall：函数调用结束后由被调用函数清除栈内数据。</span><br><span class=\"line\">__cdecl：函数调用结束后由函数调用者清除栈内数据。</span><br><span class=\"line\">__fastcall：函数调用结束后由被调用函数清除栈内数据。</span><br><span class=\"line\">问题一：不同编译器设定的栈结构不尽相同，跨开发平台时由函数调用者清除栈内数据不可行。</span><br><span class=\"line\">问题二：某些函数的参数是可变的，如<span class=\"built_in\">printf</span>函数，这样的函数只能由函数调用者清除栈内数据。</span><br><span class=\"line\">问题三：由调用者清除栈内数据时，每次调用都包含清除栈内数据的代码，故可执行文件较大。</span><br><span class=\"line\">C语言编译器函数名称修饰规则</span><br><span class=\"line\">__stdcall：编译后，函数名被修饰为“_functionname@number”。</span><br><span class=\"line\">__cdecl：编译后，函数名被修饰为“_functionname”。</span><br><span class=\"line\">__fastcall：编译后，函数名给修饰为“@functionname@nmuber”。</span><br><span class=\"line\">注：“functionname”为函数名，“number”为参数字节数。</span><br><span class=\"line\">注：函数实现和函数定义时如果使用了不同的函数调用协议，则无法实现函数调用。</span><br><span class=\"line\">C++语言编译器函数名称修饰规则</span><br><span class=\"line\">__stdcall：编译后，函数名被修饰为“?functionname@@YG******@Z”。</span><br><span class=\"line\">__cdecl：编译后，函数名被修饰为“?functionname@@YA******@Z”。</span><br><span class=\"line\">__fastcall：编译后，函数名被修饰为“?functionname@@YI******@Z”。</span><br><span class=\"line\">注：“******”为函数返回值类型和参数类型表。</span><br><span class=\"line\">注：函数实现和函数定义时如果使用了不同的函数调用协议，则无法实现函数调用。</span><br><span class=\"line\">C语言和C++语言间如果不进行特殊处理，也无法实现函数的互相调用。</span><br></pre></td></tr></table></figure>\n<h2 id=\"stdcall与-cdecl的区别-函数调用方式\"><a href=\"#stdcall与-cdecl的区别-函数调用方式\" class=\"headerlink\" title=\"_stdcall与_cdecl的区别(函数调用方式)\"></a>_stdcall与_cdecl的区别(函数调用方式)</h2><p>(1). 是C Declaration的缩写，表示C语言默认的函数调用方法，实际上也是C++的默认的函数调用方法。<br>(2). 所有参数从右到左依次入栈，这些参数由调用者清除，称为手动清栈。具体所示：调用方的函数调用-&gt;被调用函数的执行-&gt;被调用函数的结果返回-&gt;调用方清除调整堆栈。<br>(3). 被调用函数无需要求调用者传递多少参数，调用者传递过多或者过少的参数，甚至完全不同的参数都不会产生编译阶段的错误。总的来说函数的参数个数可变的(就像printf函数一样)，因为只有调用者才知道它传给被调用函数几个参数，才能在调用结束时适当地调整堆栈。<br>(4). 因为每个调用的地方都需要生成一段调整堆栈的代码，所以最后生成的文件较大。</p>\n<h3 id=\"stdcall-CALLBACK-WINAPI\"><a href=\"#stdcall-CALLBACK-WINAPI\" class=\"headerlink\" title=\"_stdcall(CALLBACK/WINAPI)\"></a>_stdcall(CALLBACK/WINAPI)</h3><p>(1). 是Standard Call的缩写，要想函数按照此调用方式必须在函数名加入<em>stdcall，通常</em> win32 api 应该是_stdcall调用规则。通过VC++编写的DLL欲被其他语言编写的程序调用，应将函数的调用方式声明为_stdcall 方式，WINAPI都采用这种方式。<br>(2).  所有参数从右到左依次入栈，如果是调用类成员的话，最后一个入栈的是this指针。具体所示：调用方的函数调用-&gt;被调用函数的执行-&gt; 被调用方清除调整堆栈-&gt;被调用函数的结果返回。<br>(3).  这些堆栈中的参数由被调用的函数在返回后清除，使用的指令是 retn X，X表示参数占用的字节数，CPU在ret之后自动弹出X个字节的堆栈空间。称为自动清栈。<br>(4).  函数在编译的时候就必须确定参数个数，并且调用者必须严格的控制参数的生成，不能多，不能少，否则返回后会出错。总的来说，就是函数的参数个数不能是可变的。是从 _cdecl 修改而来, _stdcall 不支持可变参数,并且清栈由被调用者负责,其他的都一样<br>(5).  因为只需在被调用函数的地方生成一段调整堆栈的代码，所以最后生成的文件较小。</p>\n<p>PASCAL 是Pascal语言的函数调用方式，也可以在C/C++中使用，参数压栈顺序与前两者相反。返回时的清栈方式忘记了。。。</p>\n<p>_fastcall 是编译器指定的快速调用方式。由于大多数的函数参数个数很少，使用堆栈传递比较费时。因此_fastcall通常规定将前两个（或若干个）参数由寄存器传递，其余参数还是通过堆栈传递。不同编译器编译的程序规定的寄存器不同。返回方式和_stdcall相当。</p>\n<p>_thiscall 是为了解决类成员调用中this指针传递而规定的。_thiscall要求把this指针放在特定寄存器中，该寄存器由编译器决定。VC使用ecx，Borland的C++编译器使用eax。返回方式和_stdcall相当。</p>\n<p>_fastcall 和 _thiscall涉及的寄存器由编译器决定，因此不能用作跨编译器的接口。所以Windows上的COM对象接口都定义为_stdcall调用方式。</p>\n<p>C中不加说明默认函数为_cdecl方式（C中也只能用这种方式），C++也一样，但是默认的调用方式可以在IDE环境中设置。</p>\n<p>带有可变参数的函数必须且只能使用_cdecl方式，例如下面的函数:<br>      int printf(char * fmtStr, …);</p>\n<pre><code>int scanf(char * fmtStr, ...);\n</code></pre><h3 id=\"函数名修饰\"><a href=\"#函数名修饰\" class=\"headerlink\" title=\"函数名修饰\"></a>函数名修饰</h3><p>(1). _cdecl ：对于_cdecl而言，如果对于定义在C程序文件(编译器会通过后缀名为.C判断)的输出函数，函数名会保持原样；对于定义在C++程序文件中的输出函数，函数名会被修饰(见10)。为使函数名不被修饰，有两种方法：A.可通过在前面加上extern “c”以去除函数名修饰；B. 可通过.def文件去除函数名修饰。</p>\n<p>(2). _stdcall：无论是C程序文件中的输出函数还是C++程序文件中的输出函数，函数名都会被修饰。对于定义在C++程序文件中的输出函数，好像更复杂，和_cdecl的情况类似。去除函数名修饰方法：只能通过.def文件去除函数名修饰。</p>\n<h3 id=\"函数名修饰规则：\"><a href=\"#函数名修饰规则：\" class=\"headerlink\" title=\"函数名修饰规则：\"></a>函数名修饰规则：</h3><p>(1). 为什么要函数名修饰：<br>      函数名修饰就是编译器在编译期间创建的一个字符串，用来指明函数的定义和原型。LINK程序或其他工具有时需要指定函数的名字修饰来定位函数的正确位置。多少情况下程序员并不需要知道函数的名字修饰，LINK程序或其他工具会自动区分他们。当然，在某些情况下需要指定函数名修饰，例如在c++程序中，为了让LINK程序或其他工具能够匹配到正确的函数名字，就必须为重载函数后一些特殊函数(如构造函数和析构函数)指定名字修饰。另一种需要指定函数名修饰的情况是在汇编程序中调用C或C++函数。<br>(2). C语言：<br>      对于_stdcall调用约定，编译器和链接器会在输出函数名前加上一个下划线前缀，函数名后面加上一个“@”符号和其参数的字节数，例如_functionname@number。_cdecl调用约定仅在输出函数名前加上一个下划线前缀，例如_functionname。_fastcall调用约定在输出函数名前加上一个 “@“符号，后面也是一个”@“符号和其参数的字节数，例如@functionname@number。<br>(3). C++语言：<br>   C++的函数名修饰规则有些复杂，但是信息更充分，通过分析修饰名不仅能够知道函数的调用方式，返回值类型，参数个数甚至参数类型。不管<strong>cdecl，</strong>fastcall还是<strong>stdcall调用方式，函数修饰都是以一个“?”开始，后面紧跟函数的名字，再后面是参数表的开始标识和按照参数类型代号拼出的参数表。对于</strong>stdcall方式，参数表的开始标识是“@@YG”，对于<strong>cdecl方式则是“@@YA”，对于</strong>fastcall方式则是“@@YI”。参数表的拼写代号如下所示：<br>X–void<br>D–char<br>E–unsigned char<br>F–short<br>H–int<br>I–unsigned int<br>J–long<br>K–unsigned long（DWORD）<br>M–float<br>N–double<br>_N—bool<br>U—struct</p>\n<p>指针的方式有些特别，用PA表示指针，用PB表示const类型的指针。后面的代号表明指针类型，如果相同类型的指针连续出现，以“0”代替，一个“0”代表一次重复。U表示结构类型，通常后跟结构体的类型名，用“@@”表示结构类型名的结束。函数的返回值不作特殊处理，它的描述方式和函数参数一样，紧跟着参数表的开始标志，也就是说，函数参数表的第一项实际上是表示函数的返回值类型。参数表后以“@Z”标识整个名字的结束，如果该函数无参数，则以“Z”标识结束。下面举两个例子，假如有以下函数声明：<br>int Function1(char *var1,unsigned long);<br>其函数修饰名为“?Function1@@YGHPADK@Z”，而对于函数声明：<br>oid Function2();<br>其函数修饰名则为“?Function2@@YGXXZ” 。<br>对于C++的类成员函数（其调用方式是thiscall），函数的名字修饰与非成员的C++函数稍有不同，首先就是在函数名字和参数表之间插入以“@”字符引导的类名；其次是参数表的开始标识不同，公有（public）成员函数的标识是“@@QAE”,保护（protected）成员函数的标识是“@@IAE”,私有（private）成员函数的标识是“@@AAE”，如果函数声明使用了const关键字，则相应的标识应分别为“@@QBE”，“@@IBE”和“@@ABE”。如果参数类型是类实例的引用，则使用“AAV1”，对于const类型的引用，则使用“ABV1”。</p>\n<h3 id=\"查看函数的名字修饰\"><a href=\"#查看函数的名字修饰\" class=\"headerlink\" title=\"查看函数的名字修饰\"></a>查看函数的名字修饰</h3><p> 有两种方式可以检查你的程序中的函数的名字修饰：使用编译输出列表或使用Dumpbin工具。使用/FAc，/FAs或/FAcs命令行参数可以让编译器输出函数或变量名字列表。使用dumpbin.exe /SYMBOLS命令也可以获得obj文件或lib文件中的函数或变量名字列表。此外，还可以使用 undname.exe 将修饰名转换为未修饰形式。</p>\n<h3 id=\"beginthread需要-cdecl的线程函数地址，-beginthreadex和-CreateThread需要-stdcall的线程函数地址。\"><a href=\"#beginthread需要-cdecl的线程函数地址，-beginthreadex和-CreateThread需要-stdcall的线程函数地址。\" class=\"headerlink\" title=\"_beginthread需要_cdecl的线程函数地址，_beginthreadex和_CreateThread需要_stdcall的线程函数地址。\"></a>_beginthread需要_cdecl的线程函数地址，_beginthreadex和_CreateThread需要_stdcall的线程函数地址。</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> CALLBACK __stdcall <span class=\"comment\">//这就是传说中的回调函数</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> WINAPI __stdcall <span class=\"comment\">//这就是传说中的WINAPI</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> WINAPIV __cdecl</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> APIENTRY WINAPI <span class=\"comment\">//DllMain的入口就在这里</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> APIPRIVATE __stdcall</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PASCAL __stdcall</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"redis文章发布","date":"2019-02-22T07:50:00.000Z","_content":"\n## 定时任务发布方式\n\n- 如果有后台发布文章，需要有定时任务将mysql中录入的文章同步到redis中\n- 1. 这时候文章id当然是mysql自增产生的，生成一个文章id表示的文章内容 \n```py\n\tconn.hmset(\"article:100:hash\",{属性字典}）\n``` \n- 2. 作者发布的文章，文章的投票者集合当然有作者，需要设置投票集合。\n```py\n\tconn.sadd(\"artile:100:set\",atrticle.uid)\n\tconn.expire(\"artile:100:set\",7*86400) # 一周有效期\n```\n\n- 3. 文章的评分zset初始化,文章发布时间集合初始化。\n```py\n\tconn.zincrby(\"article:100:score:zset\",432)， 432 是一个投票的评分。\n\tconn.zadd(\"article:time:zset\",article_id, now) \n```\n\n\n## 如果是没有mysql，完全用redis这时候，文章id就需要一个string类型的key自增产生，其余步骤一致。\n","source":"_posts/db/redis/redis文章发布.md","raw":"---\nlayout: post\ntitle: redis文章发布\ncategory: redis\ndate: 2019-02-22 15:50:00\n---\n\n## 定时任务发布方式\n\n- 如果有后台发布文章，需要有定时任务将mysql中录入的文章同步到redis中\n- 1. 这时候文章id当然是mysql自增产生的，生成一个文章id表示的文章内容 \n```py\n\tconn.hmset(\"article:100:hash\",{属性字典}）\n``` \n- 2. 作者发布的文章，文章的投票者集合当然有作者，需要设置投票集合。\n```py\n\tconn.sadd(\"artile:100:set\",atrticle.uid)\n\tconn.expire(\"artile:100:set\",7*86400) # 一周有效期\n```\n\n- 3. 文章的评分zset初始化,文章发布时间集合初始化。\n```py\n\tconn.zincrby(\"article:100:score:zset\",432)， 432 是一个投票的评分。\n\tconn.zadd(\"article:time:zset\",article_id, now) \n```\n\n\n## 如果是没有mysql，完全用redis这时候，文章id就需要一个string类型的key自增产生，其余步骤一致。\n","slug":"db/redis/redis文章发布","published":1,"updated":"2019-05-19T14:18:38.609Z","comments":1,"photos":[],"link":"","_id":"cjwxes5e3002thdlihoobsgi8","content":"<h2 id=\"定时任务发布方式\"><a href=\"#定时任务发布方式\" class=\"headerlink\" title=\"定时任务发布方式\"></a>定时任务发布方式</h2><ul>\n<li>如果有后台发布文章，需要有定时任务将mysql中录入的文章同步到redis中</li>\n<li><ol>\n<li>这时候文章id当然是mysql自增产生的，生成一个文章id表示的文章内容 <figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tconn.hmset(<span class=\"string\">\"article:100:hash\"</span>,&#123;属性字典&#125;）</span><br><span class=\"line\">``` </span><br><span class=\"line\">- <span class=\"number\">2.</span> 作者发布的文章，文章的投票者集合当然有作者，需要设置投票集合。</span><br><span class=\"line\">```py</span><br><span class=\"line\">\tconn.sadd(<span class=\"string\">\"artile:100:set\"</span>,atrticle.uid)</span><br><span class=\"line\">\tconn.expire(<span class=\"string\">\"artile:100:set\"</span>,<span class=\"number\">7</span>*<span class=\"number\">86400</span>) <span class=\"comment\"># 一周有效期</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>文章的评分zset初始化,文章发布时间集合初始化。<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn.zincrby(<span class=\"string\">\"article:100:score:zset\"</span>,<span class=\"number\">432</span>)， <span class=\"number\">432</span> 是一个投票的评分。</span><br><span class=\"line\">conn.zadd(<span class=\"string\">\"article:time:zset\"</span>,article_id, now)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"如果是没有mysql，完全用redis这时候，文章id就需要一个string类型的key自增产生，其余步骤一致。\"><a href=\"#如果是没有mysql，完全用redis这时候，文章id就需要一个string类型的key自增产生，其余步骤一致。\" class=\"headerlink\" title=\"如果是没有mysql，完全用redis这时候，文章id就需要一个string类型的key自增产生，其余步骤一致。\"></a>如果是没有mysql，完全用redis这时候，文章id就需要一个string类型的key自增产生，其余步骤一致。</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"定时任务发布方式\"><a href=\"#定时任务发布方式\" class=\"headerlink\" title=\"定时任务发布方式\"></a>定时任务发布方式</h2><ul>\n<li>如果有后台发布文章，需要有定时任务将mysql中录入的文章同步到redis中</li>\n<li><ol>\n<li>这时候文章id当然是mysql自增产生的，生成一个文章id表示的文章内容 <figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tconn.hmset(<span class=\"string\">\"article:100:hash\"</span>,&#123;属性字典&#125;）</span><br><span class=\"line\">``` </span><br><span class=\"line\">- <span class=\"number\">2.</span> 作者发布的文章，文章的投票者集合当然有作者，需要设置投票集合。</span><br><span class=\"line\">```py</span><br><span class=\"line\">\tconn.sadd(<span class=\"string\">\"artile:100:set\"</span>,atrticle.uid)</span><br><span class=\"line\">\tconn.expire(<span class=\"string\">\"artile:100:set\"</span>,<span class=\"number\">7</span>*<span class=\"number\">86400</span>) <span class=\"comment\"># 一周有效期</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>文章的评分zset初始化,文章发布时间集合初始化。<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn.zincrby(<span class=\"string\">\"article:100:score:zset\"</span>,<span class=\"number\">432</span>)， <span class=\"number\">432</span> 是一个投票的评分。</span><br><span class=\"line\">conn.zadd(<span class=\"string\">\"article:time:zset\"</span>,article_id, now)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"如果是没有mysql，完全用redis这时候，文章id就需要一个string类型的key自增产生，其余步骤一致。\"><a href=\"#如果是没有mysql，完全用redis这时候，文章id就需要一个string类型的key自增产生，其余步骤一致。\" class=\"headerlink\" title=\"如果是没有mysql，完全用redis这时候，文章id就需要一个string类型的key自增产生，其余步骤一致。\"></a>如果是没有mysql，完全用redis这时候，文章id就需要一个string类型的key自增产生，其余步骤一致。</h2>"},{"layout":"post","title":"redis文章投票","date":"2019-02-22T07:50:00.000Z","_content":"\n\n## 1. 文章信息可以用hash表示\n\n- 比如文章id为key，文章属性为filed，属性值为value\n```js\n\tkey : articel:1 \n\ttitle : 这是标题\n\tlink： www.baidu.com\n\tupdatetime: 2019-02-21 00:00:00\n\t\n```\n- 也可以用大的hash，每个filed是一个文章id，value是一个json表示文章属性，\n\n\n\n## 2. 文章id和发布时间对应关系用zset表示\n\n- 文章id对应member，发布时间是score\n\n## 3. 文章id和文章评分对应关系也可用zset表示\n\n- 文章id对应member， 分数对应score\n\n\n## 4. 对一篇文章首次投票之后，发生什么变化？\n- 0. 有时只需要7天之内发布的文章才可以投票，否则直接返回。\n- 1. 用户是不支持重复投票的，所有应该有一个文章id对应的set类型的key，将投过票的uid加入到里面，如果加入失败，就说明重复了，就不增加评分。\n- 2. 首先对应文章id的评分增加，具体增加规则： 将文章的已获得的支持票数*一个常量 +发布时间戳；常量可以432（86400/200）200个投票需求，平均一天时间。，这只是我见到的一个方法。\n- 3. 增加文章的投票+1，使用hincrby ，前提是如果用hash记录文章属性的话，投票数就是一个属性。\n- 4. 考虑到并发，如果以上三个操作应该用事物操作，保证原子性。\n\n\n\n\n\n\n","source":"_posts/db/redis/redis文章投票.md","raw":"---\nlayout: post\ntitle: redis文章投票\ncategory: redis \ndate: 2019-02-22 15:50:00\n---\n\n\n## 1. 文章信息可以用hash表示\n\n- 比如文章id为key，文章属性为filed，属性值为value\n```js\n\tkey : articel:1 \n\ttitle : 这是标题\n\tlink： www.baidu.com\n\tupdatetime: 2019-02-21 00:00:00\n\t\n```\n- 也可以用大的hash，每个filed是一个文章id，value是一个json表示文章属性，\n\n\n\n## 2. 文章id和发布时间对应关系用zset表示\n\n- 文章id对应member，发布时间是score\n\n## 3. 文章id和文章评分对应关系也可用zset表示\n\n- 文章id对应member， 分数对应score\n\n\n## 4. 对一篇文章首次投票之后，发生什么变化？\n- 0. 有时只需要7天之内发布的文章才可以投票，否则直接返回。\n- 1. 用户是不支持重复投票的，所有应该有一个文章id对应的set类型的key，将投过票的uid加入到里面，如果加入失败，就说明重复了，就不增加评分。\n- 2. 首先对应文章id的评分增加，具体增加规则： 将文章的已获得的支持票数*一个常量 +发布时间戳；常量可以432（86400/200）200个投票需求，平均一天时间。，这只是我见到的一个方法。\n- 3. 增加文章的投票+1，使用hincrby ，前提是如果用hash记录文章属性的话，投票数就是一个属性。\n- 4. 考虑到并发，如果以上三个操作应该用事物操作，保证原子性。\n\n\n\n\n\n\n","slug":"db/redis/redis文章投票","published":1,"updated":"2019-05-19T14:18:38.609Z","comments":1,"photos":[],"link":"","_id":"cjwxes5e3002uhdliks53jd37","content":"<h2 id=\"1-文章信息可以用hash表示\"><a href=\"#1-文章信息可以用hash表示\" class=\"headerlink\" title=\"1. 文章信息可以用hash表示\"></a>1. 文章信息可以用hash表示</h2><ul>\n<li><p>比如文章id为key，文章属性为filed，属性值为value</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key : articel:<span class=\"number\">1</span> </span><br><span class=\"line\">title : 这是标题</span><br><span class=\"line\">link： www.baidu.com</span><br><span class=\"line\">updatetime: <span class=\"number\">2019</span><span class=\"number\">-02</span><span class=\"number\">-21</span> <span class=\"number\">00</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>也可以用大的hash，每个filed是一个文章id，value是一个json表示文章属性，</p>\n</li>\n</ul>\n<h2 id=\"2-文章id和发布时间对应关系用zset表示\"><a href=\"#2-文章id和发布时间对应关系用zset表示\" class=\"headerlink\" title=\"2. 文章id和发布时间对应关系用zset表示\"></a>2. 文章id和发布时间对应关系用zset表示</h2><ul>\n<li>文章id对应member，发布时间是score</li>\n</ul>\n<h2 id=\"3-文章id和文章评分对应关系也可用zset表示\"><a href=\"#3-文章id和文章评分对应关系也可用zset表示\" class=\"headerlink\" title=\"3. 文章id和文章评分对应关系也可用zset表示\"></a>3. 文章id和文章评分对应关系也可用zset表示</h2><ul>\n<li>文章id对应member， 分数对应score</li>\n</ul>\n<h2 id=\"4-对一篇文章首次投票之后，发生什么变化？\"><a href=\"#4-对一篇文章首次投票之后，发生什么变化？\" class=\"headerlink\" title=\"4. 对一篇文章首次投票之后，发生什么变化？\"></a>4. 对一篇文章首次投票之后，发生什么变化？</h2><ul>\n<li><ol start=\"0\">\n<li>有时只需要7天之内发布的文章才可以投票，否则直接返回。</li>\n</ol>\n</li>\n<li><ol>\n<li>用户是不支持重复投票的，所有应该有一个文章id对应的set类型的key，将投过票的uid加入到里面，如果加入失败，就说明重复了，就不增加评分。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>首先对应文章id的评分增加，具体增加规则： 将文章的已获得的支持票数*一个常量 +发布时间戳；常量可以432（86400/200）200个投票需求，平均一天时间。，这只是我见到的一个方法。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>增加文章的投票+1，使用hincrby ，前提是如果用hash记录文章属性的话，投票数就是一个属性。</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>考虑到并发，如果以上三个操作应该用事物操作，保证原子性。</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文章信息可以用hash表示\"><a href=\"#1-文章信息可以用hash表示\" class=\"headerlink\" title=\"1. 文章信息可以用hash表示\"></a>1. 文章信息可以用hash表示</h2><ul>\n<li><p>比如文章id为key，文章属性为filed，属性值为value</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key : articel:<span class=\"number\">1</span> </span><br><span class=\"line\">title : 这是标题</span><br><span class=\"line\">link： www.baidu.com</span><br><span class=\"line\">updatetime: <span class=\"number\">2019</span><span class=\"number\">-02</span><span class=\"number\">-21</span> <span class=\"number\">00</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>也可以用大的hash，每个filed是一个文章id，value是一个json表示文章属性，</p>\n</li>\n</ul>\n<h2 id=\"2-文章id和发布时间对应关系用zset表示\"><a href=\"#2-文章id和发布时间对应关系用zset表示\" class=\"headerlink\" title=\"2. 文章id和发布时间对应关系用zset表示\"></a>2. 文章id和发布时间对应关系用zset表示</h2><ul>\n<li>文章id对应member，发布时间是score</li>\n</ul>\n<h2 id=\"3-文章id和文章评分对应关系也可用zset表示\"><a href=\"#3-文章id和文章评分对应关系也可用zset表示\" class=\"headerlink\" title=\"3. 文章id和文章评分对应关系也可用zset表示\"></a>3. 文章id和文章评分对应关系也可用zset表示</h2><ul>\n<li>文章id对应member， 分数对应score</li>\n</ul>\n<h2 id=\"4-对一篇文章首次投票之后，发生什么变化？\"><a href=\"#4-对一篇文章首次投票之后，发生什么变化？\" class=\"headerlink\" title=\"4. 对一篇文章首次投票之后，发生什么变化？\"></a>4. 对一篇文章首次投票之后，发生什么变化？</h2><ul>\n<li><ol start=\"0\">\n<li>有时只需要7天之内发布的文章才可以投票，否则直接返回。</li>\n</ol>\n</li>\n<li><ol>\n<li>用户是不支持重复投票的，所有应该有一个文章id对应的set类型的key，将投过票的uid加入到里面，如果加入失败，就说明重复了，就不增加评分。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>首先对应文章id的评分增加，具体增加规则： 将文章的已获得的支持票数*一个常量 +发布时间戳；常量可以432（86400/200）200个投票需求，平均一天时间。，这只是我见到的一个方法。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>增加文章的投票+1，使用hincrby ，前提是如果用hash记录文章属性的话，投票数就是一个属性。</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>考虑到并发，如果以上三个操作应该用事物操作，保证原子性。</li>\n</ol>\n</li>\n</ul>\n"},{"layout":"post","title":"redis文章分组的用途","date":"2019-02-22T07:50:00.000Z","_content":"\n\n## 文章分组的用途\n- 文章分组，可以用set结构存储同一个分组的文章id\n- set可以和zset使用zinterstore命令求交集，set默认的score是1， zset默认的一般不是1，可以指定参数max，取score大的值。\n- 比如获取一个分组A中的文章按时间排序，就拿这个分组和发布时间集合zset求交集，交集可以取一个临时名字，设置有效期60s。\n- 比如获取一个分组B中的文章按照评分大小排序，就拿这个分组和评分集合zset求交集。\n- 一般接口直接就拿redis获取的数据返回了。\n\n\n","source":"_posts/db/redis/redis文章分组的用途.md","raw":"---\nlayout: post\ntitle: redis文章分组的用途\ncategory: redis \ndate: 2019-02-22 15:50:00\n---\n\n\n## 文章分组的用途\n- 文章分组，可以用set结构存储同一个分组的文章id\n- set可以和zset使用zinterstore命令求交集，set默认的score是1， zset默认的一般不是1，可以指定参数max，取score大的值。\n- 比如获取一个分组A中的文章按时间排序，就拿这个分组和发布时间集合zset求交集，交集可以取一个临时名字，设置有效期60s。\n- 比如获取一个分组B中的文章按照评分大小排序，就拿这个分组和评分集合zset求交集。\n- 一般接口直接就拿redis获取的数据返回了。\n\n\n","slug":"db/redis/redis文章分组的用途","published":1,"updated":"2019-05-19T14:18:38.609Z","comments":1,"photos":[],"link":"","_id":"cjwxes5e4002whdli4v2rawp2","content":"<h2 id=\"文章分组的用途\"><a href=\"#文章分组的用途\" class=\"headerlink\" title=\"文章分组的用途\"></a>文章分组的用途</h2><ul>\n<li>文章分组，可以用set结构存储同一个分组的文章id</li>\n<li>set可以和zset使用zinterstore命令求交集，set默认的score是1， zset默认的一般不是1，可以指定参数max，取score大的值。</li>\n<li>比如获取一个分组A中的文章按时间排序，就拿这个分组和发布时间集合zset求交集，交集可以取一个临时名字，设置有效期60s。</li>\n<li>比如获取一个分组B中的文章按照评分大小排序，就拿这个分组和评分集合zset求交集。</li>\n<li>一般接口直接就拿redis获取的数据返回了。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"文章分组的用途\"><a href=\"#文章分组的用途\" class=\"headerlink\" title=\"文章分组的用途\"></a>文章分组的用途</h2><ul>\n<li>文章分组，可以用set结构存储同一个分组的文章id</li>\n<li>set可以和zset使用zinterstore命令求交集，set默认的score是1， zset默认的一般不是1，可以指定参数max，取score大的值。</li>\n<li>比如获取一个分组A中的文章按时间排序，就拿这个分组和发布时间集合zset求交集，交集可以取一个临时名字，设置有效期60s。</li>\n<li>比如获取一个分组B中的文章按照评分大小排序，就拿这个分组和评分集合zset求交集。</li>\n<li>一般接口直接就拿redis获取的数据返回了。</li>\n</ul>\n"},{"layout":"post","title":"ajax简介","date":"2016-10-06T12:04:30.000Z","comments":1,"_content":"\n# 1.ajax 简介\najax =  异步javascript+XML\nAAJAX是基于现有的Internet标准，并且联合使用它们：\nXMLHttpRequest 对象 (异步的与服务器交换数据)\nJavaScript/DOM (信息显示/交互)\nCSS (给数据定义样式)\nXML (作为转换数据的格式)\nlamp  AJAX应用程序与浏览器和平台无关的！\n实现不刷新整个页面，实现页面动态更新的技术。\n\najax工作原理：\n\n![](http://www.ziqiangxuetang.com/static/images/ajax.gif)\n\n# 2.ajax实例\n 1.首先建立XMLHttpRequest对象，区分不同的浏览器版本，IE5,IE6不支持直接建立XMLHttpRequest对象，所以： \n\n```javascript\n\nvar xmlhttp;\nif(window.XMLHttpRequest){ //如果为真，则支持XMLHttpRequest对象\n    xmlhttp = new XMLHttpRequest();\n}else{\n    //code for IE5,6\n    xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\";)\n}\n\n```\n\n2.XMLHttpRequest对象用于和服务器交换数据\n\nopen方法用于发送请求，参数1：方法，参数2：url，参数3:异步/同步\n\n> xmlhttp.open(\"GET\",\"ajax_info.txt\",true)\n\nsend方法也用于请求，不过只支持post请求，参数：string\n\n> xmlhttp.send(string);\n\nGET和POST的区别：\n* GET更简单，更快，大部分情况都能用。以下情况使用POST：\n* 无法使用缓存文件更新服务器上的文件或数据库。\n* 发送大量数据到服务器。\n* 发送用户输入的未知字符到服务器时。 \n\n# 例子 \n\nget请求：\n```javascript\nxmlhttp.open(\"GET\",\"demo_get2.html?fname=Henry&lname=Ford\",true);\nxmlhttp.send();\n```\npost请求：\n\n如果post表单那样的提交数据，需要添加http头\n```javascript\n\nxmlhttp.open(\"POST\",\"ajax_test.html\",true);\nxmlhttp.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");\nxmlhttp.send(\"fname=Henry&lname=Ford\");\n\nsetRequestHeader方法：\nsetRequestHeader(header,value)  \n向请求添加 HTTP 头。\nheader: 规定头的名称\nvalue: 规定头的值\n```\n\n# Async=true\n* 使用XMLRequest.open()方法时，一般在ajax第三个参数必须是true（异步）\n而且规定请求就绪时执行的函数。也就是定义 XMLHttpRequest.onreadystatechange 事件函数。\n当请求完成时，触发该函数，类似定时器。\n* 因为web请求也许需要一段时间，所以发送异步请求，等待请求的这段时间可以执行其他代码。请求得到返回时，再执行onreadystatechange中的函数。\n\n```javascript\nxmlhttp.onreadystatechange=function() //\n  {\n  if (xmlhttp.readyState==4 && xmlhttp.status==200)//请求正确返回http code 200时\n  //执行修改id为mydiv的html元素内容。\n    {\n    document.getElementById(\"myDiv\").innerHTML=xmlhttp.responseText;\n    }\n  }\nxmlhttp.open(\"GET\",\"ajax_info.txt\",true); //请求ajax_info.txt文件，\nxmlhttp.send();\n```\n\n#Async=false \n* 不推荐，对于小型的请求也下可以。因为javascript会等待服务器返回后才继续向下执行。如果服务器繁忙，应用程序会挂起或者挂掉。\n\n# XMLHttpRequest响应\n如果返回200,就可以使用\n","source":"_posts/language/html/ajax.md","raw":"---\nlayout: post\ntitle: ajax简介\ncategory: html\ntags: ajax\ndate: 2016-10-6 20:04:30\ncomments: true\n\n---\n\n# 1.ajax 简介\najax =  异步javascript+XML\nAAJAX是基于现有的Internet标准，并且联合使用它们：\nXMLHttpRequest 对象 (异步的与服务器交换数据)\nJavaScript/DOM (信息显示/交互)\nCSS (给数据定义样式)\nXML (作为转换数据的格式)\nlamp  AJAX应用程序与浏览器和平台无关的！\n实现不刷新整个页面，实现页面动态更新的技术。\n\najax工作原理：\n\n![](http://www.ziqiangxuetang.com/static/images/ajax.gif)\n\n# 2.ajax实例\n 1.首先建立XMLHttpRequest对象，区分不同的浏览器版本，IE5,IE6不支持直接建立XMLHttpRequest对象，所以： \n\n```javascript\n\nvar xmlhttp;\nif(window.XMLHttpRequest){ //如果为真，则支持XMLHttpRequest对象\n    xmlhttp = new XMLHttpRequest();\n}else{\n    //code for IE5,6\n    xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\";)\n}\n\n```\n\n2.XMLHttpRequest对象用于和服务器交换数据\n\nopen方法用于发送请求，参数1：方法，参数2：url，参数3:异步/同步\n\n> xmlhttp.open(\"GET\",\"ajax_info.txt\",true)\n\nsend方法也用于请求，不过只支持post请求，参数：string\n\n> xmlhttp.send(string);\n\nGET和POST的区别：\n* GET更简单，更快，大部分情况都能用。以下情况使用POST：\n* 无法使用缓存文件更新服务器上的文件或数据库。\n* 发送大量数据到服务器。\n* 发送用户输入的未知字符到服务器时。 \n\n# 例子 \n\nget请求：\n```javascript\nxmlhttp.open(\"GET\",\"demo_get2.html?fname=Henry&lname=Ford\",true);\nxmlhttp.send();\n```\npost请求：\n\n如果post表单那样的提交数据，需要添加http头\n```javascript\n\nxmlhttp.open(\"POST\",\"ajax_test.html\",true);\nxmlhttp.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");\nxmlhttp.send(\"fname=Henry&lname=Ford\");\n\nsetRequestHeader方法：\nsetRequestHeader(header,value)  \n向请求添加 HTTP 头。\nheader: 规定头的名称\nvalue: 规定头的值\n```\n\n# Async=true\n* 使用XMLRequest.open()方法时，一般在ajax第三个参数必须是true（异步）\n而且规定请求就绪时执行的函数。也就是定义 XMLHttpRequest.onreadystatechange 事件函数。\n当请求完成时，触发该函数，类似定时器。\n* 因为web请求也许需要一段时间，所以发送异步请求，等待请求的这段时间可以执行其他代码。请求得到返回时，再执行onreadystatechange中的函数。\n\n```javascript\nxmlhttp.onreadystatechange=function() //\n  {\n  if (xmlhttp.readyState==4 && xmlhttp.status==200)//请求正确返回http code 200时\n  //执行修改id为mydiv的html元素内容。\n    {\n    document.getElementById(\"myDiv\").innerHTML=xmlhttp.responseText;\n    }\n  }\nxmlhttp.open(\"GET\",\"ajax_info.txt\",true); //请求ajax_info.txt文件，\nxmlhttp.send();\n```\n\n#Async=false \n* 不推荐，对于小型的请求也下可以。因为javascript会等待服务器返回后才继续向下执行。如果服务器繁忙，应用程序会挂起或者挂掉。\n\n# XMLHttpRequest响应\n如果返回200,就可以使用\n","slug":"language/html/ajax","published":1,"updated":"2019-05-19T14:30:17.030Z","photos":[],"link":"","_id":"cjwxes5e5002xhdlieyd0tsjk","content":"<h1 id=\"1-ajax-简介\"><a href=\"#1-ajax-简介\" class=\"headerlink\" title=\"1.ajax 简介\"></a>1.ajax 简介</h1><p>ajax =  异步javascript+XML<br>AAJAX是基于现有的Internet标准，并且联合使用它们：<br>XMLHttpRequest 对象 (异步的与服务器交换数据)<br>JavaScript/DOM (信息显示/交互)<br>CSS (给数据定义样式)<br>XML (作为转换数据的格式)<br>lamp  AJAX应用程序与浏览器和平台无关的！<br>实现不刷新整个页面，实现页面动态更新的技术。</p>\n<p>ajax工作原理：</p>\n<p><img src=\"http://www.ziqiangxuetang.com/static/images/ajax.gif\" alt=\"\"></p>\n<h1 id=\"2-ajax实例\"><a href=\"#2-ajax实例\" class=\"headerlink\" title=\"2.ajax实例\"></a>2.ajax实例</h1><p> 1.首先建立XMLHttpRequest对象，区分不同的浏览器版本，IE5,IE6不支持直接建立XMLHttpRequest对象，所以： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xmlhttp;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.XMLHttpRequest)&#123; <span class=\"comment\">//如果为真，则支持XMLHttpRequest对象</span></span><br><span class=\"line\">    xmlhttp = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//code for IE5,6</span></span><br><span class=\"line\">    xmlhttp = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.XMLHttpRequest对象用于和服务器交换数据</p>\n<p>open方法用于发送请求，参数1：方法，参数2：url，参数3:异步/同步</p>\n<blockquote>\n<p>xmlhttp.open(“GET”,”ajax_info.txt”,true)</p>\n</blockquote>\n<p>send方法也用于请求，不过只支持post请求，参数：string</p>\n<blockquote>\n<p>xmlhttp.send(string);</p>\n</blockquote>\n<p>GET和POST的区别：</p>\n<ul>\n<li>GET更简单，更快，大部分情况都能用。以下情况使用POST：</li>\n<li>无法使用缓存文件更新服务器上的文件或数据库。</li>\n<li>发送大量数据到服务器。</li>\n<li>发送用户输入的未知字符到服务器时。 </li>\n</ul>\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><p>get请求：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xmlhttp.open(<span class=\"string\">\"GET\"</span>,<span class=\"string\">\"demo_get2.html?fname=Henry&amp;lname=Ford\"</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">xmlhttp.send();</span><br></pre></td></tr></table></figure></p>\n<p>post请求：</p>\n<p>如果post表单那样的提交数据，需要添加http头<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">xmlhttp.open(<span class=\"string\">\"POST\"</span>,<span class=\"string\">\"ajax_test.html\"</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">xmlhttp.setRequestHeader(<span class=\"string\">\"Content-type\"</span>,<span class=\"string\">\"application/x-www-form-urlencoded\"</span>);</span><br><span class=\"line\">xmlhttp.send(<span class=\"string\">\"fname=Henry&amp;lname=Ford\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setRequestHeader方法：</span><br><span class=\"line\">setRequestHeader(header,value)  </span><br><span class=\"line\">向请求添加 HTTP 头。</span><br><span class=\"line\">header: 规定头的名称</span><br><span class=\"line\">value: 规定头的值</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Async-true\"><a href=\"#Async-true\" class=\"headerlink\" title=\"Async=true\"></a>Async=true</h1><ul>\n<li>使用XMLRequest.open()方法时，一般在ajax第三个参数必须是true（异步）<br>而且规定请求就绪时执行的函数。也就是定义 XMLHttpRequest.onreadystatechange 事件函数。<br>当请求完成时，触发该函数，类似定时器。</li>\n<li>因为web请求也许需要一段时间，所以发送异步请求，等待请求的这段时间可以执行其他代码。请求得到返回时，再执行onreadystatechange中的函数。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xmlhttp.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) //</span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (xmlhttp.readyState==<span class=\"number\">4</span> &amp;&amp; xmlhttp.status==<span class=\"number\">200</span>)<span class=\"comment\">//请求正确返回http code 200时</span></span><br><span class=\"line\">  <span class=\"comment\">//执行修改id为mydiv的html元素内容。</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>).innerHTML=xmlhttp.responseText;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">xmlhttp.open(<span class=\"string\">\"GET\"</span>,<span class=\"string\">\"ajax_info.txt\"</span>,<span class=\"literal\">true</span>); <span class=\"comment\">//请求ajax_info.txt文件，</span></span><br><span class=\"line\">xmlhttp.send();</span><br></pre></td></tr></table></figure>\n<p>#Async=false </p>\n<ul>\n<li>不推荐，对于小型的请求也下可以。因为javascript会等待服务器返回后才继续向下执行。如果服务器繁忙，应用程序会挂起或者挂掉。</li>\n</ul>\n<h1 id=\"XMLHttpRequest响应\"><a href=\"#XMLHttpRequest响应\" class=\"headerlink\" title=\"XMLHttpRequest响应\"></a>XMLHttpRequest响应</h1><p>如果返回200,就可以使用</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-ajax-简介\"><a href=\"#1-ajax-简介\" class=\"headerlink\" title=\"1.ajax 简介\"></a>1.ajax 简介</h1><p>ajax =  异步javascript+XML<br>AAJAX是基于现有的Internet标准，并且联合使用它们：<br>XMLHttpRequest 对象 (异步的与服务器交换数据)<br>JavaScript/DOM (信息显示/交互)<br>CSS (给数据定义样式)<br>XML (作为转换数据的格式)<br>lamp  AJAX应用程序与浏览器和平台无关的！<br>实现不刷新整个页面，实现页面动态更新的技术。</p>\n<p>ajax工作原理：</p>\n<p><img src=\"http://www.ziqiangxuetang.com/static/images/ajax.gif\" alt=\"\"></p>\n<h1 id=\"2-ajax实例\"><a href=\"#2-ajax实例\" class=\"headerlink\" title=\"2.ajax实例\"></a>2.ajax实例</h1><p> 1.首先建立XMLHttpRequest对象，区分不同的浏览器版本，IE5,IE6不支持直接建立XMLHttpRequest对象，所以： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xmlhttp;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.XMLHttpRequest)&#123; <span class=\"comment\">//如果为真，则支持XMLHttpRequest对象</span></span><br><span class=\"line\">    xmlhttp = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//code for IE5,6</span></span><br><span class=\"line\">    xmlhttp = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.XMLHttpRequest对象用于和服务器交换数据</p>\n<p>open方法用于发送请求，参数1：方法，参数2：url，参数3:异步/同步</p>\n<blockquote>\n<p>xmlhttp.open(“GET”,”ajax_info.txt”,true)</p>\n</blockquote>\n<p>send方法也用于请求，不过只支持post请求，参数：string</p>\n<blockquote>\n<p>xmlhttp.send(string);</p>\n</blockquote>\n<p>GET和POST的区别：</p>\n<ul>\n<li>GET更简单，更快，大部分情况都能用。以下情况使用POST：</li>\n<li>无法使用缓存文件更新服务器上的文件或数据库。</li>\n<li>发送大量数据到服务器。</li>\n<li>发送用户输入的未知字符到服务器时。 </li>\n</ul>\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><p>get请求：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xmlhttp.open(<span class=\"string\">\"GET\"</span>,<span class=\"string\">\"demo_get2.html?fname=Henry&amp;lname=Ford\"</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">xmlhttp.send();</span><br></pre></td></tr></table></figure></p>\n<p>post请求：</p>\n<p>如果post表单那样的提交数据，需要添加http头<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">xmlhttp.open(<span class=\"string\">\"POST\"</span>,<span class=\"string\">\"ajax_test.html\"</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">xmlhttp.setRequestHeader(<span class=\"string\">\"Content-type\"</span>,<span class=\"string\">\"application/x-www-form-urlencoded\"</span>);</span><br><span class=\"line\">xmlhttp.send(<span class=\"string\">\"fname=Henry&amp;lname=Ford\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setRequestHeader方法：</span><br><span class=\"line\">setRequestHeader(header,value)  </span><br><span class=\"line\">向请求添加 HTTP 头。</span><br><span class=\"line\">header: 规定头的名称</span><br><span class=\"line\">value: 规定头的值</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Async-true\"><a href=\"#Async-true\" class=\"headerlink\" title=\"Async=true\"></a>Async=true</h1><ul>\n<li>使用XMLRequest.open()方法时，一般在ajax第三个参数必须是true（异步）<br>而且规定请求就绪时执行的函数。也就是定义 XMLHttpRequest.onreadystatechange 事件函数。<br>当请求完成时，触发该函数，类似定时器。</li>\n<li>因为web请求也许需要一段时间，所以发送异步请求，等待请求的这段时间可以执行其他代码。请求得到返回时，再执行onreadystatechange中的函数。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xmlhttp.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) //</span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (xmlhttp.readyState==<span class=\"number\">4</span> &amp;&amp; xmlhttp.status==<span class=\"number\">200</span>)<span class=\"comment\">//请求正确返回http code 200时</span></span><br><span class=\"line\">  <span class=\"comment\">//执行修改id为mydiv的html元素内容。</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>).innerHTML=xmlhttp.responseText;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">xmlhttp.open(<span class=\"string\">\"GET\"</span>,<span class=\"string\">\"ajax_info.txt\"</span>,<span class=\"literal\">true</span>); <span class=\"comment\">//请求ajax_info.txt文件，</span></span><br><span class=\"line\">xmlhttp.send();</span><br></pre></td></tr></table></figure>\n<p>#Async=false </p>\n<ul>\n<li>不推荐，对于小型的请求也下可以。因为javascript会等待服务器返回后才继续向下执行。如果服务器繁忙，应用程序会挂起或者挂掉。</li>\n</ul>\n<h1 id=\"XMLHttpRequest响应\"><a href=\"#XMLHttpRequest响应\" class=\"headerlink\" title=\"XMLHttpRequest响应\"></a>XMLHttpRequest响应</h1><p>如果返回200,就可以使用</p>\n"},{"layout":"post","title":"微信支付流程","date":"2019-04-13T01:40:00.000Z","comments":1,"_content":"\n\n## 三个平台都有什么？\n\n* 微信公众平台: 微信官方平台，功能： 群发推送、自动回复、二维码订阅，用途：消息推送、品牌传播、分享\n* 微信开放平台: 为第三方提供接口，比如分享朋友圈，发送给微信好友等\n* 微信商户平台：主要是用于微信支付的，比如APP和公众号需要接入支付功能，就需要申请一个商户号。\n\n\n## 前提\n* 在开放平台，注册自己的app，通俗讲就是在微信备案一下。\n\n## 客户端需要干嘛？\n\n* 需要下载微信安卓或者ios版SDK,集成到自己的app中，主要是为了调起微信支付模块。\n* app调起支付模块，需要传参数吧，不然请求微信服务器也不知道具体转给谁钱，转多少钱...\n* 支付参数哪里来呢？服务器生成啊.....\n* 支付完成后微信会返回微信订单号的信心，后期可以用于到微信服务器查询订单状态。\n\n\n## 商户服务器需要干嘛，比如一个卖游戏点卡的app？\n\n### 给客户端提供接口\n* 1.支付接口，这个接口需要以下业务功能\n* > 1.去查询用户是否存在，用户信息可以在redis中记录\n* > 2.如果某类商品，用户只能有一个产品生效的,比如点卡A,产品类别id为A\n* > 3.使用redis记录uid:goodsid[A]:hash记录这个购买的点卡x的信息,记录createtime，orderid，prepayid\n* > 4.如果uid对应点卡A的信息存在，且now - createtime < 15分钟，说明微信没回调过来，是支付中...的状态。直接拿缓存中信息返回给客户端就可以了，供客户端调用支付模块。\n* > 5.如果uid对应的点卡信心不存在，就说明用户没买过这种A这类的商品,生成28位的订单号作为out_trade_no参数，其他参数按规定设置，然后调用微信统一下单接口 https://api.mch.weixin.qq.com/pay/unifiedorder\n* > 6. 当前商户服务器统一下单的过程中，需要用mysql记录自己的订单信息、更新用户的余额扣减、记录一些用户订购该类产品的缓存信息等；mysql数据用于支付完成后，微信发起异步回调状态时更新订单状态。\n* > 7.下单后生成预支付id：prepayid，因为还没有真正调起支付模块，只是微信那边现生成一个预支付回话id。\n* > 8.有了prepayid加上其他参数，返回给客户端用于真正调起sdk支付模块。\n* > 9.调完支付模块后，微信服务器会立刻返回到app中，这时候客户端需要实现onResp回调函数，如果支付成功，需要去服务器查询是否真的ok，永远以服务端返回的支付结果为准。\n\n* 2.主动查询订单接口\n* > 1.需要知道我们自己分配的订单orderid，和uid，从mysql获取缓存，校验orderid和uid是不是对应同一个人。\n* > 2.查到mysql记录的这个订单状态还是支付中，就用orderid，微信推荐优先使用微信订单号，如果这个字段缺少就用商户的订单号。\n* > 3.调起微信查询url https://api.mch.weixin.qq.com/pay/orderquery，判断返回结果，然后事务操作（更新mysql订单状态，及用户金钱信息余额等）。\n\n\n* 回调接口（给微信服务器使用，用于回调支付状态）\n* > 1.我们首先查询订单状态是否为1支付中的状态，如果不是，说明失败，或者成功了，不与理会\n* > 2.如果数据return_code或者result_code不全是SUCCESS，直接按对应格式返回成功\n* > 3.如果都是SUCCESS，校验WXPAY_SECKEY，APPID，MCHID。\n* > 4.都通过了,则事务操作（更新mysql订单状态，及用户金钱信息余额等）,修改必要的缓存。\n\n\n\n","source":"_posts/language/html/weixin.md","raw":"---\nlayout: post\ntitle: 微信支付流程\ncategory: 微信支付\ndate: 2019-04-13 09:40:00\ncomments: true\n\n---\n\n\n## 三个平台都有什么？\n\n* 微信公众平台: 微信官方平台，功能： 群发推送、自动回复、二维码订阅，用途：消息推送、品牌传播、分享\n* 微信开放平台: 为第三方提供接口，比如分享朋友圈，发送给微信好友等\n* 微信商户平台：主要是用于微信支付的，比如APP和公众号需要接入支付功能，就需要申请一个商户号。\n\n\n## 前提\n* 在开放平台，注册自己的app，通俗讲就是在微信备案一下。\n\n## 客户端需要干嘛？\n\n* 需要下载微信安卓或者ios版SDK,集成到自己的app中，主要是为了调起微信支付模块。\n* app调起支付模块，需要传参数吧，不然请求微信服务器也不知道具体转给谁钱，转多少钱...\n* 支付参数哪里来呢？服务器生成啊.....\n* 支付完成后微信会返回微信订单号的信心，后期可以用于到微信服务器查询订单状态。\n\n\n## 商户服务器需要干嘛，比如一个卖游戏点卡的app？\n\n### 给客户端提供接口\n* 1.支付接口，这个接口需要以下业务功能\n* > 1.去查询用户是否存在，用户信息可以在redis中记录\n* > 2.如果某类商品，用户只能有一个产品生效的,比如点卡A,产品类别id为A\n* > 3.使用redis记录uid:goodsid[A]:hash记录这个购买的点卡x的信息,记录createtime，orderid，prepayid\n* > 4.如果uid对应点卡A的信息存在，且now - createtime < 15分钟，说明微信没回调过来，是支付中...的状态。直接拿缓存中信息返回给客户端就可以了，供客户端调用支付模块。\n* > 5.如果uid对应的点卡信心不存在，就说明用户没买过这种A这类的商品,生成28位的订单号作为out_trade_no参数，其他参数按规定设置，然后调用微信统一下单接口 https://api.mch.weixin.qq.com/pay/unifiedorder\n* > 6. 当前商户服务器统一下单的过程中，需要用mysql记录自己的订单信息、更新用户的余额扣减、记录一些用户订购该类产品的缓存信息等；mysql数据用于支付完成后，微信发起异步回调状态时更新订单状态。\n* > 7.下单后生成预支付id：prepayid，因为还没有真正调起支付模块，只是微信那边现生成一个预支付回话id。\n* > 8.有了prepayid加上其他参数，返回给客户端用于真正调起sdk支付模块。\n* > 9.调完支付模块后，微信服务器会立刻返回到app中，这时候客户端需要实现onResp回调函数，如果支付成功，需要去服务器查询是否真的ok，永远以服务端返回的支付结果为准。\n\n* 2.主动查询订单接口\n* > 1.需要知道我们自己分配的订单orderid，和uid，从mysql获取缓存，校验orderid和uid是不是对应同一个人。\n* > 2.查到mysql记录的这个订单状态还是支付中，就用orderid，微信推荐优先使用微信订单号，如果这个字段缺少就用商户的订单号。\n* > 3.调起微信查询url https://api.mch.weixin.qq.com/pay/orderquery，判断返回结果，然后事务操作（更新mysql订单状态，及用户金钱信息余额等）。\n\n\n* 回调接口（给微信服务器使用，用于回调支付状态）\n* > 1.我们首先查询订单状态是否为1支付中的状态，如果不是，说明失败，或者成功了，不与理会\n* > 2.如果数据return_code或者result_code不全是SUCCESS，直接按对应格式返回成功\n* > 3.如果都是SUCCESS，校验WXPAY_SECKEY，APPID，MCHID。\n* > 4.都通过了,则事务操作（更新mysql订单状态，及用户金钱信息余额等）,修改必要的缓存。\n\n\n\n","slug":"language/html/weixin","published":1,"updated":"2019-05-19T14:30:17.030Z","photos":[],"link":"","_id":"cjwxes5e5002yhdlibvvzo9do","content":"<h2 id=\"三个平台都有什么？\"><a href=\"#三个平台都有什么？\" class=\"headerlink\" title=\"三个平台都有什么？\"></a>三个平台都有什么？</h2><ul>\n<li>微信公众平台: 微信官方平台，功能： 群发推送、自动回复、二维码订阅，用途：消息推送、品牌传播、分享</li>\n<li>微信开放平台: 为第三方提供接口，比如分享朋友圈，发送给微信好友等</li>\n<li>微信商户平台：主要是用于微信支付的，比如APP和公众号需要接入支付功能，就需要申请一个商户号。</li>\n</ul>\n<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><ul>\n<li>在开放平台，注册自己的app，通俗讲就是在微信备案一下。</li>\n</ul>\n<h2 id=\"客户端需要干嘛？\"><a href=\"#客户端需要干嘛？\" class=\"headerlink\" title=\"客户端需要干嘛？\"></a>客户端需要干嘛？</h2><ul>\n<li>需要下载微信安卓或者ios版SDK,集成到自己的app中，主要是为了调起微信支付模块。</li>\n<li>app调起支付模块，需要传参数吧，不然请求微信服务器也不知道具体转给谁钱，转多少钱…</li>\n<li>支付参数哪里来呢？服务器生成啊…..</li>\n<li>支付完成后微信会返回微信订单号的信心，后期可以用于到微信服务器查询订单状态。</li>\n</ul>\n<h2 id=\"商户服务器需要干嘛，比如一个卖游戏点卡的app？\"><a href=\"#商户服务器需要干嘛，比如一个卖游戏点卡的app？\" class=\"headerlink\" title=\"商户服务器需要干嘛，比如一个卖游戏点卡的app？\"></a>商户服务器需要干嘛，比如一个卖游戏点卡的app？</h2><h3 id=\"给客户端提供接口\"><a href=\"#给客户端提供接口\" class=\"headerlink\" title=\"给客户端提供接口\"></a>给客户端提供接口</h3><ul>\n<li>1.支付接口，这个接口需要以下业务功能</li>\n<li><blockquote>\n<p>1.去查询用户是否存在，用户信息可以在redis中记录</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>2.如果某类商品，用户只能有一个产品生效的,比如点卡A,产品类别id为A</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>3.使用redis记录uid:goodsid[A]:hash记录这个购买的点卡x的信息,记录createtime，orderid，prepayid</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>4.如果uid对应点卡A的信息存在，且now - createtime &lt; 15分钟，说明微信没回调过来，是支付中…的状态。直接拿缓存中信息返回给客户端就可以了，供客户端调用支付模块。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>5.如果uid对应的点卡信心不存在，就说明用户没买过这种A这类的商品,生成28位的订单号作为out_trade_no参数，其他参数按规定设置，然后调用微信统一下单接口 <a href=\"https://api.mch.weixin.qq.com/pay/unifiedorder\" target=\"_blank\" rel=\"noopener\">https://api.mch.weixin.qq.com/pay/unifiedorder</a></p>\n</blockquote>\n</li>\n<li><blockquote>\n<ol start=\"6\">\n<li>当前商户服务器统一下单的过程中，需要用mysql记录自己的订单信息、更新用户的余额扣减、记录一些用户订购该类产品的缓存信息等；mysql数据用于支付完成后，微信发起异步回调状态时更新订单状态。</li>\n</ol>\n</blockquote>\n</li>\n<li><blockquote>\n<p>7.下单后生成预支付id：prepayid，因为还没有真正调起支付模块，只是微信那边现生成一个预支付回话id。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>8.有了prepayid加上其他参数，返回给客户端用于真正调起sdk支付模块。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>9.调完支付模块后，微信服务器会立刻返回到app中，这时候客户端需要实现onResp回调函数，如果支付成功，需要去服务器查询是否真的ok，永远以服务端返回的支付结果为准。</p>\n</blockquote>\n</li>\n<li><p>2.主动查询订单接口</p>\n</li>\n<li><blockquote>\n<p>1.需要知道我们自己分配的订单orderid，和uid，从mysql获取缓存，校验orderid和uid是不是对应同一个人。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>2.查到mysql记录的这个订单状态还是支付中，就用orderid，微信推荐优先使用微信订单号，如果这个字段缺少就用商户的订单号。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>3.调起微信查询url <a href=\"https://api.mch.weixin.qq.com/pay/orderquery，判断返回结果，然后事务操作（更新mysql订单状态，及用户金钱信息余额等）。\" target=\"_blank\" rel=\"noopener\">https://api.mch.weixin.qq.com/pay/orderquery，判断返回结果，然后事务操作（更新mysql订单状态，及用户金钱信息余额等）。</a></p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>回调接口（给微信服务器使用，用于回调支付状态）</li>\n<li><blockquote>\n<p>1.我们首先查询订单状态是否为1支付中的状态，如果不是，说明失败，或者成功了，不与理会</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>2.如果数据return_code或者result_code不全是SUCCESS，直接按对应格式返回成功</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>3.如果都是SUCCESS，校验WXPAY_SECKEY，APPID，MCHID。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>4.都通过了,则事务操作（更新mysql订单状态，及用户金钱信息余额等）,修改必要的缓存。</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"三个平台都有什么？\"><a href=\"#三个平台都有什么？\" class=\"headerlink\" title=\"三个平台都有什么？\"></a>三个平台都有什么？</h2><ul>\n<li>微信公众平台: 微信官方平台，功能： 群发推送、自动回复、二维码订阅，用途：消息推送、品牌传播、分享</li>\n<li>微信开放平台: 为第三方提供接口，比如分享朋友圈，发送给微信好友等</li>\n<li>微信商户平台：主要是用于微信支付的，比如APP和公众号需要接入支付功能，就需要申请一个商户号。</li>\n</ul>\n<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><ul>\n<li>在开放平台，注册自己的app，通俗讲就是在微信备案一下。</li>\n</ul>\n<h2 id=\"客户端需要干嘛？\"><a href=\"#客户端需要干嘛？\" class=\"headerlink\" title=\"客户端需要干嘛？\"></a>客户端需要干嘛？</h2><ul>\n<li>需要下载微信安卓或者ios版SDK,集成到自己的app中，主要是为了调起微信支付模块。</li>\n<li>app调起支付模块，需要传参数吧，不然请求微信服务器也不知道具体转给谁钱，转多少钱…</li>\n<li>支付参数哪里来呢？服务器生成啊…..</li>\n<li>支付完成后微信会返回微信订单号的信心，后期可以用于到微信服务器查询订单状态。</li>\n</ul>\n<h2 id=\"商户服务器需要干嘛，比如一个卖游戏点卡的app？\"><a href=\"#商户服务器需要干嘛，比如一个卖游戏点卡的app？\" class=\"headerlink\" title=\"商户服务器需要干嘛，比如一个卖游戏点卡的app？\"></a>商户服务器需要干嘛，比如一个卖游戏点卡的app？</h2><h3 id=\"给客户端提供接口\"><a href=\"#给客户端提供接口\" class=\"headerlink\" title=\"给客户端提供接口\"></a>给客户端提供接口</h3><ul>\n<li>1.支付接口，这个接口需要以下业务功能</li>\n<li><blockquote>\n<p>1.去查询用户是否存在，用户信息可以在redis中记录</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>2.如果某类商品，用户只能有一个产品生效的,比如点卡A,产品类别id为A</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>3.使用redis记录uid:goodsid[A]:hash记录这个购买的点卡x的信息,记录createtime，orderid，prepayid</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>4.如果uid对应点卡A的信息存在，且now - createtime &lt; 15分钟，说明微信没回调过来，是支付中…的状态。直接拿缓存中信息返回给客户端就可以了，供客户端调用支付模块。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>5.如果uid对应的点卡信心不存在，就说明用户没买过这种A这类的商品,生成28位的订单号作为out_trade_no参数，其他参数按规定设置，然后调用微信统一下单接口 <a href=\"https://api.mch.weixin.qq.com/pay/unifiedorder\" target=\"_blank\" rel=\"noopener\">https://api.mch.weixin.qq.com/pay/unifiedorder</a></p>\n</blockquote>\n</li>\n<li><blockquote>\n<ol start=\"6\">\n<li>当前商户服务器统一下单的过程中，需要用mysql记录自己的订单信息、更新用户的余额扣减、记录一些用户订购该类产品的缓存信息等；mysql数据用于支付完成后，微信发起异步回调状态时更新订单状态。</li>\n</ol>\n</blockquote>\n</li>\n<li><blockquote>\n<p>7.下单后生成预支付id：prepayid，因为还没有真正调起支付模块，只是微信那边现生成一个预支付回话id。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>8.有了prepayid加上其他参数，返回给客户端用于真正调起sdk支付模块。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>9.调完支付模块后，微信服务器会立刻返回到app中，这时候客户端需要实现onResp回调函数，如果支付成功，需要去服务器查询是否真的ok，永远以服务端返回的支付结果为准。</p>\n</blockquote>\n</li>\n<li><p>2.主动查询订单接口</p>\n</li>\n<li><blockquote>\n<p>1.需要知道我们自己分配的订单orderid，和uid，从mysql获取缓存，校验orderid和uid是不是对应同一个人。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>2.查到mysql记录的这个订单状态还是支付中，就用orderid，微信推荐优先使用微信订单号，如果这个字段缺少就用商户的订单号。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>3.调起微信查询url <a href=\"https://api.mch.weixin.qq.com/pay/orderquery，判断返回结果，然后事务操作（更新mysql订单状态，及用户金钱信息余额等）。\" target=\"_blank\" rel=\"noopener\">https://api.mch.weixin.qq.com/pay/orderquery，判断返回结果，然后事务操作（更新mysql订单状态，及用户金钱信息余额等）。</a></p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>回调接口（给微信服务器使用，用于回调支付状态）</li>\n<li><blockquote>\n<p>1.我们首先查询订单状态是否为1支付中的状态，如果不是，说明失败，或者成功了，不与理会</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>2.如果数据return_code或者result_code不全是SUCCESS，直接按对应格式返回成功</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>3.如果都是SUCCESS，校验WXPAY_SECKEY，APPID，MCHID。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>4.都通过了,则事务操作（更新mysql订单状态，及用户金钱信息余额等）,修改必要的缓存。</p>\n</blockquote>\n</li>\n</ul>\n"},{"layout":"post","title":"flask 第1章(基本结构和概念)","date":"2019-01-28T14:22:00.000Z","_content":"\n# 开始和程序基本结构\n\n## 1.首先安装虚拟环境包和git工具\n\n* sudo apt-get install python-virtualenv\n* sudo apt-get install git\n\n## 2.创建一个目录\n\n* mkdir flask_learn\n* cd flask_learn\n\n## 3.下载实例代码\n* git clone http://github.com/miguelgrinberg/flasky.git\n* cd flask\n* 建立一个虚拟环境\n* virtualenv venv\n* 激活虚拟环境\n* source venv/bin/activate\n* 取消激活分区\n* deactivate\n* 虚拟环境下安装pip\n* pip install flask\n* 切换分支\n* git checkout 2a\n\n```py\nfrom flask import Flask\napp = Flask(__name__)\n\n\n@app.route('/')\ndef index():\n    return '<h1>Hello World!</h1>'\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n\n```\n* 执行 python hello.py\n* 浏览器输入http://127.0.0.1:5000/ 就可以看到helloword了。\n* 但是这样会出现一个问题。你在linux虚拟机里面执行的代码。在window上浏览器看就不行，需要设置\n* 如下改动 app.run(debug=True，host=\"0.0.0.0\")或者使用manage模块扩展传参数，后面会提到。\n\n## 4. flask程序有四个上下文\n* curent_app  程序上下文， 当前激活的程序实例\n* g 程序上下文 处理请求的临时存储对象，每次请求都会重设这个变量。\n* request  请求上下文    请求对象，封装了每次http请求的内容\n* sesion  请求上下文    用户会话， 用于存储之间需要记住的值的词典。\n* 这是个变量每次请求 都是独立属于这一次请求的，或者说是属于同一个线程内全局可见。\n\n## 5. 请求调度\n\n*\t这个主要是 url和处理函数的映射关系，即视图。\n*\t通过app.url_map 可以看到映射关系。\n*\t生成映射的方法2中，1 app.route修饰器 2，app.add_url_rule()\n\n## 6. 请求钩子\n\n* 主要是为了每个请求开始可能都需要认证，数据库连接等重复操作的代码复。\n* 通过钩子装饰器，注册函数，在到达视图函数前运行这些函数。\n* 有四种个钩子 brefore_first_request,brefore_request,after_request,teardown_request\n> after_request 有没做处理的异常抛出时，是不运行的。\n> teardown_request 即使有没处理的异常抛出，也会运行。\n\n\n## 7. 响应\n\n* flask 默认返回200 状态吗\n* 可以返回其他状态吗\n```py\nreturn \"hello word!\", 400\n或者\nreturn \"hello world!\", 500, {\"ua\":10}\n返回的是一个元组，第二个是状态吗，第三个是header，字典形式。\n```\n\n* 还可以使用make_response(\"hello world!\", 500, {\"ua\":10})生成一个对象，以便调用函数设置cookie等其他值。\n* 320重定向，使用redirect(\"www.baidu.com\")函数。\n* 特殊响应，比如404 可以使用abort(404)函数，这个直接就吧控制权交给web服务器了，不会再调用其它函数。\n\n## 8. flask扩展\n\n* pip install flask-script\n\n* 用manager吧app对象包住，这样就可以使用manager扩展了。\n\n```py\nfrom flask import Flask\nfrom flask_script import Manager\n\napp = Flask(__name__)\n\nmanager = Manager(app)\n\n\n@app.route('/')\ndef index():\n    return '<h1>Hello World!</h1>'\n\n\n@app.route('/user/<name>')\ndef user(name):\n    return '<h1>Hello, %s!</h1>' % name\n\n\nif __name__ == '__main__':\n    manager.run()\n\n```\n\n* 启动服务：\n> python hello.py  runserver --host 0.0.0.0\n\n\n## 9 模板的继承\n\n* 类似于python中的类的继承\n* 首先需要一个基类模板base.html 然后把对应的可修改的块用  {%block X %} {%endblock%} 格式包含即可。\n\n```py\n<html>\n  <haed>\n  {% block  head%}  {%endblock%}\n  {% block title%} {%endblock%}\n  </head>\n  <body>\n    {%block body%}  {%endblock%}\n  </body>\n</html>\n```\n* 在子类模板中使用基类模板\n\n```py\n{%extends \"base.html\"% }\n\n{%block title%} 这是index标题 {%endblock%}\n\n{%block head%}\n  {{super()}}   #基类head部分原本的内容用supper获取\n  <style>\n  </style>\n{%endblock%}\n\n{%block body%}\n  <h1> hello world </h1>\n{%endblock%}\n```\n","source":"_posts/language/python/1基本结构.md","raw":"---\nlayout: post\ntitle: flask 第1章(基本结构和概念)\ncategory: flask\ndate: 2019-01-28 22:22:00\n\n---\n\n# 开始和程序基本结构\n\n## 1.首先安装虚拟环境包和git工具\n\n* sudo apt-get install python-virtualenv\n* sudo apt-get install git\n\n## 2.创建一个目录\n\n* mkdir flask_learn\n* cd flask_learn\n\n## 3.下载实例代码\n* git clone http://github.com/miguelgrinberg/flasky.git\n* cd flask\n* 建立一个虚拟环境\n* virtualenv venv\n* 激活虚拟环境\n* source venv/bin/activate\n* 取消激活分区\n* deactivate\n* 虚拟环境下安装pip\n* pip install flask\n* 切换分支\n* git checkout 2a\n\n```py\nfrom flask import Flask\napp = Flask(__name__)\n\n\n@app.route('/')\ndef index():\n    return '<h1>Hello World!</h1>'\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n\n```\n* 执行 python hello.py\n* 浏览器输入http://127.0.0.1:5000/ 就可以看到helloword了。\n* 但是这样会出现一个问题。你在linux虚拟机里面执行的代码。在window上浏览器看就不行，需要设置\n* 如下改动 app.run(debug=True，host=\"0.0.0.0\")或者使用manage模块扩展传参数，后面会提到。\n\n## 4. flask程序有四个上下文\n* curent_app  程序上下文， 当前激活的程序实例\n* g 程序上下文 处理请求的临时存储对象，每次请求都会重设这个变量。\n* request  请求上下文    请求对象，封装了每次http请求的内容\n* sesion  请求上下文    用户会话， 用于存储之间需要记住的值的词典。\n* 这是个变量每次请求 都是独立属于这一次请求的，或者说是属于同一个线程内全局可见。\n\n## 5. 请求调度\n\n*\t这个主要是 url和处理函数的映射关系，即视图。\n*\t通过app.url_map 可以看到映射关系。\n*\t生成映射的方法2中，1 app.route修饰器 2，app.add_url_rule()\n\n## 6. 请求钩子\n\n* 主要是为了每个请求开始可能都需要认证，数据库连接等重复操作的代码复。\n* 通过钩子装饰器，注册函数，在到达视图函数前运行这些函数。\n* 有四种个钩子 brefore_first_request,brefore_request,after_request,teardown_request\n> after_request 有没做处理的异常抛出时，是不运行的。\n> teardown_request 即使有没处理的异常抛出，也会运行。\n\n\n## 7. 响应\n\n* flask 默认返回200 状态吗\n* 可以返回其他状态吗\n```py\nreturn \"hello word!\", 400\n或者\nreturn \"hello world!\", 500, {\"ua\":10}\n返回的是一个元组，第二个是状态吗，第三个是header，字典形式。\n```\n\n* 还可以使用make_response(\"hello world!\", 500, {\"ua\":10})生成一个对象，以便调用函数设置cookie等其他值。\n* 320重定向，使用redirect(\"www.baidu.com\")函数。\n* 特殊响应，比如404 可以使用abort(404)函数，这个直接就吧控制权交给web服务器了，不会再调用其它函数。\n\n## 8. flask扩展\n\n* pip install flask-script\n\n* 用manager吧app对象包住，这样就可以使用manager扩展了。\n\n```py\nfrom flask import Flask\nfrom flask_script import Manager\n\napp = Flask(__name__)\n\nmanager = Manager(app)\n\n\n@app.route('/')\ndef index():\n    return '<h1>Hello World!</h1>'\n\n\n@app.route('/user/<name>')\ndef user(name):\n    return '<h1>Hello, %s!</h1>' % name\n\n\nif __name__ == '__main__':\n    manager.run()\n\n```\n\n* 启动服务：\n> python hello.py  runserver --host 0.0.0.0\n\n\n## 9 模板的继承\n\n* 类似于python中的类的继承\n* 首先需要一个基类模板base.html 然后把对应的可修改的块用  {%block X %} {%endblock%} 格式包含即可。\n\n```py\n<html>\n  <haed>\n  {% block  head%}  {%endblock%}\n  {% block title%} {%endblock%}\n  </head>\n  <body>\n    {%block body%}  {%endblock%}\n  </body>\n</html>\n```\n* 在子类模板中使用基类模板\n\n```py\n{%extends \"base.html\"% }\n\n{%block title%} 这是index标题 {%endblock%}\n\n{%block head%}\n  {{super()}}   #基类head部分原本的内容用supper获取\n  <style>\n  </style>\n{%endblock%}\n\n{%block body%}\n  <h1> hello world </h1>\n{%endblock%}\n```\n","slug":"language/python/1基本结构","published":1,"updated":"2019-05-19T14:30:17.031Z","comments":1,"photos":[],"link":"","_id":"cjwxes5e60031hdlidb5zo60s","content":"<h1 id=\"开始和程序基本结构\"><a href=\"#开始和程序基本结构\" class=\"headerlink\" title=\"开始和程序基本结构\"></a>开始和程序基本结构</h1><h2 id=\"1-首先安装虚拟环境包和git工具\"><a href=\"#1-首先安装虚拟环境包和git工具\" class=\"headerlink\" title=\"1.首先安装虚拟环境包和git工具\"></a>1.首先安装虚拟环境包和git工具</h2><ul>\n<li>sudo apt-get install python-virtualenv</li>\n<li>sudo apt-get install git</li>\n</ul>\n<h2 id=\"2-创建一个目录\"><a href=\"#2-创建一个目录\" class=\"headerlink\" title=\"2.创建一个目录\"></a>2.创建一个目录</h2><ul>\n<li>mkdir flask_learn</li>\n<li>cd flask_learn</li>\n</ul>\n<h2 id=\"3-下载实例代码\"><a href=\"#3-下载实例代码\" class=\"headerlink\" title=\"3.下载实例代码\"></a>3.下载实例代码</h2><ul>\n<li>git clone <a href=\"http://github.com/miguelgrinberg/flasky.git\" target=\"_blank\" rel=\"noopener\">http://github.com/miguelgrinberg/flasky.git</a></li>\n<li>cd flask</li>\n<li>建立一个虚拟环境</li>\n<li>virtualenv venv</li>\n<li>激活虚拟环境</li>\n<li>source venv/bin/activate</li>\n<li>取消激活分区</li>\n<li>deactivate</li>\n<li>虚拟环境下安装pip</li>\n<li>pip install flask</li>\n<li>切换分支</li>\n<li>git checkout 2a</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;h1&gt;Hello World!&lt;/h1&gt;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    app.run(debug=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>执行 python hello.py</li>\n<li>浏览器输入<a href=\"http://127.0.0.1:5000/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:5000/</a> 就可以看到helloword了。</li>\n<li>但是这样会出现一个问题。你在linux虚拟机里面执行的代码。在window上浏览器看就不行，需要设置</li>\n<li>如下改动 app.run(debug=True，host=”0.0.0.0”)或者使用manage模块扩展传参数，后面会提到。</li>\n</ul>\n<h2 id=\"4-flask程序有四个上下文\"><a href=\"#4-flask程序有四个上下文\" class=\"headerlink\" title=\"4. flask程序有四个上下文\"></a>4. flask程序有四个上下文</h2><ul>\n<li>curent_app  程序上下文， 当前激活的程序实例</li>\n<li>g 程序上下文 处理请求的临时存储对象，每次请求都会重设这个变量。</li>\n<li>request  请求上下文    请求对象，封装了每次http请求的内容</li>\n<li>sesion  请求上下文    用户会话， 用于存储之间需要记住的值的词典。</li>\n<li>这是个变量每次请求 都是独立属于这一次请求的，或者说是属于同一个线程内全局可见。</li>\n</ul>\n<h2 id=\"5-请求调度\"><a href=\"#5-请求调度\" class=\"headerlink\" title=\"5. 请求调度\"></a>5. 请求调度</h2><ul>\n<li>这个主要是 url和处理函数的映射关系，即视图。</li>\n<li>通过app.url_map 可以看到映射关系。</li>\n<li>生成映射的方法2中，1 app.route修饰器 2，app.add_url_rule()</li>\n</ul>\n<h2 id=\"6-请求钩子\"><a href=\"#6-请求钩子\" class=\"headerlink\" title=\"6. 请求钩子\"></a>6. 请求钩子</h2><ul>\n<li>主要是为了每个请求开始可能都需要认证，数据库连接等重复操作的代码复。</li>\n<li>通过钩子装饰器，注册函数，在到达视图函数前运行这些函数。</li>\n<li>有四种个钩子 brefore_first_request,brefore_request,after_request,teardown_request<blockquote>\n<p>after_request 有没做处理的异常抛出时，是不运行的。<br>teardown_request 即使有没处理的异常抛出，也会运行。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"7-响应\"><a href=\"#7-响应\" class=\"headerlink\" title=\"7. 响应\"></a>7. 响应</h2><ul>\n<li>flask 默认返回200 状态吗</li>\n<li><p>可以返回其他状态吗</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">\"hello word!\"</span>, <span class=\"number\">400</span></span><br><span class=\"line\">或者</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">\"hello world!\"</span>, <span class=\"number\">500</span>, &#123;<span class=\"string\">\"ua\"</span>:<span class=\"number\">10</span>&#125;</span><br><span class=\"line\">返回的是一个元组，第二个是状态吗，第三个是header，字典形式。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>还可以使用make_response(“hello world!”, 500, {“ua”:10})生成一个对象，以便调用函数设置cookie等其他值。</p>\n</li>\n<li>320重定向，使用redirect(“<a href=\"http://www.baidu.com&quot;)函数。\" target=\"_blank\" rel=\"noopener\">www.baidu.com&quot;)函数。</a></li>\n<li>特殊响应，比如404 可以使用abort(404)函数，这个直接就吧控制权交给web服务器了，不会再调用其它函数。</li>\n</ul>\n<h2 id=\"8-flask扩展\"><a href=\"#8-flask扩展\" class=\"headerlink\" title=\"8. flask扩展\"></a>8. flask扩展</h2><ul>\n<li><p>pip install flask-script</p>\n</li>\n<li><p>用manager吧app对象包住，这样就可以使用manager扩展了。</p>\n</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_script <span class=\"keyword\">import</span> Manager</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">manager = Manager(app)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;h1&gt;Hello World!&lt;/h1&gt;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/user/&lt;name&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">user</span><span class=\"params\">(name)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;h1&gt;Hello, %s!&lt;/h1&gt;'</span> % name</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    manager.run()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动服务：<blockquote>\n<p>python hello.py  runserver –host 0.0.0.0</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"9-模板的继承\"><a href=\"#9-模板的继承\" class=\"headerlink\" title=\"9 模板的继承\"></a>9 模板的继承</h2><ul>\n<li>类似于python中的类的继承</li>\n<li>首先需要一个基类模板base.html 然后把对应的可修改的块用    格式包含即可。</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;haed&gt;</span><br><span class=\"line\">  &#123;% block  head%&#125;  &#123;%endblock%&#125;</span><br><span class=\"line\">  &#123;% block title%&#125; &#123;%endblock%&#125;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &#123;%block body%&#125;  &#123;%endblock%&#125;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在子类模板中使用基类模板</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;%extends <span class=\"string\">\"base.html\"</span>% &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;%block title%&#125; 这是index标题 &#123;%endblock%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;%block head%&#125;</span><br><span class=\"line\">  &#123;&#123;super()&#125;&#125;   <span class=\"comment\">#基类head部分原本的内容用supper获取</span></span><br><span class=\"line\">  &lt;style&gt;</span><br><span class=\"line\">  &lt;/style&gt;</span><br><span class=\"line\">&#123;%endblock%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;%block body%&#125;</span><br><span class=\"line\">  &lt;h1&gt; hello world &lt;/h1&gt;</span><br><span class=\"line\">&#123;%endblock%&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"开始和程序基本结构\"><a href=\"#开始和程序基本结构\" class=\"headerlink\" title=\"开始和程序基本结构\"></a>开始和程序基本结构</h1><h2 id=\"1-首先安装虚拟环境包和git工具\"><a href=\"#1-首先安装虚拟环境包和git工具\" class=\"headerlink\" title=\"1.首先安装虚拟环境包和git工具\"></a>1.首先安装虚拟环境包和git工具</h2><ul>\n<li>sudo apt-get install python-virtualenv</li>\n<li>sudo apt-get install git</li>\n</ul>\n<h2 id=\"2-创建一个目录\"><a href=\"#2-创建一个目录\" class=\"headerlink\" title=\"2.创建一个目录\"></a>2.创建一个目录</h2><ul>\n<li>mkdir flask_learn</li>\n<li>cd flask_learn</li>\n</ul>\n<h2 id=\"3-下载实例代码\"><a href=\"#3-下载实例代码\" class=\"headerlink\" title=\"3.下载实例代码\"></a>3.下载实例代码</h2><ul>\n<li>git clone <a href=\"http://github.com/miguelgrinberg/flasky.git\" target=\"_blank\" rel=\"noopener\">http://github.com/miguelgrinberg/flasky.git</a></li>\n<li>cd flask</li>\n<li>建立一个虚拟环境</li>\n<li>virtualenv venv</li>\n<li>激活虚拟环境</li>\n<li>source venv/bin/activate</li>\n<li>取消激活分区</li>\n<li>deactivate</li>\n<li>虚拟环境下安装pip</li>\n<li>pip install flask</li>\n<li>切换分支</li>\n<li>git checkout 2a</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;h1&gt;Hello World!&lt;/h1&gt;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    app.run(debug=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>执行 python hello.py</li>\n<li>浏览器输入<a href=\"http://127.0.0.1:5000/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:5000/</a> 就可以看到helloword了。</li>\n<li>但是这样会出现一个问题。你在linux虚拟机里面执行的代码。在window上浏览器看就不行，需要设置</li>\n<li>如下改动 app.run(debug=True，host=”0.0.0.0”)或者使用manage模块扩展传参数，后面会提到。</li>\n</ul>\n<h2 id=\"4-flask程序有四个上下文\"><a href=\"#4-flask程序有四个上下文\" class=\"headerlink\" title=\"4. flask程序有四个上下文\"></a>4. flask程序有四个上下文</h2><ul>\n<li>curent_app  程序上下文， 当前激活的程序实例</li>\n<li>g 程序上下文 处理请求的临时存储对象，每次请求都会重设这个变量。</li>\n<li>request  请求上下文    请求对象，封装了每次http请求的内容</li>\n<li>sesion  请求上下文    用户会话， 用于存储之间需要记住的值的词典。</li>\n<li>这是个变量每次请求 都是独立属于这一次请求的，或者说是属于同一个线程内全局可见。</li>\n</ul>\n<h2 id=\"5-请求调度\"><a href=\"#5-请求调度\" class=\"headerlink\" title=\"5. 请求调度\"></a>5. 请求调度</h2><ul>\n<li>这个主要是 url和处理函数的映射关系，即视图。</li>\n<li>通过app.url_map 可以看到映射关系。</li>\n<li>生成映射的方法2中，1 app.route修饰器 2，app.add_url_rule()</li>\n</ul>\n<h2 id=\"6-请求钩子\"><a href=\"#6-请求钩子\" class=\"headerlink\" title=\"6. 请求钩子\"></a>6. 请求钩子</h2><ul>\n<li>主要是为了每个请求开始可能都需要认证，数据库连接等重复操作的代码复。</li>\n<li>通过钩子装饰器，注册函数，在到达视图函数前运行这些函数。</li>\n<li>有四种个钩子 brefore_first_request,brefore_request,after_request,teardown_request<blockquote>\n<p>after_request 有没做处理的异常抛出时，是不运行的。<br>teardown_request 即使有没处理的异常抛出，也会运行。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"7-响应\"><a href=\"#7-响应\" class=\"headerlink\" title=\"7. 响应\"></a>7. 响应</h2><ul>\n<li>flask 默认返回200 状态吗</li>\n<li><p>可以返回其他状态吗</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">\"hello word!\"</span>, <span class=\"number\">400</span></span><br><span class=\"line\">或者</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">\"hello world!\"</span>, <span class=\"number\">500</span>, &#123;<span class=\"string\">\"ua\"</span>:<span class=\"number\">10</span>&#125;</span><br><span class=\"line\">返回的是一个元组，第二个是状态吗，第三个是header，字典形式。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>还可以使用make_response(“hello world!”, 500, {“ua”:10})生成一个对象，以便调用函数设置cookie等其他值。</p>\n</li>\n<li>320重定向，使用redirect(“<a href=\"http://www.baidu.com&quot;)函数。\" target=\"_blank\" rel=\"noopener\">www.baidu.com&quot;)函数。</a></li>\n<li>特殊响应，比如404 可以使用abort(404)函数，这个直接就吧控制权交给web服务器了，不会再调用其它函数。</li>\n</ul>\n<h2 id=\"8-flask扩展\"><a href=\"#8-flask扩展\" class=\"headerlink\" title=\"8. flask扩展\"></a>8. flask扩展</h2><ul>\n<li><p>pip install flask-script</p>\n</li>\n<li><p>用manager吧app对象包住，这样就可以使用manager扩展了。</p>\n</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_script <span class=\"keyword\">import</span> Manager</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">manager = Manager(app)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;h1&gt;Hello World!&lt;/h1&gt;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/user/&lt;name&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">user</span><span class=\"params\">(name)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;h1&gt;Hello, %s!&lt;/h1&gt;'</span> % name</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    manager.run()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动服务：<blockquote>\n<p>python hello.py  runserver –host 0.0.0.0</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"9-模板的继承\"><a href=\"#9-模板的继承\" class=\"headerlink\" title=\"9 模板的继承\"></a>9 模板的继承</h2><ul>\n<li>类似于python中的类的继承</li>\n<li>首先需要一个基类模板base.html 然后把对应的可修改的块用    格式包含即可。</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;haed&gt;</span><br><span class=\"line\">  &#123;% block  head%&#125;  &#123;%endblock%&#125;</span><br><span class=\"line\">  &#123;% block title%&#125; &#123;%endblock%&#125;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &#123;%block body%&#125;  &#123;%endblock%&#125;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在子类模板中使用基类模板</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;%extends <span class=\"string\">\"base.html\"</span>% &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;%block title%&#125; 这是index标题 &#123;%endblock%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;%block head%&#125;</span><br><span class=\"line\">  &#123;&#123;super()&#125;&#125;   <span class=\"comment\">#基类head部分原本的内容用supper获取</span></span><br><span class=\"line\">  &lt;style&gt;</span><br><span class=\"line\">  &lt;/style&gt;</span><br><span class=\"line\">&#123;%endblock%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;%block body%&#125;</span><br><span class=\"line\">  &lt;h1&gt; hello world &lt;/h1&gt;</span><br><span class=\"line\">&#123;%endblock%&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"python类的三种装饰器","date":"2019-02-14T06:00:00.000Z","_content":"\n## property装饰器作用和原理\n\n* 1. 我们知道c++中有public,projected,private等修饰类私有属性的作用，这样就限定了某些属性只能读取，不能修改；有些能读也能需改。\n* 2. 设置C++类中的一个属性可以自定义方法get和set方法。\n* 3. python中实现这种原理，就需要装饰器property，本身可修饰（变量x同名）的函数，让x拥有可读的属性（相当于get函数\n* 4. @property进而又生成一个@x.setter装饰器，在修饰一下属性x同名的函数就让x拥有可写的属性（相当于set函数）\n\n\n## property 装饰器\n\n```py\nclass Student(object):\n\n    @property\n    def birth(self):\n        return self._birth\n\n    @birth.setter\n    def birth(self, value):\n        self._birth = value\n\n    @property\n    def age(self):\n        return 2014 - self._birth\n        \n    # birth 是一个可读可写的属性，age是只读属性。\n    # property装饰器本身可以把getter方法变成属性，同时生成一个@birth.setter装饰器，可以修饰birth变成一个可设置的属性。\n    # 但要注意这些额外函数的名字和 property 下的一样，例如这里的 birth,age。\n```\n\n\n## 一种古老的用法，使用内置函数property实现如下，和上面的方法一样。\n\n```py\nclass Animal(object):\n    def __init__(self, name, age):\n        self._name = name\n        self._age = age\n        self._color = 'Black'\n\n    def get_name(self):\n        return self._name\n\n    def set_name(self, value):\n        if isinstance(value, basestring):\n            self._name = value\n        else:\n            self._name = 'No name'\n\n    name = property(fget=get_name, fset=set_name, fdel=None, doc='name of an animal')\n\n    def get_age(self):\n        return self._age\n\n    def set_age(self, value):\n        if value > 0 and value < 100:\n            self._age = value\n        else:\n            self._age = 0\n            # print 'invalid age value.'\n\n    age = property(fget=get_age, fset=set_age, fdel=None, doc='name of an animal')\n    \n\na = Animal('black dog', 3)\na.name = 'white dog'\na.age = 3\nprint 'Name:', a.name\nprint Animal.name.__doc__\nprint 'Age:', a.age\n```\n\n\n\n","source":"_posts/language/python/1_三种装饰器.md","raw":"---\nlayout: post\ntitle: python类的三种装饰器\ncategory: python\ndate: 2019-02-14 14:00:00\n\n---\n\n## property装饰器作用和原理\n\n* 1. 我们知道c++中有public,projected,private等修饰类私有属性的作用，这样就限定了某些属性只能读取，不能修改；有些能读也能需改。\n* 2. 设置C++类中的一个属性可以自定义方法get和set方法。\n* 3. python中实现这种原理，就需要装饰器property，本身可修饰（变量x同名）的函数，让x拥有可读的属性（相当于get函数\n* 4. @property进而又生成一个@x.setter装饰器，在修饰一下属性x同名的函数就让x拥有可写的属性（相当于set函数）\n\n\n## property 装饰器\n\n```py\nclass Student(object):\n\n    @property\n    def birth(self):\n        return self._birth\n\n    @birth.setter\n    def birth(self, value):\n        self._birth = value\n\n    @property\n    def age(self):\n        return 2014 - self._birth\n        \n    # birth 是一个可读可写的属性，age是只读属性。\n    # property装饰器本身可以把getter方法变成属性，同时生成一个@birth.setter装饰器，可以修饰birth变成一个可设置的属性。\n    # 但要注意这些额外函数的名字和 property 下的一样，例如这里的 birth,age。\n```\n\n\n## 一种古老的用法，使用内置函数property实现如下，和上面的方法一样。\n\n```py\nclass Animal(object):\n    def __init__(self, name, age):\n        self._name = name\n        self._age = age\n        self._color = 'Black'\n\n    def get_name(self):\n        return self._name\n\n    def set_name(self, value):\n        if isinstance(value, basestring):\n            self._name = value\n        else:\n            self._name = 'No name'\n\n    name = property(fget=get_name, fset=set_name, fdel=None, doc='name of an animal')\n\n    def get_age(self):\n        return self._age\n\n    def set_age(self, value):\n        if value > 0 and value < 100:\n            self._age = value\n        else:\n            self._age = 0\n            # print 'invalid age value.'\n\n    age = property(fget=get_age, fset=set_age, fdel=None, doc='name of an animal')\n    \n\na = Animal('black dog', 3)\na.name = 'white dog'\na.age = 3\nprint 'Name:', a.name\nprint Animal.name.__doc__\nprint 'Age:', a.age\n```\n\n\n\n","slug":"language/python/1_三种装饰器","published":1,"updated":"2019-05-19T14:18:38.608Z","comments":1,"photos":[],"link":"","_id":"cjwxes5e70032hdliyqpiexes","content":"<h2 id=\"property装饰器作用和原理\"><a href=\"#property装饰器作用和原理\" class=\"headerlink\" title=\"property装饰器作用和原理\"></a>property装饰器作用和原理</h2><ul>\n<li><ol>\n<li>我们知道c++中有public,projected,private等修饰类私有属性的作用，这样就限定了某些属性只能读取，不能修改；有些能读也能需改。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>设置C++类中的一个属性可以自定义方法get和set方法。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>python中实现这种原理，就需要装饰器property，本身可修饰（变量x同名）的函数，让x拥有可读的属性（相当于get函数</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>@property进而又生成一个@x.setter装饰器，在修饰一下属性x同名的函数就让x拥有可写的属性（相当于set函数）</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"property-装饰器\"><a href=\"#property-装饰器\" class=\"headerlink\" title=\"property 装饰器\"></a>property 装饰器</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">birth</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._birth</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @birth.setter</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">birth</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        self._birth = value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">age</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2014</span> - self._birth</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"># birth 是一个可读可写的属性，age是只读属性。</span></span><br><span class=\"line\">    <span class=\"comment\"># property装饰器本身可以把getter方法变成属性，同时生成一个@birth.setter装饰器，可以修饰birth变成一个可设置的属性。</span></span><br><span class=\"line\">    <span class=\"comment\"># 但要注意这些额外函数的名字和 property 下的一样，例如这里的 birth,age。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"一种古老的用法，使用内置函数property实现如下，和上面的方法一样。\"><a href=\"#一种古老的用法，使用内置函数property实现如下，和上面的方法一样。\" class=\"headerlink\" title=\"一种古老的用法，使用内置函数property实现如下，和上面的方法一样。\"></a>一种古老的用法，使用内置函数property实现如下，和上面的方法一样。</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, age)</span>:</span></span><br><span class=\"line\">        self._name = name</span><br><span class=\"line\">        self._age = age</span><br><span class=\"line\">        self._color = <span class=\"string\">'Black'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_name</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_name</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> isinstance(value, basestring):</span><br><span class=\"line\">            self._name = value</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self._name = <span class=\"string\">'No name'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    name = property(fget=get_name, fset=set_name, fdel=<span class=\"keyword\">None</span>, doc=<span class=\"string\">'name of an animal'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_age</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._age</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_age</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> value &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> value &lt; <span class=\"number\">100</span>:</span><br><span class=\"line\">            self._age = value</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self._age = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"comment\"># print 'invalid age value.'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    age = property(fget=get_age, fset=set_age, fdel=<span class=\"keyword\">None</span>, doc=<span class=\"string\">'name of an animal'</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">a = Animal(<span class=\"string\">'black dog'</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">a.name = <span class=\"string\">'white dog'</span></span><br><span class=\"line\">a.age = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Name:'</span>, a.name</span><br><span class=\"line\"><span class=\"keyword\">print</span> Animal.name.__doc__</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Age:'</span>, a.age</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"property装饰器作用和原理\"><a href=\"#property装饰器作用和原理\" class=\"headerlink\" title=\"property装饰器作用和原理\"></a>property装饰器作用和原理</h2><ul>\n<li><ol>\n<li>我们知道c++中有public,projected,private等修饰类私有属性的作用，这样就限定了某些属性只能读取，不能修改；有些能读也能需改。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>设置C++类中的一个属性可以自定义方法get和set方法。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>python中实现这种原理，就需要装饰器property，本身可修饰（变量x同名）的函数，让x拥有可读的属性（相当于get函数</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>@property进而又生成一个@x.setter装饰器，在修饰一下属性x同名的函数就让x拥有可写的属性（相当于set函数）</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"property-装饰器\"><a href=\"#property-装饰器\" class=\"headerlink\" title=\"property 装饰器\"></a>property 装饰器</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">birth</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._birth</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @birth.setter</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">birth</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        self._birth = value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">age</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2014</span> - self._birth</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"># birth 是一个可读可写的属性，age是只读属性。</span></span><br><span class=\"line\">    <span class=\"comment\"># property装饰器本身可以把getter方法变成属性，同时生成一个@birth.setter装饰器，可以修饰birth变成一个可设置的属性。</span></span><br><span class=\"line\">    <span class=\"comment\"># 但要注意这些额外函数的名字和 property 下的一样，例如这里的 birth,age。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"一种古老的用法，使用内置函数property实现如下，和上面的方法一样。\"><a href=\"#一种古老的用法，使用内置函数property实现如下，和上面的方法一样。\" class=\"headerlink\" title=\"一种古老的用法，使用内置函数property实现如下，和上面的方法一样。\"></a>一种古老的用法，使用内置函数property实现如下，和上面的方法一样。</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, age)</span>:</span></span><br><span class=\"line\">        self._name = name</span><br><span class=\"line\">        self._age = age</span><br><span class=\"line\">        self._color = <span class=\"string\">'Black'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_name</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_name</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> isinstance(value, basestring):</span><br><span class=\"line\">            self._name = value</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self._name = <span class=\"string\">'No name'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    name = property(fget=get_name, fset=set_name, fdel=<span class=\"keyword\">None</span>, doc=<span class=\"string\">'name of an animal'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_age</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._age</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_age</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> value &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> value &lt; <span class=\"number\">100</span>:</span><br><span class=\"line\">            self._age = value</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self._age = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"comment\"># print 'invalid age value.'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    age = property(fget=get_age, fset=set_age, fdel=<span class=\"keyword\">None</span>, doc=<span class=\"string\">'name of an animal'</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">a = Animal(<span class=\"string\">'black dog'</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">a.name = <span class=\"string\">'white dog'</span></span><br><span class=\"line\">a.age = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Name:'</span>, a.name</span><br><span class=\"line\"><span class=\"keyword\">print</span> Animal.name.__doc__</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Age:'</span>, a.age</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"flask 第2章(模板)","date":"2019-01-28T14:22:00.000Z","_content":"\n# 模板\n\n## 1. jinja2模板引擎\n\n* 创建模板目录\n* mkdir templates\n* cd templates\n* vim index.html\n* 输入 <h1\\> hello world! </h1\\>\n\n* vim user.html\n* 输入 <h1\\> hello {{name}} </h1\\>\n\n\n## 2. 变量\n\n### 普通变量\n* 占位符变量可以是python中的类型\n```py\n {{ mydict['key'] }}\n {{ mylist[3] }}\n {{ mylist[value] }}\n {{ obje.func() }}\n ```\n \n### 过滤器  \n\n* hello {{ name|capitalize}}  把name转成搜字符大写。\n\n|过滤器名字|说明|\n|-|-|\n|safe|渲染时不转义|\n|capitalize|首字母大写|\n|lower|转成小写|\n|upper|转成大写|\n|title|每个单词首字母转大写|\n|trim|去掉首尾空格|\n|striptags|渲染前把其中的html标签都删除掉|\n\n* safe 常用在现实html代码本身，不然标签会被引擎默认转义(这样也是为了安全考虑)。\n* 不要再不可信的值上使用safe过滤器，比如表单输入。\n\n## 3. 控制结构\n\n### if结构\n\n```py\n  { % if user %}\n    hello {{user}}\n  {% else %}\n    hello stranger\n  {% endif %}\n```\n\n\n### for循环结构\n\n```py\n<ul>\n{ % for x in list %}\n  <li>{{ x }}</li>\n{ %endfor% }\n</ul>\n```\n\n### 宏。 类似python的函数\n\n```py\n* 定义宏\n {% macro render_comment(x) %}\n  <li>{{ x }}</li>\n {% endmacro%}\n\n* 使用\n\n<ul>\n {% for x in list %>\n    {{ render_comment(x) }}\n { %endfor%}\n </ul>\n\n* 可以将宏放入单独的文件，一边重复使用，使用时导入即可。\n{ % import 'macros.html' as macros % }\n<ul>\n   {% for x in list %>\n      {{ macros.render_comment(x) }}\n   { %endfor%}\n</ul>\n\n* 需要重复使用的模板也可单独放一个文件中\n用到的地方 {% include 'common.html'%} 包含即可。\n\n```\n\n\n","source":"_posts/language/python/2_模板.md","raw":"---\nlayout: post\ntitle: flask 第2章(模板)\ncategory: flask\ndate: 2019-01-28 22:22:00\n\n---\n\n# 模板\n\n## 1. jinja2模板引擎\n\n* 创建模板目录\n* mkdir templates\n* cd templates\n* vim index.html\n* 输入 <h1\\> hello world! </h1\\>\n\n* vim user.html\n* 输入 <h1\\> hello {{name}} </h1\\>\n\n\n## 2. 变量\n\n### 普通变量\n* 占位符变量可以是python中的类型\n```py\n {{ mydict['key'] }}\n {{ mylist[3] }}\n {{ mylist[value] }}\n {{ obje.func() }}\n ```\n \n### 过滤器  \n\n* hello {{ name|capitalize}}  把name转成搜字符大写。\n\n|过滤器名字|说明|\n|-|-|\n|safe|渲染时不转义|\n|capitalize|首字母大写|\n|lower|转成小写|\n|upper|转成大写|\n|title|每个单词首字母转大写|\n|trim|去掉首尾空格|\n|striptags|渲染前把其中的html标签都删除掉|\n\n* safe 常用在现实html代码本身，不然标签会被引擎默认转义(这样也是为了安全考虑)。\n* 不要再不可信的值上使用safe过滤器，比如表单输入。\n\n## 3. 控制结构\n\n### if结构\n\n```py\n  { % if user %}\n    hello {{user}}\n  {% else %}\n    hello stranger\n  {% endif %}\n```\n\n\n### for循环结构\n\n```py\n<ul>\n{ % for x in list %}\n  <li>{{ x }}</li>\n{ %endfor% }\n</ul>\n```\n\n### 宏。 类似python的函数\n\n```py\n* 定义宏\n {% macro render_comment(x) %}\n  <li>{{ x }}</li>\n {% endmacro%}\n\n* 使用\n\n<ul>\n {% for x in list %>\n    {{ render_comment(x) }}\n { %endfor%}\n </ul>\n\n* 可以将宏放入单独的文件，一边重复使用，使用时导入即可。\n{ % import 'macros.html' as macros % }\n<ul>\n   {% for x in list %>\n      {{ macros.render_comment(x) }}\n   { %endfor%}\n</ul>\n\n* 需要重复使用的模板也可单独放一个文件中\n用到的地方 {% include 'common.html'%} 包含即可。\n\n```\n\n\n","slug":"language/python/2_模板","published":1,"updated":"2019-05-19T14:30:17.031Z","comments":1,"photos":[],"link":"","_id":"cjwxes5e80035hdlif3tb0smw","content":"<h1 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h1><h2 id=\"1-jinja2模板引擎\"><a href=\"#1-jinja2模板引擎\" class=\"headerlink\" title=\"1. jinja2模板引擎\"></a>1. jinja2模板引擎</h2><ul>\n<li>创建模板目录</li>\n<li>mkdir templates</li>\n<li>cd templates</li>\n<li>vim index.html</li>\n<li><p>输入 &lt;h1> hello world! &lt;/h1></p>\n</li>\n<li><p>vim user.html</p>\n</li>\n<li>输入 &lt;h1> hello  &lt;/h1></li>\n</ul>\n<h2 id=\"2-变量\"><a href=\"#2-变量\" class=\"headerlink\" title=\"2. 变量\"></a>2. 变量</h2><h3 id=\"普通变量\"><a href=\"#普通变量\" class=\"headerlink\" title=\"普通变量\"></a>普通变量</h3><ul>\n<li>占位符变量可以是python中的类型<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; mydict[<span class=\"string\">'key'</span>] &#125;&#125;</span><br><span class=\"line\">&#123;&#123; mylist[<span class=\"number\">3</span>] &#125;&#125;</span><br><span class=\"line\">&#123;&#123; mylist[value] &#125;&#125;</span><br><span class=\"line\">&#123;&#123; obje.func() &#125;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><ul>\n<li>hello   把name转成搜字符大写。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>过滤器名字</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>safe</td>\n<td>渲染时不转义</td>\n</tr>\n<tr>\n<td>capitalize</td>\n<td>首字母大写</td>\n</tr>\n<tr>\n<td>lower</td>\n<td>转成小写</td>\n</tr>\n<tr>\n<td>upper</td>\n<td>转成大写</td>\n</tr>\n<tr>\n<td>title</td>\n<td>每个单词首字母转大写</td>\n</tr>\n<tr>\n<td>trim</td>\n<td>去掉首尾空格</td>\n</tr>\n<tr>\n<td>striptags</td>\n<td>渲染前把其中的html标签都删除掉</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>safe 常用在现实html代码本身，不然标签会被引擎默认转义(这样也是为了安全考虑)。</li>\n<li>不要再不可信的值上使用safe过滤器，比如表单输入。</li>\n</ul>\n<h2 id=\"3-控制结构\"><a href=\"#3-控制结构\" class=\"headerlink\" title=\"3. 控制结构\"></a>3. 控制结构</h2><h3 id=\"if结构\"><a href=\"#if结构\" class=\"headerlink\" title=\"if结构\"></a>if结构</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; % <span class=\"keyword\">if</span> user %&#125;</span><br><span class=\"line\">  hello &#123;&#123;user&#125;&#125;</span><br><span class=\"line\">&#123;% <span class=\"keyword\">else</span> %&#125;</span><br><span class=\"line\">  hello stranger</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"for循环结构\"><a href=\"#for循环结构\" class=\"headerlink\" title=\"for循环结构\"></a>for循环结构</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">&#123; % <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> list %&#125;</span><br><span class=\"line\">  &lt;li&gt;&#123;&#123; x &#125;&#125;&lt;/li&gt;</span><br><span class=\"line\">&#123; %endfor% &#125;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"宏。-类似python的函数\"><a href=\"#宏。-类似python的函数\" class=\"headerlink\" title=\"宏。 类似python的函数\"></a>宏。 类似python的函数</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 定义宏</span><br><span class=\"line\"> &#123;% macro render_comment(x) %&#125;</span><br><span class=\"line\">  &lt;li&gt;&#123;&#123; x &#125;&#125;&lt;/li&gt;</span><br><span class=\"line\"> &#123;% endmacro%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">* 使用</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\"> &#123;% <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> list %&gt;</span><br><span class=\"line\">    &#123;&#123; render_comment(x) &#125;&#125;</span><br><span class=\"line\"> &#123; %endfor%&#125;</span><br><span class=\"line\"> &lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">* 可以将宏放入单独的文件，一边重复使用，使用时导入即可。</span><br><span class=\"line\">&#123; % <span class=\"keyword\">import</span> <span class=\"string\">'macros.html'</span> <span class=\"keyword\">as</span> macros % &#125;</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">   &#123;% <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> list %&gt;</span><br><span class=\"line\">      &#123;&#123; macros.render_comment(x) &#125;&#125;</span><br><span class=\"line\">   &#123; %endfor%&#125;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">* 需要重复使用的模板也可单独放一个文件中</span><br><span class=\"line\">用到的地方 &#123;% include <span class=\"string\">'common.html'</span>%&#125; 包含即可。</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h1><h2 id=\"1-jinja2模板引擎\"><a href=\"#1-jinja2模板引擎\" class=\"headerlink\" title=\"1. jinja2模板引擎\"></a>1. jinja2模板引擎</h2><ul>\n<li>创建模板目录</li>\n<li>mkdir templates</li>\n<li>cd templates</li>\n<li>vim index.html</li>\n<li><p>输入 &lt;h1> hello world! &lt;/h1></p>\n</li>\n<li><p>vim user.html</p>\n</li>\n<li>输入 &lt;h1> hello  &lt;/h1></li>\n</ul>\n<h2 id=\"2-变量\"><a href=\"#2-变量\" class=\"headerlink\" title=\"2. 变量\"></a>2. 变量</h2><h3 id=\"普通变量\"><a href=\"#普通变量\" class=\"headerlink\" title=\"普通变量\"></a>普通变量</h3><ul>\n<li>占位符变量可以是python中的类型<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; mydict[<span class=\"string\">'key'</span>] &#125;&#125;</span><br><span class=\"line\">&#123;&#123; mylist[<span class=\"number\">3</span>] &#125;&#125;</span><br><span class=\"line\">&#123;&#123; mylist[value] &#125;&#125;</span><br><span class=\"line\">&#123;&#123; obje.func() &#125;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><ul>\n<li>hello   把name转成搜字符大写。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>过滤器名字</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>safe</td>\n<td>渲染时不转义</td>\n</tr>\n<tr>\n<td>capitalize</td>\n<td>首字母大写</td>\n</tr>\n<tr>\n<td>lower</td>\n<td>转成小写</td>\n</tr>\n<tr>\n<td>upper</td>\n<td>转成大写</td>\n</tr>\n<tr>\n<td>title</td>\n<td>每个单词首字母转大写</td>\n</tr>\n<tr>\n<td>trim</td>\n<td>去掉首尾空格</td>\n</tr>\n<tr>\n<td>striptags</td>\n<td>渲染前把其中的html标签都删除掉</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>safe 常用在现实html代码本身，不然标签会被引擎默认转义(这样也是为了安全考虑)。</li>\n<li>不要再不可信的值上使用safe过滤器，比如表单输入。</li>\n</ul>\n<h2 id=\"3-控制结构\"><a href=\"#3-控制结构\" class=\"headerlink\" title=\"3. 控制结构\"></a>3. 控制结构</h2><h3 id=\"if结构\"><a href=\"#if结构\" class=\"headerlink\" title=\"if结构\"></a>if结构</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; % <span class=\"keyword\">if</span> user %&#125;</span><br><span class=\"line\">  hello &#123;&#123;user&#125;&#125;</span><br><span class=\"line\">&#123;% <span class=\"keyword\">else</span> %&#125;</span><br><span class=\"line\">  hello stranger</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"for循环结构\"><a href=\"#for循环结构\" class=\"headerlink\" title=\"for循环结构\"></a>for循环结构</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">&#123; % <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> list %&#125;</span><br><span class=\"line\">  &lt;li&gt;&#123;&#123; x &#125;&#125;&lt;/li&gt;</span><br><span class=\"line\">&#123; %endfor% &#125;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"宏。-类似python的函数\"><a href=\"#宏。-类似python的函数\" class=\"headerlink\" title=\"宏。 类似python的函数\"></a>宏。 类似python的函数</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 定义宏</span><br><span class=\"line\"> &#123;% macro render_comment(x) %&#125;</span><br><span class=\"line\">  &lt;li&gt;&#123;&#123; x &#125;&#125;&lt;/li&gt;</span><br><span class=\"line\"> &#123;% endmacro%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">* 使用</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\"> &#123;% <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> list %&gt;</span><br><span class=\"line\">    &#123;&#123; render_comment(x) &#125;&#125;</span><br><span class=\"line\"> &#123; %endfor%&#125;</span><br><span class=\"line\"> &lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">* 可以将宏放入单独的文件，一边重复使用，使用时导入即可。</span><br><span class=\"line\">&#123; % <span class=\"keyword\">import</span> <span class=\"string\">'macros.html'</span> <span class=\"keyword\">as</span> macros % &#125;</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">   &#123;% <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> list %&gt;</span><br><span class=\"line\">      &#123;&#123; macros.render_comment(x) &#125;&#125;</span><br><span class=\"line\">   &#123; %endfor%&#125;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">* 需要重复使用的模板也可单独放一个文件中</span><br><span class=\"line\">用到的地方 &#123;% include <span class=\"string\">'common.html'</span>%&#125; 包含即可。</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"python 导入模块文件以及相对导入和__init__文件作用","date":"2019-02-14T06:00:00.000Z","_content":"\n## python 导入模块文件的2中方式\n\n```py\nimport lib or from lib import *\n\n\n\n# 导入子目录中模块\nimport tmp.lib3  or  from tmp.lib3 import *\n\n\n# 导入上级目录\n\nimport sys\nsys.path.append('home/app/')\nimport mod\nimport xxxx\n\n```\n\n- 与import类似, 被导入的module仍然会执行且仅执行一次\n\n- from *** import 的实质\n\n- 当以 \"from *** import \" 方式导入module时, python会在当前module 的命名空间中新建相应的命名. 即, \"from t2 import var1\" 相当于:\n```py\n\timport t2\n\tvar1= t2.var1\n```\n\n- from package import item  # 这种方式，item可以是包中的一个子模块或子包，也可以是包中定义的其他命名，像函数、类、变量。\n- import item.subitem.subsubitem # 这些子项必须是包，最后的子项是包或模块。但不能为函数、类或变量。否则出错：No module named ***\n\n##  \\_\\_init__.py 的作用\n\npython import package都是根据每个module的__name__来实现的。 \n比如说，有一个文件夹结构为：\n\n```py\npackage/\n    __init__.py\n    subpackage1/\n        __init__.py\n        moduleX.py\n    moduleA.py\n```\n\n- 那么，如果（在这个package文件夹之外，比如package的同级文件夹下建立运行一个run.py）运行一个script，来导入moduleX模块，那么这个moduleX的__name__就是.package.subpackage1.moduleX，由于moduleX获得了前述名称，那么在moduleX.py内部就可以有relative import的语句，比如说：from .. import moduleA\n\n- 而moduleX之所以能够获得的.package.subpackage1.moduleX的__name__ attribute属性，前提是package被python解释器识别成了一个package来处理（比如在package的同级文件夹下的运行的run.py有import package.subpackage1.moduleX之类的语句）。可是，如果每一个被我直接run的python script都会被视作是top-level script。top-level script的__name__被自动设置成__main__。因此，如果我从package文件夹内部直接运行moduleA.py这个脚本，那么它的__name__就被置成了__main__，python也不会把它当作一个package，其中的relative import的语句自然就无法起作用了。\n\n\n## 总之，运行脚本要在包目录的外层，包里面的模块之间才能用. 或则 ..等相对路径做导入操作。换句话，就是存在from .. import xxx 的文件不能直接python xxx.py操作，即使存在__init__.py, .也不会被认为是一个包。\n","source":"_posts/language/python/2__init__文件的作用.md","raw":"---\nlayout: post\ntitle: python 导入模块文件以及相对导入和__init__文件作用\ncategory: python\ndate: 2019-02-14 14:00:00\n\n---\n\n## python 导入模块文件的2中方式\n\n```py\nimport lib or from lib import *\n\n\n\n# 导入子目录中模块\nimport tmp.lib3  or  from tmp.lib3 import *\n\n\n# 导入上级目录\n\nimport sys\nsys.path.append('home/app/')\nimport mod\nimport xxxx\n\n```\n\n- 与import类似, 被导入的module仍然会执行且仅执行一次\n\n- from *** import 的实质\n\n- 当以 \"from *** import \" 方式导入module时, python会在当前module 的命名空间中新建相应的命名. 即, \"from t2 import var1\" 相当于:\n```py\n\timport t2\n\tvar1= t2.var1\n```\n\n- from package import item  # 这种方式，item可以是包中的一个子模块或子包，也可以是包中定义的其他命名，像函数、类、变量。\n- import item.subitem.subsubitem # 这些子项必须是包，最后的子项是包或模块。但不能为函数、类或变量。否则出错：No module named ***\n\n##  \\_\\_init__.py 的作用\n\npython import package都是根据每个module的__name__来实现的。 \n比如说，有一个文件夹结构为：\n\n```py\npackage/\n    __init__.py\n    subpackage1/\n        __init__.py\n        moduleX.py\n    moduleA.py\n```\n\n- 那么，如果（在这个package文件夹之外，比如package的同级文件夹下建立运行一个run.py）运行一个script，来导入moduleX模块，那么这个moduleX的__name__就是.package.subpackage1.moduleX，由于moduleX获得了前述名称，那么在moduleX.py内部就可以有relative import的语句，比如说：from .. import moduleA\n\n- 而moduleX之所以能够获得的.package.subpackage1.moduleX的__name__ attribute属性，前提是package被python解释器识别成了一个package来处理（比如在package的同级文件夹下的运行的run.py有import package.subpackage1.moduleX之类的语句）。可是，如果每一个被我直接run的python script都会被视作是top-level script。top-level script的__name__被自动设置成__main__。因此，如果我从package文件夹内部直接运行moduleA.py这个脚本，那么它的__name__就被置成了__main__，python也不会把它当作一个package，其中的relative import的语句自然就无法起作用了。\n\n\n## 总之，运行脚本要在包目录的外层，包里面的模块之间才能用. 或则 ..等相对路径做导入操作。换句话，就是存在from .. import xxx 的文件不能直接python xxx.py操作，即使存在__init__.py, .也不会被认为是一个包。\n","slug":"language/python/2__init__文件的作用","published":1,"updated":"2019-05-19T14:18:38.608Z","comments":1,"photos":[],"link":"","_id":"cjwxes5e90037hdlilvlh95b2","content":"<h2 id=\"python-导入模块文件的2中方式\"><a href=\"#python-导入模块文件的2中方式\" class=\"headerlink\" title=\"python 导入模块文件的2中方式\"></a>python 导入模块文件的2中方式</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lib <span class=\"keyword\">or</span> <span class=\"keyword\">from</span> lib <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入子目录中模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> tmp.lib3  <span class=\"keyword\">or</span>  <span class=\"keyword\">from</span> tmp.lib3 <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入上级目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">sys.path.append(<span class=\"string\">'home/app/'</span>)</span><br><span class=\"line\"><span class=\"keyword\">import</span> mod</span><br><span class=\"line\"><span class=\"keyword\">import</span> xxxx</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>与import类似, 被导入的module仍然会执行且仅执行一次</p>\n</li>\n<li><p>from *** import 的实质</p>\n</li>\n<li><p>当以 “from *** import “ 方式导入module时, python会在当前module 的命名空间中新建相应的命名. 即, “from t2 import var1” 相当于:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> t2</span><br><span class=\"line\">var1= t2.var1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>from package import item  # 这种方式，item可以是包中的一个子模块或子包，也可以是包中定义的其他命名，像函数、类、变量。</p>\n</li>\n<li>import item.subitem.subsubitem # 这些子项必须是包，最后的子项是包或模块。但不能为函数、类或变量。否则出错：No module named ***</li>\n</ul>\n<h2 id=\"init-py-的作用\"><a href=\"#init-py-的作用\" class=\"headerlink\" title=\"__init__.py 的作用\"></a>__init__.py 的作用</h2><p>python import package都是根据每个module的<strong>name</strong>来实现的。<br>比如说，有一个文件夹结构为：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package/</span><br><span class=\"line\">    __init__.py</span><br><span class=\"line\">    subpackage1/</span><br><span class=\"line\">        __init__.py</span><br><span class=\"line\">        moduleX.py</span><br><span class=\"line\">    moduleA.py</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>那么，如果（在这个package文件夹之外，比如package的同级文件夹下建立运行一个run.py）运行一个script，来导入moduleX模块，那么这个moduleX的<strong>name</strong>就是.package.subpackage1.moduleX，由于moduleX获得了前述名称，那么在moduleX.py内部就可以有relative import的语句，比如说：from .. import moduleA</p>\n</li>\n<li><p>而moduleX之所以能够获得的.package.subpackage1.moduleX的<strong>name</strong> attribute属性，前提是package被python解释器识别成了一个package来处理（比如在package的同级文件夹下的运行的run.py有import package.subpackage1.moduleX之类的语句）。可是，如果每一个被我直接run的python script都会被视作是top-level script。top-level script的<strong>name</strong>被自动设置成<strong>main</strong>。因此，如果我从package文件夹内部直接运行moduleA.py这个脚本，那么它的<strong>name</strong>就被置成了<strong>main</strong>，python也不会把它当作一个package，其中的relative import的语句自然就无法起作用了。</p>\n</li>\n</ul>\n<h2 id=\"总之，运行脚本要在包目录的外层，包里面的模块之间才能用-或则-等相对路径做导入操作。换句话，就是存在from-import-xxx-的文件不能直接python-xxx-py操作，即使存在init-py-也不会被认为是一个包。\"><a href=\"#总之，运行脚本要在包目录的外层，包里面的模块之间才能用-或则-等相对路径做导入操作。换句话，就是存在from-import-xxx-的文件不能直接python-xxx-py操作，即使存在init-py-也不会被认为是一个包。\" class=\"headerlink\" title=\"总之，运行脚本要在包目录的外层，包里面的模块之间才能用. 或则 ..等相对路径做导入操作。换句话，就是存在from .. import xxx 的文件不能直接python xxx.py操作，即使存在init.py, .也不会被认为是一个包。\"></a>总之，运行脚本要在包目录的外层，包里面的模块之间才能用. 或则 ..等相对路径做导入操作。换句话，就是存在from .. import xxx 的文件不能直接python xxx.py操作，即使存在<strong>init</strong>.py, .也不会被认为是一个包。</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"python-导入模块文件的2中方式\"><a href=\"#python-导入模块文件的2中方式\" class=\"headerlink\" title=\"python 导入模块文件的2中方式\"></a>python 导入模块文件的2中方式</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lib <span class=\"keyword\">or</span> <span class=\"keyword\">from</span> lib <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入子目录中模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> tmp.lib3  <span class=\"keyword\">or</span>  <span class=\"keyword\">from</span> tmp.lib3 <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入上级目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">sys.path.append(<span class=\"string\">'home/app/'</span>)</span><br><span class=\"line\"><span class=\"keyword\">import</span> mod</span><br><span class=\"line\"><span class=\"keyword\">import</span> xxxx</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>与import类似, 被导入的module仍然会执行且仅执行一次</p>\n</li>\n<li><p>from *** import 的实质</p>\n</li>\n<li><p>当以 “from *** import “ 方式导入module时, python会在当前module 的命名空间中新建相应的命名. 即, “from t2 import var1” 相当于:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> t2</span><br><span class=\"line\">var1= t2.var1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>from package import item  # 这种方式，item可以是包中的一个子模块或子包，也可以是包中定义的其他命名，像函数、类、变量。</p>\n</li>\n<li>import item.subitem.subsubitem # 这些子项必须是包，最后的子项是包或模块。但不能为函数、类或变量。否则出错：No module named ***</li>\n</ul>\n<h2 id=\"init-py-的作用\"><a href=\"#init-py-的作用\" class=\"headerlink\" title=\"__init__.py 的作用\"></a>__init__.py 的作用</h2><p>python import package都是根据每个module的<strong>name</strong>来实现的。<br>比如说，有一个文件夹结构为：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package/</span><br><span class=\"line\">    __init__.py</span><br><span class=\"line\">    subpackage1/</span><br><span class=\"line\">        __init__.py</span><br><span class=\"line\">        moduleX.py</span><br><span class=\"line\">    moduleA.py</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>那么，如果（在这个package文件夹之外，比如package的同级文件夹下建立运行一个run.py）运行一个script，来导入moduleX模块，那么这个moduleX的<strong>name</strong>就是.package.subpackage1.moduleX，由于moduleX获得了前述名称，那么在moduleX.py内部就可以有relative import的语句，比如说：from .. import moduleA</p>\n</li>\n<li><p>而moduleX之所以能够获得的.package.subpackage1.moduleX的<strong>name</strong> attribute属性，前提是package被python解释器识别成了一个package来处理（比如在package的同级文件夹下的运行的run.py有import package.subpackage1.moduleX之类的语句）。可是，如果每一个被我直接run的python script都会被视作是top-level script。top-level script的<strong>name</strong>被自动设置成<strong>main</strong>。因此，如果我从package文件夹内部直接运行moduleA.py这个脚本，那么它的<strong>name</strong>就被置成了<strong>main</strong>，python也不会把它当作一个package，其中的relative import的语句自然就无法起作用了。</p>\n</li>\n</ul>\n<h2 id=\"总之，运行脚本要在包目录的外层，包里面的模块之间才能用-或则-等相对路径做导入操作。换句话，就是存在from-import-xxx-的文件不能直接python-xxx-py操作，即使存在init-py-也不会被认为是一个包。\"><a href=\"#总之，运行脚本要在包目录的外层，包里面的模块之间才能用-或则-等相对路径做导入操作。换句话，就是存在from-import-xxx-的文件不能直接python-xxx-py操作，即使存在init-py-也不会被认为是一个包。\" class=\"headerlink\" title=\"总之，运行脚本要在包目录的外层，包里面的模块之间才能用. 或则 ..等相对路径做导入操作。换句话，就是存在from .. import xxx 的文件不能直接python xxx.py操作，即使存在init.py, .也不会被认为是一个包。\"></a>总之，运行脚本要在包目录的外层，包里面的模块之间才能用. 或则 ..等相对路径做导入操作。换句话，就是存在from .. import xxx 的文件不能直接python xxx.py操作，即使存在<strong>init</strong>.py, .也不会被认为是一个包。</h2>"},{"layout":"post","title":"python 编码reload(sys)的作用","date":"2019-05-02T06:00:00.000Z","_content":"\n## 为什么需要sys.setdefaultencoding(\"utf-8\")\n* 因为python转码是通过unicode作为中间码的。\n* 比如字符串 x = \"你们\"，本身是str，\n首先我们指定了文件编码uft8，所以x是utf8编码的。\n* 如果要转化gb18030， 默认是x用默认解码方式（ASCII）decode成中间码 unicode ->   encode成gb18030\n* 如果x是abc这些ascii字符本身ascii和utf8方式是一样的,不会报错;\n* 但是x是中文，就不能按ascii方式解码了。。怎么办呢？\n* 1 . 自己指定解码方式，在编码\n```py\n\ty = x.decode(\"utf-8\").encode(\"gb18030\")\n```\n\n* 2.开头设置默认编解码方式\n```py\n\timport sys\n\treload(sys)\n\tsys.setdefaultencoding(\"utf-8\")\n```\n\n## 为什么reload(sys)呢\n* 因为模块/lib/site.py删除了sys.setdefaultencoding这个函数。\n\n## site.py 有什么作用\n* 是解释器初始化时自动导入的，这个模块的作用是：自动将第三方模块路径加入到sys.path中。\n\n## import的实质\n* import sys导入语句，只是导入了一个对sys的引用，因为别人已经提前导入了sys，后面的模块使用sys都是引用这个对象。\n* 而作为初始化模块site.py,导入了许多内建模块包括sys，而且删除了sys.setdefaultencoding这个方法，后面你写的模块，只要导入sys,都是没有这个方法的。\n* 所以需要reload一把，reload也是有前提的，就是之前已经加载过的模块，如果没有加载过的，就无重谈起重新加载了。\n\n","source":"_posts/language/python/3_reload_sys.md","raw":"---\nlayout: post\ntitle: python 编码reload(sys)的作用\ncategory: python\ndate: 2019-05-02 14:00:00\n\n---\n\n## 为什么需要sys.setdefaultencoding(\"utf-8\")\n* 因为python转码是通过unicode作为中间码的。\n* 比如字符串 x = \"你们\"，本身是str，\n首先我们指定了文件编码uft8，所以x是utf8编码的。\n* 如果要转化gb18030， 默认是x用默认解码方式（ASCII）decode成中间码 unicode ->   encode成gb18030\n* 如果x是abc这些ascii字符本身ascii和utf8方式是一样的,不会报错;\n* 但是x是中文，就不能按ascii方式解码了。。怎么办呢？\n* 1 . 自己指定解码方式，在编码\n```py\n\ty = x.decode(\"utf-8\").encode(\"gb18030\")\n```\n\n* 2.开头设置默认编解码方式\n```py\n\timport sys\n\treload(sys)\n\tsys.setdefaultencoding(\"utf-8\")\n```\n\n## 为什么reload(sys)呢\n* 因为模块/lib/site.py删除了sys.setdefaultencoding这个函数。\n\n## site.py 有什么作用\n* 是解释器初始化时自动导入的，这个模块的作用是：自动将第三方模块路径加入到sys.path中。\n\n## import的实质\n* import sys导入语句，只是导入了一个对sys的引用，因为别人已经提前导入了sys，后面的模块使用sys都是引用这个对象。\n* 而作为初始化模块site.py,导入了许多内建模块包括sys，而且删除了sys.setdefaultencoding这个方法，后面你写的模块，只要导入sys,都是没有这个方法的。\n* 所以需要reload一把，reload也是有前提的，就是之前已经加载过的模块，如果没有加载过的，就无重谈起重新加载了。\n\n","slug":"language/python/3_reload_sys","published":1,"updated":"2019-05-19T14:18:38.609Z","comments":1,"photos":[],"link":"","_id":"cjwxes5ea003ahdlicyk42hbg","content":"<h2 id=\"为什么需要sys-setdefaultencoding-“utf-8”\"><a href=\"#为什么需要sys-setdefaultencoding-“utf-8”\" class=\"headerlink\" title=\"为什么需要sys.setdefaultencoding(“utf-8”)\"></a>为什么需要sys.setdefaultencoding(“utf-8”)</h2><ul>\n<li>因为python转码是通过unicode作为中间码的。</li>\n<li>比如字符串 x = “你们”，本身是str，<br>首先我们指定了文件编码uft8，所以x是utf8编码的。</li>\n<li>如果要转化gb18030， 默认是x用默认解码方式（ASCII）decode成中间码 unicode -&gt;   encode成gb18030</li>\n<li>如果x是abc这些ascii字符本身ascii和utf8方式是一样的,不会报错;</li>\n<li>但是x是中文，就不能按ascii方式解码了。。怎么办呢？</li>\n<li><p>1 . 自己指定解码方式，在编码</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y = x.decode(<span class=\"string\">\"utf-8\"</span>).encode(<span class=\"string\">\"gb18030\"</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.开头设置默认编解码方式</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\">sys.setdefaultencoding(<span class=\"string\">\"utf-8\"</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"为什么reload-sys-呢\"><a href=\"#为什么reload-sys-呢\" class=\"headerlink\" title=\"为什么reload(sys)呢\"></a>为什么reload(sys)呢</h2><ul>\n<li>因为模块/lib/site.py删除了sys.setdefaultencoding这个函数。</li>\n</ul>\n<h2 id=\"site-py-有什么作用\"><a href=\"#site-py-有什么作用\" class=\"headerlink\" title=\"site.py 有什么作用\"></a>site.py 有什么作用</h2><ul>\n<li>是解释器初始化时自动导入的，这个模块的作用是：自动将第三方模块路径加入到sys.path中。</li>\n</ul>\n<h2 id=\"import的实质\"><a href=\"#import的实质\" class=\"headerlink\" title=\"import的实质\"></a>import的实质</h2><ul>\n<li>import sys导入语句，只是导入了一个对sys的引用，因为别人已经提前导入了sys，后面的模块使用sys都是引用这个对象。</li>\n<li>而作为初始化模块site.py,导入了许多内建模块包括sys，而且删除了sys.setdefaultencoding这个方法，后面你写的模块，只要导入sys,都是没有这个方法的。</li>\n<li>所以需要reload一把，reload也是有前提的，就是之前已经加载过的模块，如果没有加载过的，就无重谈起重新加载了。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"为什么需要sys-setdefaultencoding-“utf-8”\"><a href=\"#为什么需要sys-setdefaultencoding-“utf-8”\" class=\"headerlink\" title=\"为什么需要sys.setdefaultencoding(“utf-8”)\"></a>为什么需要sys.setdefaultencoding(“utf-8”)</h2><ul>\n<li>因为python转码是通过unicode作为中间码的。</li>\n<li>比如字符串 x = “你们”，本身是str，<br>首先我们指定了文件编码uft8，所以x是utf8编码的。</li>\n<li>如果要转化gb18030， 默认是x用默认解码方式（ASCII）decode成中间码 unicode -&gt;   encode成gb18030</li>\n<li>如果x是abc这些ascii字符本身ascii和utf8方式是一样的,不会报错;</li>\n<li>但是x是中文，就不能按ascii方式解码了。。怎么办呢？</li>\n<li><p>1 . 自己指定解码方式，在编码</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y = x.decode(<span class=\"string\">\"utf-8\"</span>).encode(<span class=\"string\">\"gb18030\"</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.开头设置默认编解码方式</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\">sys.setdefaultencoding(<span class=\"string\">\"utf-8\"</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"为什么reload-sys-呢\"><a href=\"#为什么reload-sys-呢\" class=\"headerlink\" title=\"为什么reload(sys)呢\"></a>为什么reload(sys)呢</h2><ul>\n<li>因为模块/lib/site.py删除了sys.setdefaultencoding这个函数。</li>\n</ul>\n<h2 id=\"site-py-有什么作用\"><a href=\"#site-py-有什么作用\" class=\"headerlink\" title=\"site.py 有什么作用\"></a>site.py 有什么作用</h2><ul>\n<li>是解释器初始化时自动导入的，这个模块的作用是：自动将第三方模块路径加入到sys.path中。</li>\n</ul>\n<h2 id=\"import的实质\"><a href=\"#import的实质\" class=\"headerlink\" title=\"import的实质\"></a>import的实质</h2><ul>\n<li>import sys导入语句，只是导入了一个对sys的引用，因为别人已经提前导入了sys，后面的模块使用sys都是引用这个对象。</li>\n<li>而作为初始化模块site.py,导入了许多内建模块包括sys，而且删除了sys.setdefaultencoding这个方法，后面你写的模块，只要导入sys,都是没有这个方法的。</li>\n<li>所以需要reload一把，reload也是有前提的，就是之前已经加载过的模块，如果没有加载过的，就无重谈起重新加载了。</li>\n</ul>\n"},{"layout":"post","title":"flask 第3章(bootstrap扩展模板)","date":"2019-01-28T14:22:00.000Z","_content":"\n# 模板的bootstrap扩展\n\n* 安装扩展包\n* pip install flask-bootstrap\n\n* 如法炮制，从flask.ext中导入Bootstrap 包含app对象生成新的对象实例，即可使用bootstrap的特性。\n\n如果使用bootstrap那么需要先用bootstrap包含app，在用manager包含app。\n\n\n* 自定一个base.html(继承自bootstrap的base.html)\n\n```py\n\n{% extends \"bootstrap/base.html\" %}\n\n{% block title %}  {% endblock %}\n\n\n{% block navbar %}\n    <div class=\"navbar navbar-inverse\" role=\"navigation\">\n        <div class=\"container\">\n            <div class=\"navbar-header\">\n                <button type=\"button\" class=\"navbar-toggle\"\n                    data-toogle=\"collapse\" data-target=\".narvar-collapse\">\n                    <span class=\"sr-only\"> Toggle navigation    </span>\n                    <span class=\"icon-bar\"> </span>\n                    <span class=\"icon-bar\"> </span>\n                    <span class=\"icon-bar\"> </span>\n                    <span class=\"icon-bar\"> </span>\n                </button>\n                <a class=\"navbar-brand\" href=\"/\">Home/a>\n            </div>\n\n            <div class=\"navbar-collapse collapse\">\n                <ul class=\"nav navbar-nav\">\n                    <li> <a hre=\"/\"> Home </a></li>\n                </ul>\n            </div>\n        </div>\n\n    </div>\n{% endblock %}\n\n\n\n<% block comment %>\n    <div class=\"container\">\n        {% block page_comment %}     {% endblock %}\n    </div>\n<% endblock %>\n\n```\n## 自定义基类模板\n\n```py\n# 404.html\n\n{% extends \"base.html\" %}\n{% block title %} flask-pagenot found   {% endblock %}\n\n{% block page_comment %}\n<div class=\"page-header\">\n    <h1> Not Found. </h1>\n</div>\n\n{%endblock%}\n               \n\n```\n## 整个代码文件\n\n```py\nfrom flask import Flask, render_template\nfrom flask_script import Manager\nfrom flask_bootstrap import Bootstrap\n\napp = Flask(__name__)\n\nbootstrap = Bootstrap(app)\nmanager = Manager(app)\n\n\n@app.route('/')\ndef index():\n    return render_template(\"index.html\")\n\n\n@app.route('/user/<name>')\ndef user(name):\n    return render_template(\"user.html\",name=name)\n\n@app.errorhandler(404)\ndef page_not_found(e):\n    return  render_template(\"404.html\"), 404 \n\nif __name__ == '__main__':\n    manager.run()\n\n```\n\n* 运行命令 ： python hello.py  runserver --host 0.0.0.0 --d\n\n\n## 链接\na标签常用的href 可以使用url_for 函数生成\nurl_for(\"index\") --> /\n\nurl_for(\"index\",_external=True) --> 绝对路径\n\n\nurl_for(\"index\", page=2 ) 返回？/page=2\n\n静态文件生成链接\nurl_for('static', filename='css/styles.css', _external=True)\n返回 http://localhost:5000/statics/css/style.css\n\n\n## flask-moment组件本地化时间和日期\n\n* pip install flask-moment\n\n```py\n\n{% extends \"base.html\" %}\n\n{% block page_content %}\n<h1> hello world!</h1>\n<p> local date and time is {{ moment(current_time).format('LLL')}}. </p>\n<p> that was {{ moment(current_time).fromNow(refresh=True) }}. </p>\n\n{% endblock %}\n\n```\n\n\n\n\n\n\n","source":"_posts/language/python/3_模板的bootstrap扩展.md","raw":"---\nlayout: post\ntitle: flask 第3章(bootstrap扩展模板)\ncategory: flask\ndate: 2019-01-28 22:22:00\n\n---\n\n# 模板的bootstrap扩展\n\n* 安装扩展包\n* pip install flask-bootstrap\n\n* 如法炮制，从flask.ext中导入Bootstrap 包含app对象生成新的对象实例，即可使用bootstrap的特性。\n\n如果使用bootstrap那么需要先用bootstrap包含app，在用manager包含app。\n\n\n* 自定一个base.html(继承自bootstrap的base.html)\n\n```py\n\n{% extends \"bootstrap/base.html\" %}\n\n{% block title %}  {% endblock %}\n\n\n{% block navbar %}\n    <div class=\"navbar navbar-inverse\" role=\"navigation\">\n        <div class=\"container\">\n            <div class=\"navbar-header\">\n                <button type=\"button\" class=\"navbar-toggle\"\n                    data-toogle=\"collapse\" data-target=\".narvar-collapse\">\n                    <span class=\"sr-only\"> Toggle navigation    </span>\n                    <span class=\"icon-bar\"> </span>\n                    <span class=\"icon-bar\"> </span>\n                    <span class=\"icon-bar\"> </span>\n                    <span class=\"icon-bar\"> </span>\n                </button>\n                <a class=\"navbar-brand\" href=\"/\">Home/a>\n            </div>\n\n            <div class=\"navbar-collapse collapse\">\n                <ul class=\"nav navbar-nav\">\n                    <li> <a hre=\"/\"> Home </a></li>\n                </ul>\n            </div>\n        </div>\n\n    </div>\n{% endblock %}\n\n\n\n<% block comment %>\n    <div class=\"container\">\n        {% block page_comment %}     {% endblock %}\n    </div>\n<% endblock %>\n\n```\n## 自定义基类模板\n\n```py\n# 404.html\n\n{% extends \"base.html\" %}\n{% block title %} flask-pagenot found   {% endblock %}\n\n{% block page_comment %}\n<div class=\"page-header\">\n    <h1> Not Found. </h1>\n</div>\n\n{%endblock%}\n               \n\n```\n## 整个代码文件\n\n```py\nfrom flask import Flask, render_template\nfrom flask_script import Manager\nfrom flask_bootstrap import Bootstrap\n\napp = Flask(__name__)\n\nbootstrap = Bootstrap(app)\nmanager = Manager(app)\n\n\n@app.route('/')\ndef index():\n    return render_template(\"index.html\")\n\n\n@app.route('/user/<name>')\ndef user(name):\n    return render_template(\"user.html\",name=name)\n\n@app.errorhandler(404)\ndef page_not_found(e):\n    return  render_template(\"404.html\"), 404 \n\nif __name__ == '__main__':\n    manager.run()\n\n```\n\n* 运行命令 ： python hello.py  runserver --host 0.0.0.0 --d\n\n\n## 链接\na标签常用的href 可以使用url_for 函数生成\nurl_for(\"index\") --> /\n\nurl_for(\"index\",_external=True) --> 绝对路径\n\n\nurl_for(\"index\", page=2 ) 返回？/page=2\n\n静态文件生成链接\nurl_for('static', filename='css/styles.css', _external=True)\n返回 http://localhost:5000/statics/css/style.css\n\n\n## flask-moment组件本地化时间和日期\n\n* pip install flask-moment\n\n```py\n\n{% extends \"base.html\" %}\n\n{% block page_content %}\n<h1> hello world!</h1>\n<p> local date and time is {{ moment(current_time).format('LLL')}}. </p>\n<p> that was {{ moment(current_time).fromNow(refresh=True) }}. </p>\n\n{% endblock %}\n\n```\n\n\n\n\n\n\n","slug":"language/python/3_模板的bootstrap扩展","published":1,"updated":"2019-05-19T14:30:17.031Z","comments":1,"photos":[],"link":"","_id":"cjwxes5eb003bhdlipmgw1ixf","content":"<h1 id=\"模板的bootstrap扩展\"><a href=\"#模板的bootstrap扩展\" class=\"headerlink\" title=\"模板的bootstrap扩展\"></a>模板的bootstrap扩展</h1><ul>\n<li>安装扩展包</li>\n<li><p>pip install flask-bootstrap</p>\n</li>\n<li><p>如法炮制，从flask.ext中导入Bootstrap 包含app对象生成新的对象实例，即可使用bootstrap的特性。</p>\n</li>\n</ul>\n<p>如果使用bootstrap那么需要先用bootstrap包含app，在用manager包含app。</p>\n<ul>\n<li>自定一个base.html(继承自bootstrap的base.html)</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;% extends <span class=\"string\">\"bootstrap/base.html\"</span> %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block title %&#125;  &#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block navbar %&#125;</span><br><span class=\"line\">    &lt;div class=\"navbar navbar-inverse\" role=\"navigation\"&gt;</span><br><span class=\"line\">        &lt;div class=\"container\"&gt;</span><br><span class=\"line\">            &lt;div class=\"navbar-header\"&gt;</span><br><span class=\"line\">                &lt;button type=\"button\" class=\"navbar-toggle\"</span><br><span class=\"line\">                    data-toogle=<span class=\"string\">\"collapse\"</span> data-target=<span class=\"string\">\".narvar-collapse\"</span>&gt;</span><br><span class=\"line\">                    &lt;span class=\"sr-only\"&gt; Toggle navigation    &lt;/span&gt;</span><br><span class=\"line\">                    &lt;span class=\"icon-bar\"&gt; &lt;/span&gt;</span><br><span class=\"line\">                    &lt;span class=\"icon-bar\"&gt; &lt;/span&gt;</span><br><span class=\"line\">                    &lt;span class=\"icon-bar\"&gt; &lt;/span&gt;</span><br><span class=\"line\">                    &lt;span class=\"icon-bar\"&gt; &lt;/span&gt;</span><br><span class=\"line\">                &lt;/button&gt;</span><br><span class=\"line\">                &lt;a class=\"navbar-brand\" href=\"/\"&gt;Home/a&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;div class=\"navbar-collapse collapse\"&gt;</span><br><span class=\"line\">                &lt;ul class=\"nav navbar-nav\"&gt;</span><br><span class=\"line\">                    &lt;li&gt; &lt;a hre=\"/\"&gt; Home &lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">                &lt;/ul&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% block comment %&gt;</span><br><span class=\"line\">    &lt;div class=\"container\"&gt;</span><br><span class=\"line\">        &#123;% block page_comment %&#125;     &#123;% endblock %&#125;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;% endblock %&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义基类模板\"><a href=\"#自定义基类模板\" class=\"headerlink\" title=\"自定义基类模板\"></a>自定义基类模板</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 404.html</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% extends <span class=\"string\">\"base.html\"</span> %&#125;</span><br><span class=\"line\">&#123;% block title %&#125; flask-pagenot found   &#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block page_comment %&#125;</span><br><span class=\"line\">&lt;div class=\"page-header\"&gt;</span><br><span class=\"line\">    &lt;h1&gt; Not Found. &lt;/h1&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;%endblock%&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"整个代码文件\"><a href=\"#整个代码文件\" class=\"headerlink\" title=\"整个代码文件\"></a>整个代码文件</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_script <span class=\"keyword\">import</span> Manager</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_bootstrap <span class=\"keyword\">import</span> Bootstrap</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">bootstrap = Bootstrap(app)</span><br><span class=\"line\">manager = Manager(app)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">\"index.html\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/user/&lt;name&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">user</span><span class=\"params\">(name)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">\"user.html\"</span>,name=name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.errorhandler(404)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">page_not_found</span><span class=\"params\">(e)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>  render_template(<span class=\"string\">\"404.html\"</span>), <span class=\"number\">404</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    manager.run()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行命令 ： python hello.py  runserver –host 0.0.0.0 –d</li>\n</ul>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p>a标签常用的href 可以使用url_for 函数生成<br>url_for(“index”) –&gt; /</p>\n<p>url_for(“index”,_external=True) –&gt; 绝对路径</p>\n<p>url_for(“index”, page=2 ) 返回？/page=2</p>\n<p>静态文件生成链接<br>url_for(‘static’, filename=’css/styles.css’, _external=True)<br>返回 <a href=\"http://localhost:5000/statics/css/style.css\" target=\"_blank\" rel=\"noopener\">http://localhost:5000/statics/css/style.css</a></p>\n<h2 id=\"flask-moment组件本地化时间和日期\"><a href=\"#flask-moment组件本地化时间和日期\" class=\"headerlink\" title=\"flask-moment组件本地化时间和日期\"></a>flask-moment组件本地化时间和日期</h2><ul>\n<li>pip install flask-moment</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;% extends <span class=\"string\">\"base.html\"</span> %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block page_content %&#125;</span><br><span class=\"line\">&lt;h1&gt; hello world!&lt;/h1&gt;</span><br><span class=\"line\">&lt;p&gt; local date and time is &#123;&#123; moment(current_time).format('LLL')&#125;&#125;. &lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt; that was &#123;&#123; moment(current_time).fromNow(refresh=True) &#125;&#125;. &lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"模板的bootstrap扩展\"><a href=\"#模板的bootstrap扩展\" class=\"headerlink\" title=\"模板的bootstrap扩展\"></a>模板的bootstrap扩展</h1><ul>\n<li>安装扩展包</li>\n<li><p>pip install flask-bootstrap</p>\n</li>\n<li><p>如法炮制，从flask.ext中导入Bootstrap 包含app对象生成新的对象实例，即可使用bootstrap的特性。</p>\n</li>\n</ul>\n<p>如果使用bootstrap那么需要先用bootstrap包含app，在用manager包含app。</p>\n<ul>\n<li>自定一个base.html(继承自bootstrap的base.html)</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;% extends <span class=\"string\">\"bootstrap/base.html\"</span> %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block title %&#125;  &#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block navbar %&#125;</span><br><span class=\"line\">    &lt;div class=\"navbar navbar-inverse\" role=\"navigation\"&gt;</span><br><span class=\"line\">        &lt;div class=\"container\"&gt;</span><br><span class=\"line\">            &lt;div class=\"navbar-header\"&gt;</span><br><span class=\"line\">                &lt;button type=\"button\" class=\"navbar-toggle\"</span><br><span class=\"line\">                    data-toogle=<span class=\"string\">\"collapse\"</span> data-target=<span class=\"string\">\".narvar-collapse\"</span>&gt;</span><br><span class=\"line\">                    &lt;span class=\"sr-only\"&gt; Toggle navigation    &lt;/span&gt;</span><br><span class=\"line\">                    &lt;span class=\"icon-bar\"&gt; &lt;/span&gt;</span><br><span class=\"line\">                    &lt;span class=\"icon-bar\"&gt; &lt;/span&gt;</span><br><span class=\"line\">                    &lt;span class=\"icon-bar\"&gt; &lt;/span&gt;</span><br><span class=\"line\">                    &lt;span class=\"icon-bar\"&gt; &lt;/span&gt;</span><br><span class=\"line\">                &lt;/button&gt;</span><br><span class=\"line\">                &lt;a class=\"navbar-brand\" href=\"/\"&gt;Home/a&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;div class=\"navbar-collapse collapse\"&gt;</span><br><span class=\"line\">                &lt;ul class=\"nav navbar-nav\"&gt;</span><br><span class=\"line\">                    &lt;li&gt; &lt;a hre=\"/\"&gt; Home &lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">                &lt;/ul&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% block comment %&gt;</span><br><span class=\"line\">    &lt;div class=\"container\"&gt;</span><br><span class=\"line\">        &#123;% block page_comment %&#125;     &#123;% endblock %&#125;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;% endblock %&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义基类模板\"><a href=\"#自定义基类模板\" class=\"headerlink\" title=\"自定义基类模板\"></a>自定义基类模板</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 404.html</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% extends <span class=\"string\">\"base.html\"</span> %&#125;</span><br><span class=\"line\">&#123;% block title %&#125; flask-pagenot found   &#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block page_comment %&#125;</span><br><span class=\"line\">&lt;div class=\"page-header\"&gt;</span><br><span class=\"line\">    &lt;h1&gt; Not Found. &lt;/h1&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;%endblock%&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"整个代码文件\"><a href=\"#整个代码文件\" class=\"headerlink\" title=\"整个代码文件\"></a>整个代码文件</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_script <span class=\"keyword\">import</span> Manager</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_bootstrap <span class=\"keyword\">import</span> Bootstrap</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">bootstrap = Bootstrap(app)</span><br><span class=\"line\">manager = Manager(app)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">\"index.html\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/user/&lt;name&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">user</span><span class=\"params\">(name)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">\"user.html\"</span>,name=name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.errorhandler(404)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">page_not_found</span><span class=\"params\">(e)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>  render_template(<span class=\"string\">\"404.html\"</span>), <span class=\"number\">404</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    manager.run()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行命令 ： python hello.py  runserver –host 0.0.0.0 –d</li>\n</ul>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p>a标签常用的href 可以使用url_for 函数生成<br>url_for(“index”) –&gt; /</p>\n<p>url_for(“index”,_external=True) –&gt; 绝对路径</p>\n<p>url_for(“index”, page=2 ) 返回？/page=2</p>\n<p>静态文件生成链接<br>url_for(‘static’, filename=’css/styles.css’, _external=True)<br>返回 <a href=\"http://localhost:5000/statics/css/style.css\" target=\"_blank\" rel=\"noopener\">http://localhost:5000/statics/css/style.css</a></p>\n<h2 id=\"flask-moment组件本地化时间和日期\"><a href=\"#flask-moment组件本地化时间和日期\" class=\"headerlink\" title=\"flask-moment组件本地化时间和日期\"></a>flask-moment组件本地化时间和日期</h2><ul>\n<li>pip install flask-moment</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;% extends <span class=\"string\">\"base.html\"</span> %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block page_content %&#125;</span><br><span class=\"line\">&lt;h1&gt; hello world!&lt;/h1&gt;</span><br><span class=\"line\">&lt;p&gt; local date and time is &#123;&#123; moment(current_time).format('LLL')&#125;&#125;. &lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt; that was &#123;&#123; moment(current_time).fromNow(refresh=True) &#125;&#125;. &lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"flask 第4章(表单)","date":"2019-01-28T14:22:00.000Z","_content":"\n# 表单的处理\n\n```shell\npip install flask-wtf\n```\n# 1. 跨站请求伪造保护XSRF和XSS\n\n* XSRF 跨站请求伪造 \n** 利用用户已经登陆了的网站上执行非法操作，利用了网站对已登录用户的信任。\n\n* XSS 跨站脚本攻击\n** 利用用户对制定网站的信任，执行一些非法操作。\n\n* 为了防止XSRF攻击，所以有了 SECRET_KEY配置项。\n\n# 2. 主文件hello.py 代码\n\n```py\n#coding=utf=8\n\n# 引入核心模块和模板加载模块\nfrom flask import Flask, render_template\n# 引入bootstrap前端框架\nfrom flask_bootstrap import Bootstrap\n# 引入时间模块,实现了momment.js\nfrom flask_moment import Moment\n# 引入manage模块，服务器启动参数控制\nfrom flask_script import Manager\n# 引入表单模块\nfrom flask_wtf import FlaskForm\n# 引入表单字段类\nfrom wtforms import StringField,SubmitField\n# 引入表单验证函数\nfrom wtforms.validators import Required\n\n# 每个web表单都有一个继承自FlaskForm的类表示,所以先定义一个类\nclass NameForm(FlaskForm):\n    name = StringField(\"what is your name ?\",validators=[Required()]) # 字段对象可附加多个验证函数，所以是列表, Required确保非空\n    submit = SubmitField(\"Submit1\")\n\n\napp = Flask(__name__)\n# 生成加密令牌的密钥,再用令牌验证请求的表单数据真伪,\napp.config['SECRET_KEY'] = 'this random string！'\n\nbootstrap = Bootstrap(app)\nmoment = Moment(app)\nmanager = Manager(app)\n\n\n@app.errorhandler(404)\ndef page_not_found(e):\n    return render_template('404.html'), 404\n\n\n@app.errorhandler(500)\ndef internal_server_error(e):\n    return render_template('500.html'), 500\n\n\n@app.route('/', methods=['GET', 'POST']) #如果不附加post方法，会get提交表单，信息就暴漏在浏览器地址栏中了。\ndef index():\n    name = None\n    form = NameForm()\n    if form.validate_on_submit():\n        name = form.name.data\n        form.name.data = ''\n    return render_template(\"index.html\",form = form, name = name)\n\nif __name__ == \"__main__\":\n    manager.run()\n\n```\n\n* 第一次请求页面是get方式，validate_on_submit()函数返回false , 表单对象和name=None传入模板，用户看到就是表单的样子\n* 用户输入name提交时，是post请求，validate_on_submit()返回true，表单对象传入name会被清空，name参数也传入，显示在页面。hello， nama！\n\n# 3.模板文件index.html\n\n```html\n{% extends \"base.html\" %}\n\n{% import \"bootstrap/wtf.html\" as wtf %}\n\n{% block title %}Flasky{% endblock %}\n\n{% block page_content %}\n<div class=\"page-header\">\n    <h1>Hello, {% if name %}{{ name }}{% else %}Stranger{% endif %}!</h1>\n</div>\n{{ wtf.quick_form(form) }}\n{% endblock %}\n\n```\n\n```py\n{% import \"bootstrap\\/wtf.html\" as wtf %} 引入wtf模板，\n{{ wtf.quick_form(form) }}填充表单数据\n```\n\n\n# 4. wtdforms 支持的表单字段类型\n\n|字段类型|说明|\n|-|-|\n|StringField|文本字段|\n|TextAreaField|多行文本|\n|PasswordField|密码文本字段|\n|HiddenField|隐藏文本字段|\n|DateField|文本字段，值为datetime.date格式|\n|IntrgerField|文本字段，为整数|\n|DecimalField|文本字段，值为小数|\n|FloatField|文本字段，值为浮点数|\n|BooleanField|复选框，值为flase和true|\n|RadioField|一组单选框|\n|SelectField|下拉列表|\n|SelectMultipleField|下拉列表可选多个值|\n|FileField|文件上传字段|\n|SubmitField|表单提交按钮|\n|FormField|把表单作为一个字段嵌入另一个表单|\n|FieldList|一组指定类型的字段|\n\n\n# 5. wtfforms验证函数\n\n|验证函数|说明|\n|-|-|\n|Email|验证mail地址|\n|EqualTo|比较2个字段的值，常用语密码输入两次对比|\n|IPAddress|验证ipv4网络地址|\n|Length|验证输入字符串的长度|\n|NumberRange|验证输入的值在数字范围内|\n|Optional|无输入值时跳过其他验证函数|\n|Required|确保字段有值|\n|Regexp|使用正则表达式验证输入值|\n|URL|验证url|\n|AnyOf|确保输入值在可选列表|\n|NoneOf|确保输入值不在可选列表|\n\n\n# 6. 重定向和用户会话\n\n* 目前hello.py 刷新会出现一警告，这个警告是因为最后一次提交是post请求导致的，所以使用url重定向让最后一次请求变为get请求,那么问题是之前的post参数怎么获取呢，不然网页无法渲染，这就需要session字典形式存储，get请求时从session中获取所需字段。\n\n\n```py\nfrom flask import session,url_for\n\n@app.route(\"/\")\ndef index():\n    form = NameForm()\n    if form.validate_on_submit():\n        session[\"name\"] = form.name.data\n        return redirect(url_for(\"index\")) # 一般endpoint就是视图函数名\n    return render_template(\"index.html\", form=form, name = session.get('name'))\n    #session.get 函数找不到name字段，返回None，网页有默认提示。\n\n\n```\n\n\n# 7. flash消息(闪现,闪烁)\n\n* 主要用于警告，消息提醒，比如用户输入了错误的用户名和密码，需要一个提醒，就可以使用flash功能。\n\n* 只调用flash函数是显示不出消息的，它主要是把消息push方式存入一个地方，然后程序使用模板渲染时可以pop方式获取到，所以flash消息就像队列，先进先出，只会显示一次。\n\n```py\nform flask import flash\n\n@app route(\"/\", methods=['GET','POST'])\ndef index():\n    form = NameForm()\n    if form.validate_on_submit():\n        old_name = session.get(\"name\")\n        if old_name  is not None and old_name != form.name.data:\n            flash(\"looks like you have change your name.\")\n        session['name'] = form.name.data\n        return redirect(url_for(\"index\"))\n    return render_template(\"index.html\", form = form, name = sesson.get(\"name\"))\n\n```\n\n* 在base.html 模板中渲染循环取出消息\n\n```html\n{# content 部分添加for循环#}\n{% block content %}\n    <div class=\"container\">\n    {# 增加一个 for循环#}\n    {% for message in get_flashed_messages() %} \n        <div class=\"alert alert-warning\">\n            <button type=\"button\" class=\"close\" data-dismiss=\"alert\"> $times;  </button>\n            {{ message }}\n        </div>\n    {% endfor %}\n\n\n    {% block page_content %}  {% endblock %}\n\n    </div>\n{% endblock %}\n\n```\n\n\n\n\n\n\n\n","source":"_posts/language/python/4_web表单.md","raw":"---\nlayout: post\ntitle: flask 第4章(表单)\ncategory: flask\ndate: 2019-01-28 22:22:00\n\n---\n\n# 表单的处理\n\n```shell\npip install flask-wtf\n```\n# 1. 跨站请求伪造保护XSRF和XSS\n\n* XSRF 跨站请求伪造 \n** 利用用户已经登陆了的网站上执行非法操作，利用了网站对已登录用户的信任。\n\n* XSS 跨站脚本攻击\n** 利用用户对制定网站的信任，执行一些非法操作。\n\n* 为了防止XSRF攻击，所以有了 SECRET_KEY配置项。\n\n# 2. 主文件hello.py 代码\n\n```py\n#coding=utf=8\n\n# 引入核心模块和模板加载模块\nfrom flask import Flask, render_template\n# 引入bootstrap前端框架\nfrom flask_bootstrap import Bootstrap\n# 引入时间模块,实现了momment.js\nfrom flask_moment import Moment\n# 引入manage模块，服务器启动参数控制\nfrom flask_script import Manager\n# 引入表单模块\nfrom flask_wtf import FlaskForm\n# 引入表单字段类\nfrom wtforms import StringField,SubmitField\n# 引入表单验证函数\nfrom wtforms.validators import Required\n\n# 每个web表单都有一个继承自FlaskForm的类表示,所以先定义一个类\nclass NameForm(FlaskForm):\n    name = StringField(\"what is your name ?\",validators=[Required()]) # 字段对象可附加多个验证函数，所以是列表, Required确保非空\n    submit = SubmitField(\"Submit1\")\n\n\napp = Flask(__name__)\n# 生成加密令牌的密钥,再用令牌验证请求的表单数据真伪,\napp.config['SECRET_KEY'] = 'this random string！'\n\nbootstrap = Bootstrap(app)\nmoment = Moment(app)\nmanager = Manager(app)\n\n\n@app.errorhandler(404)\ndef page_not_found(e):\n    return render_template('404.html'), 404\n\n\n@app.errorhandler(500)\ndef internal_server_error(e):\n    return render_template('500.html'), 500\n\n\n@app.route('/', methods=['GET', 'POST']) #如果不附加post方法，会get提交表单，信息就暴漏在浏览器地址栏中了。\ndef index():\n    name = None\n    form = NameForm()\n    if form.validate_on_submit():\n        name = form.name.data\n        form.name.data = ''\n    return render_template(\"index.html\",form = form, name = name)\n\nif __name__ == \"__main__\":\n    manager.run()\n\n```\n\n* 第一次请求页面是get方式，validate_on_submit()函数返回false , 表单对象和name=None传入模板，用户看到就是表单的样子\n* 用户输入name提交时，是post请求，validate_on_submit()返回true，表单对象传入name会被清空，name参数也传入，显示在页面。hello， nama！\n\n# 3.模板文件index.html\n\n```html\n{% extends \"base.html\" %}\n\n{% import \"bootstrap/wtf.html\" as wtf %}\n\n{% block title %}Flasky{% endblock %}\n\n{% block page_content %}\n<div class=\"page-header\">\n    <h1>Hello, {% if name %}{{ name }}{% else %}Stranger{% endif %}!</h1>\n</div>\n{{ wtf.quick_form(form) }}\n{% endblock %}\n\n```\n\n```py\n{% import \"bootstrap\\/wtf.html\" as wtf %} 引入wtf模板，\n{{ wtf.quick_form(form) }}填充表单数据\n```\n\n\n# 4. wtdforms 支持的表单字段类型\n\n|字段类型|说明|\n|-|-|\n|StringField|文本字段|\n|TextAreaField|多行文本|\n|PasswordField|密码文本字段|\n|HiddenField|隐藏文本字段|\n|DateField|文本字段，值为datetime.date格式|\n|IntrgerField|文本字段，为整数|\n|DecimalField|文本字段，值为小数|\n|FloatField|文本字段，值为浮点数|\n|BooleanField|复选框，值为flase和true|\n|RadioField|一组单选框|\n|SelectField|下拉列表|\n|SelectMultipleField|下拉列表可选多个值|\n|FileField|文件上传字段|\n|SubmitField|表单提交按钮|\n|FormField|把表单作为一个字段嵌入另一个表单|\n|FieldList|一组指定类型的字段|\n\n\n# 5. wtfforms验证函数\n\n|验证函数|说明|\n|-|-|\n|Email|验证mail地址|\n|EqualTo|比较2个字段的值，常用语密码输入两次对比|\n|IPAddress|验证ipv4网络地址|\n|Length|验证输入字符串的长度|\n|NumberRange|验证输入的值在数字范围内|\n|Optional|无输入值时跳过其他验证函数|\n|Required|确保字段有值|\n|Regexp|使用正则表达式验证输入值|\n|URL|验证url|\n|AnyOf|确保输入值在可选列表|\n|NoneOf|确保输入值不在可选列表|\n\n\n# 6. 重定向和用户会话\n\n* 目前hello.py 刷新会出现一警告，这个警告是因为最后一次提交是post请求导致的，所以使用url重定向让最后一次请求变为get请求,那么问题是之前的post参数怎么获取呢，不然网页无法渲染，这就需要session字典形式存储，get请求时从session中获取所需字段。\n\n\n```py\nfrom flask import session,url_for\n\n@app.route(\"/\")\ndef index():\n    form = NameForm()\n    if form.validate_on_submit():\n        session[\"name\"] = form.name.data\n        return redirect(url_for(\"index\")) # 一般endpoint就是视图函数名\n    return render_template(\"index.html\", form=form, name = session.get('name'))\n    #session.get 函数找不到name字段，返回None，网页有默认提示。\n\n\n```\n\n\n# 7. flash消息(闪现,闪烁)\n\n* 主要用于警告，消息提醒，比如用户输入了错误的用户名和密码，需要一个提醒，就可以使用flash功能。\n\n* 只调用flash函数是显示不出消息的，它主要是把消息push方式存入一个地方，然后程序使用模板渲染时可以pop方式获取到，所以flash消息就像队列，先进先出，只会显示一次。\n\n```py\nform flask import flash\n\n@app route(\"/\", methods=['GET','POST'])\ndef index():\n    form = NameForm()\n    if form.validate_on_submit():\n        old_name = session.get(\"name\")\n        if old_name  is not None and old_name != form.name.data:\n            flash(\"looks like you have change your name.\")\n        session['name'] = form.name.data\n        return redirect(url_for(\"index\"))\n    return render_template(\"index.html\", form = form, name = sesson.get(\"name\"))\n\n```\n\n* 在base.html 模板中渲染循环取出消息\n\n```html\n{# content 部分添加for循环#}\n{% block content %}\n    <div class=\"container\">\n    {# 增加一个 for循环#}\n    {% for message in get_flashed_messages() %} \n        <div class=\"alert alert-warning\">\n            <button type=\"button\" class=\"close\" data-dismiss=\"alert\"> $times;  </button>\n            {{ message }}\n        </div>\n    {% endfor %}\n\n\n    {% block page_content %}  {% endblock %}\n\n    </div>\n{% endblock %}\n\n```\n\n\n\n\n\n\n\n","slug":"language/python/4_web表单","published":1,"updated":"2019-05-19T14:30:17.031Z","comments":1,"photos":[],"link":"","_id":"cjwxes5eb003ehdliw4qclu7n","content":"<h1 id=\"表单的处理\"><a href=\"#表单的处理\" class=\"headerlink\" title=\"表单的处理\"></a>表单的处理</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install flask-wtf</span><br></pre></td></tr></table></figure>\n<h1 id=\"1-跨站请求伪造保护XSRF和XSS\"><a href=\"#1-跨站请求伪造保护XSRF和XSS\" class=\"headerlink\" title=\"1. 跨站请求伪造保护XSRF和XSS\"></a>1. 跨站请求伪造保护XSRF和XSS</h1><ul>\n<li><p>XSRF 跨站请求伪造<br>** 利用用户已经登陆了的网站上执行非法操作，利用了网站对已登录用户的信任。</p>\n</li>\n<li><p>XSS 跨站脚本攻击<br>** 利用用户对制定网站的信任，执行一些非法操作。</p>\n</li>\n<li><p>为了防止XSRF攻击，所以有了 SECRET_KEY配置项。</p>\n</li>\n</ul>\n<h1 id=\"2-主文件hello-py-代码\"><a href=\"#2-主文件hello-py-代码\" class=\"headerlink\" title=\"2. 主文件hello.py 代码\"></a>2. 主文件hello.py 代码</h1><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding=utf=8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 引入核心模块和模板加载模块</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template</span><br><span class=\"line\"><span class=\"comment\"># 引入bootstrap前端框架</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_bootstrap <span class=\"keyword\">import</span> Bootstrap</span><br><span class=\"line\"><span class=\"comment\"># 引入时间模块,实现了momment.js</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_moment <span class=\"keyword\">import</span> Moment</span><br><span class=\"line\"><span class=\"comment\"># 引入manage模块，服务器启动参数控制</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_script <span class=\"keyword\">import</span> Manager</span><br><span class=\"line\"><span class=\"comment\"># 引入表单模块</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_wtf <span class=\"keyword\">import</span> FlaskForm</span><br><span class=\"line\"><span class=\"comment\"># 引入表单字段类</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> wtforms <span class=\"keyword\">import</span> StringField,SubmitField</span><br><span class=\"line\"><span class=\"comment\"># 引入表单验证函数</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> wtforms.validators <span class=\"keyword\">import</span> Required</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每个web表单都有一个继承自FlaskForm的类表示,所以先定义一个类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameForm</span><span class=\"params\">(FlaskForm)</span>:</span></span><br><span class=\"line\">    name = StringField(<span class=\"string\">\"what is your name ?\"</span>,validators=[Required()]) <span class=\"comment\"># 字段对象可附加多个验证函数，所以是列表, Required确保非空</span></span><br><span class=\"line\">    submit = SubmitField(<span class=\"string\">\"Submit1\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"><span class=\"comment\"># 生成加密令牌的密钥,再用令牌验证请求的表单数据真伪,</span></span><br><span class=\"line\">app.config[<span class=\"string\">'SECRET_KEY'</span>] = <span class=\"string\">'this random string！'</span></span><br><span class=\"line\"></span><br><span class=\"line\">bootstrap = Bootstrap(app)</span><br><span class=\"line\">moment = Moment(app)</span><br><span class=\"line\">manager = Manager(app)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.errorhandler(404)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">page_not_found</span><span class=\"params\">(e)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'404.html'</span>), <span class=\"number\">404</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.errorhandler(500)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">internal_server_error</span><span class=\"params\">(e)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'500.html'</span>), <span class=\"number\">500</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/', methods=['GET', 'POST']) #如果不附加post方法，会get提交表单，信息就暴漏在浏览器地址栏中了。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    name = <span class=\"keyword\">None</span></span><br><span class=\"line\">    form = NameForm()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> form.validate_on_submit():</span><br><span class=\"line\">        name = form.name.data</span><br><span class=\"line\">        form.name.data = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">\"index.html\"</span>,form = form, name = name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    manager.run()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第一次请求页面是get方式，validate_on_submit()函数返回false , 表单对象和name=None传入模板，用户看到就是表单的样子</li>\n<li>用户输入name提交时，是post请求，validate_on_submit()返回true，表单对象传入name会被清空，name参数也传入，显示在页面。hello， nama！</li>\n</ul>\n<h1 id=\"3-模板文件index-html\"><a href=\"#3-模板文件index-html\" class=\"headerlink\" title=\"3.模板文件index.html\"></a>3.模板文件index.html</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% extends \"base.html\" %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% import \"bootstrap/wtf.html\" as wtf %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block title %&#125;Flasky&#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block page_content %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page-header\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;% if name %&#125;&#123;&#123; name &#125;&#125;&#123;% else %&#125;Stranger&#123;% endif %&#125;!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">&#123;&#123; wtf.quick_form(form) &#125;&#125;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">import</span> <span class=\"string\">\"bootstrap\\/wtf.html\"</span> <span class=\"keyword\">as</span> wtf %&#125; 引入wtf模板，</span><br><span class=\"line\">&#123;&#123; wtf.quick_form(form) &#125;&#125;填充表单数据</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-wtdforms-支持的表单字段类型\"><a href=\"#4-wtdforms-支持的表单字段类型\" class=\"headerlink\" title=\"4. wtdforms 支持的表单字段类型\"></a>4. wtdforms 支持的表单字段类型</h1><table>\n<thead>\n<tr>\n<th>字段类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>StringField</td>\n<td>文本字段</td>\n</tr>\n<tr>\n<td>TextAreaField</td>\n<td>多行文本</td>\n</tr>\n<tr>\n<td>PasswordField</td>\n<td>密码文本字段</td>\n</tr>\n<tr>\n<td>HiddenField</td>\n<td>隐藏文本字段</td>\n</tr>\n<tr>\n<td>DateField</td>\n<td>文本字段，值为datetime.date格式</td>\n</tr>\n<tr>\n<td>IntrgerField</td>\n<td>文本字段，为整数</td>\n</tr>\n<tr>\n<td>DecimalField</td>\n<td>文本字段，值为小数</td>\n</tr>\n<tr>\n<td>FloatField</td>\n<td>文本字段，值为浮点数</td>\n</tr>\n<tr>\n<td>BooleanField</td>\n<td>复选框，值为flase和true</td>\n</tr>\n<tr>\n<td>RadioField</td>\n<td>一组单选框</td>\n</tr>\n<tr>\n<td>SelectField</td>\n<td>下拉列表</td>\n</tr>\n<tr>\n<td>SelectMultipleField</td>\n<td>下拉列表可选多个值</td>\n</tr>\n<tr>\n<td>FileField</td>\n<td>文件上传字段</td>\n</tr>\n<tr>\n<td>SubmitField</td>\n<td>表单提交按钮</td>\n</tr>\n<tr>\n<td>FormField</td>\n<td>把表单作为一个字段嵌入另一个表单</td>\n</tr>\n<tr>\n<td>FieldList</td>\n<td>一组指定类型的字段</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"5-wtfforms验证函数\"><a href=\"#5-wtfforms验证函数\" class=\"headerlink\" title=\"5. wtfforms验证函数\"></a>5. wtfforms验证函数</h1><table>\n<thead>\n<tr>\n<th>验证函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Email</td>\n<td>验证mail地址</td>\n</tr>\n<tr>\n<td>EqualTo</td>\n<td>比较2个字段的值，常用语密码输入两次对比</td>\n</tr>\n<tr>\n<td>IPAddress</td>\n<td>验证ipv4网络地址</td>\n</tr>\n<tr>\n<td>Length</td>\n<td>验证输入字符串的长度</td>\n</tr>\n<tr>\n<td>NumberRange</td>\n<td>验证输入的值在数字范围内</td>\n</tr>\n<tr>\n<td>Optional</td>\n<td>无输入值时跳过其他验证函数</td>\n</tr>\n<tr>\n<td>Required</td>\n<td>确保字段有值</td>\n</tr>\n<tr>\n<td>Regexp</td>\n<td>使用正则表达式验证输入值</td>\n</tr>\n<tr>\n<td>URL</td>\n<td>验证url</td>\n</tr>\n<tr>\n<td>AnyOf</td>\n<td>确保输入值在可选列表</td>\n</tr>\n<tr>\n<td>NoneOf</td>\n<td>确保输入值不在可选列表</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"6-重定向和用户会话\"><a href=\"#6-重定向和用户会话\" class=\"headerlink\" title=\"6. 重定向和用户会话\"></a>6. 重定向和用户会话</h1><ul>\n<li>目前hello.py 刷新会出现一警告，这个警告是因为最后一次提交是post请求导致的，所以使用url重定向让最后一次请求变为get请求,那么问题是之前的post参数怎么获取呢，不然网页无法渲染，这就需要session字典形式存储，get请求时从session中获取所需字段。</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> session,url_for</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(\"/\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    form = NameForm()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> form.validate_on_submit():</span><br><span class=\"line\">        session[<span class=\"string\">\"name\"</span>] = form.name.data</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">\"index\"</span>)) <span class=\"comment\"># 一般endpoint就是视图函数名</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">\"index.html\"</span>, form=form, name = session.get(<span class=\"string\">'name'</span>))</span><br><span class=\"line\">    <span class=\"comment\">#session.get 函数找不到name字段，返回None，网页有默认提示。</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"7-flash消息-闪现-闪烁\"><a href=\"#7-flash消息-闪现-闪烁\" class=\"headerlink\" title=\"7. flash消息(闪现,闪烁)\"></a>7. flash消息(闪现,闪烁)</h1><ul>\n<li><p>主要用于警告，消息提醒，比如用户输入了错误的用户名和密码，需要一个提醒，就可以使用flash功能。</p>\n</li>\n<li><p>只调用flash函数是显示不出消息的，它主要是把消息push方式存入一个地方，然后程序使用模板渲染时可以pop方式获取到，所以flash消息就像队列，先进先出，只会显示一次。</p>\n</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">form flask <span class=\"keyword\">import</span> flash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app route(\"/\", methods=['GET','POST'])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    form = NameForm()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> form.validate_on_submit():</span><br><span class=\"line\">        old_name = session.get(<span class=\"string\">\"name\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> old_name  <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span> <span class=\"keyword\">and</span> old_name != form.name.data:</span><br><span class=\"line\">            flash(<span class=\"string\">\"looks like you have change your name.\"</span>)</span><br><span class=\"line\">        session[<span class=\"string\">'name'</span>] = form.name.data</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">\"index\"</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">\"index.html\"</span>, form = form, name = sesson.get(<span class=\"string\">\"name\"</span>))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在base.html 模板中渲染循环取出消息</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;# content 部分添加for循环#&#125;</span><br><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    &#123;# 增加一个 for循环#&#125;</span><br><span class=\"line\">    &#123;% for message in get_flashed_messages() %&#125; </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"alert alert-warning\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"close\"</span> <span class=\"attr\">data-dismiss</span>=<span class=\"string\">\"alert\"</span>&gt;</span> $times;  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            &#123;&#123; message &#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    &#123;% endfor %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;% block page_content %&#125;  &#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"表单的处理\"><a href=\"#表单的处理\" class=\"headerlink\" title=\"表单的处理\"></a>表单的处理</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install flask-wtf</span><br></pre></td></tr></table></figure>\n<h1 id=\"1-跨站请求伪造保护XSRF和XSS\"><a href=\"#1-跨站请求伪造保护XSRF和XSS\" class=\"headerlink\" title=\"1. 跨站请求伪造保护XSRF和XSS\"></a>1. 跨站请求伪造保护XSRF和XSS</h1><ul>\n<li><p>XSRF 跨站请求伪造<br>** 利用用户已经登陆了的网站上执行非法操作，利用了网站对已登录用户的信任。</p>\n</li>\n<li><p>XSS 跨站脚本攻击<br>** 利用用户对制定网站的信任，执行一些非法操作。</p>\n</li>\n<li><p>为了防止XSRF攻击，所以有了 SECRET_KEY配置项。</p>\n</li>\n</ul>\n<h1 id=\"2-主文件hello-py-代码\"><a href=\"#2-主文件hello-py-代码\" class=\"headerlink\" title=\"2. 主文件hello.py 代码\"></a>2. 主文件hello.py 代码</h1><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding=utf=8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 引入核心模块和模板加载模块</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template</span><br><span class=\"line\"><span class=\"comment\"># 引入bootstrap前端框架</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_bootstrap <span class=\"keyword\">import</span> Bootstrap</span><br><span class=\"line\"><span class=\"comment\"># 引入时间模块,实现了momment.js</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_moment <span class=\"keyword\">import</span> Moment</span><br><span class=\"line\"><span class=\"comment\"># 引入manage模块，服务器启动参数控制</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_script <span class=\"keyword\">import</span> Manager</span><br><span class=\"line\"><span class=\"comment\"># 引入表单模块</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_wtf <span class=\"keyword\">import</span> FlaskForm</span><br><span class=\"line\"><span class=\"comment\"># 引入表单字段类</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> wtforms <span class=\"keyword\">import</span> StringField,SubmitField</span><br><span class=\"line\"><span class=\"comment\"># 引入表单验证函数</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> wtforms.validators <span class=\"keyword\">import</span> Required</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每个web表单都有一个继承自FlaskForm的类表示,所以先定义一个类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameForm</span><span class=\"params\">(FlaskForm)</span>:</span></span><br><span class=\"line\">    name = StringField(<span class=\"string\">\"what is your name ?\"</span>,validators=[Required()]) <span class=\"comment\"># 字段对象可附加多个验证函数，所以是列表, Required确保非空</span></span><br><span class=\"line\">    submit = SubmitField(<span class=\"string\">\"Submit1\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"><span class=\"comment\"># 生成加密令牌的密钥,再用令牌验证请求的表单数据真伪,</span></span><br><span class=\"line\">app.config[<span class=\"string\">'SECRET_KEY'</span>] = <span class=\"string\">'this random string！'</span></span><br><span class=\"line\"></span><br><span class=\"line\">bootstrap = Bootstrap(app)</span><br><span class=\"line\">moment = Moment(app)</span><br><span class=\"line\">manager = Manager(app)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.errorhandler(404)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">page_not_found</span><span class=\"params\">(e)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'404.html'</span>), <span class=\"number\">404</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.errorhandler(500)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">internal_server_error</span><span class=\"params\">(e)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'500.html'</span>), <span class=\"number\">500</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/', methods=['GET', 'POST']) #如果不附加post方法，会get提交表单，信息就暴漏在浏览器地址栏中了。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    name = <span class=\"keyword\">None</span></span><br><span class=\"line\">    form = NameForm()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> form.validate_on_submit():</span><br><span class=\"line\">        name = form.name.data</span><br><span class=\"line\">        form.name.data = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">\"index.html\"</span>,form = form, name = name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    manager.run()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第一次请求页面是get方式，validate_on_submit()函数返回false , 表单对象和name=None传入模板，用户看到就是表单的样子</li>\n<li>用户输入name提交时，是post请求，validate_on_submit()返回true，表单对象传入name会被清空，name参数也传入，显示在页面。hello， nama！</li>\n</ul>\n<h1 id=\"3-模板文件index-html\"><a href=\"#3-模板文件index-html\" class=\"headerlink\" title=\"3.模板文件index.html\"></a>3.模板文件index.html</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% extends \"base.html\" %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% import \"bootstrap/wtf.html\" as wtf %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block title %&#125;Flasky&#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block page_content %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page-header\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;% if name %&#125;&#123;&#123; name &#125;&#125;&#123;% else %&#125;Stranger&#123;% endif %&#125;!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">&#123;&#123; wtf.quick_form(form) &#125;&#125;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">import</span> <span class=\"string\">\"bootstrap\\/wtf.html\"</span> <span class=\"keyword\">as</span> wtf %&#125; 引入wtf模板，</span><br><span class=\"line\">&#123;&#123; wtf.quick_form(form) &#125;&#125;填充表单数据</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-wtdforms-支持的表单字段类型\"><a href=\"#4-wtdforms-支持的表单字段类型\" class=\"headerlink\" title=\"4. wtdforms 支持的表单字段类型\"></a>4. wtdforms 支持的表单字段类型</h1><table>\n<thead>\n<tr>\n<th>字段类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>StringField</td>\n<td>文本字段</td>\n</tr>\n<tr>\n<td>TextAreaField</td>\n<td>多行文本</td>\n</tr>\n<tr>\n<td>PasswordField</td>\n<td>密码文本字段</td>\n</tr>\n<tr>\n<td>HiddenField</td>\n<td>隐藏文本字段</td>\n</tr>\n<tr>\n<td>DateField</td>\n<td>文本字段，值为datetime.date格式</td>\n</tr>\n<tr>\n<td>IntrgerField</td>\n<td>文本字段，为整数</td>\n</tr>\n<tr>\n<td>DecimalField</td>\n<td>文本字段，值为小数</td>\n</tr>\n<tr>\n<td>FloatField</td>\n<td>文本字段，值为浮点数</td>\n</tr>\n<tr>\n<td>BooleanField</td>\n<td>复选框，值为flase和true</td>\n</tr>\n<tr>\n<td>RadioField</td>\n<td>一组单选框</td>\n</tr>\n<tr>\n<td>SelectField</td>\n<td>下拉列表</td>\n</tr>\n<tr>\n<td>SelectMultipleField</td>\n<td>下拉列表可选多个值</td>\n</tr>\n<tr>\n<td>FileField</td>\n<td>文件上传字段</td>\n</tr>\n<tr>\n<td>SubmitField</td>\n<td>表单提交按钮</td>\n</tr>\n<tr>\n<td>FormField</td>\n<td>把表单作为一个字段嵌入另一个表单</td>\n</tr>\n<tr>\n<td>FieldList</td>\n<td>一组指定类型的字段</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"5-wtfforms验证函数\"><a href=\"#5-wtfforms验证函数\" class=\"headerlink\" title=\"5. wtfforms验证函数\"></a>5. wtfforms验证函数</h1><table>\n<thead>\n<tr>\n<th>验证函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Email</td>\n<td>验证mail地址</td>\n</tr>\n<tr>\n<td>EqualTo</td>\n<td>比较2个字段的值，常用语密码输入两次对比</td>\n</tr>\n<tr>\n<td>IPAddress</td>\n<td>验证ipv4网络地址</td>\n</tr>\n<tr>\n<td>Length</td>\n<td>验证输入字符串的长度</td>\n</tr>\n<tr>\n<td>NumberRange</td>\n<td>验证输入的值在数字范围内</td>\n</tr>\n<tr>\n<td>Optional</td>\n<td>无输入值时跳过其他验证函数</td>\n</tr>\n<tr>\n<td>Required</td>\n<td>确保字段有值</td>\n</tr>\n<tr>\n<td>Regexp</td>\n<td>使用正则表达式验证输入值</td>\n</tr>\n<tr>\n<td>URL</td>\n<td>验证url</td>\n</tr>\n<tr>\n<td>AnyOf</td>\n<td>确保输入值在可选列表</td>\n</tr>\n<tr>\n<td>NoneOf</td>\n<td>确保输入值不在可选列表</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"6-重定向和用户会话\"><a href=\"#6-重定向和用户会话\" class=\"headerlink\" title=\"6. 重定向和用户会话\"></a>6. 重定向和用户会话</h1><ul>\n<li>目前hello.py 刷新会出现一警告，这个警告是因为最后一次提交是post请求导致的，所以使用url重定向让最后一次请求变为get请求,那么问题是之前的post参数怎么获取呢，不然网页无法渲染，这就需要session字典形式存储，get请求时从session中获取所需字段。</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> session,url_for</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(\"/\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    form = NameForm()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> form.validate_on_submit():</span><br><span class=\"line\">        session[<span class=\"string\">\"name\"</span>] = form.name.data</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">\"index\"</span>)) <span class=\"comment\"># 一般endpoint就是视图函数名</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">\"index.html\"</span>, form=form, name = session.get(<span class=\"string\">'name'</span>))</span><br><span class=\"line\">    <span class=\"comment\">#session.get 函数找不到name字段，返回None，网页有默认提示。</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"7-flash消息-闪现-闪烁\"><a href=\"#7-flash消息-闪现-闪烁\" class=\"headerlink\" title=\"7. flash消息(闪现,闪烁)\"></a>7. flash消息(闪现,闪烁)</h1><ul>\n<li><p>主要用于警告，消息提醒，比如用户输入了错误的用户名和密码，需要一个提醒，就可以使用flash功能。</p>\n</li>\n<li><p>只调用flash函数是显示不出消息的，它主要是把消息push方式存入一个地方，然后程序使用模板渲染时可以pop方式获取到，所以flash消息就像队列，先进先出，只会显示一次。</p>\n</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">form flask <span class=\"keyword\">import</span> flash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app route(\"/\", methods=['GET','POST'])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    form = NameForm()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> form.validate_on_submit():</span><br><span class=\"line\">        old_name = session.get(<span class=\"string\">\"name\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> old_name  <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span> <span class=\"keyword\">and</span> old_name != form.name.data:</span><br><span class=\"line\">            flash(<span class=\"string\">\"looks like you have change your name.\"</span>)</span><br><span class=\"line\">        session[<span class=\"string\">'name'</span>] = form.name.data</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">\"index\"</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">\"index.html\"</span>, form = form, name = sesson.get(<span class=\"string\">\"name\"</span>))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在base.html 模板中渲染循环取出消息</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;# content 部分添加for循环#&#125;</span><br><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    &#123;# 增加一个 for循环#&#125;</span><br><span class=\"line\">    &#123;% for message in get_flashed_messages() %&#125; </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"alert alert-warning\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"close\"</span> <span class=\"attr\">data-dismiss</span>=<span class=\"string\">\"alert\"</span>&gt;</span> $times;  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            &#123;&#123; message &#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    &#123;% endfor %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;% block page_content %&#125;  &#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"flask 第5章(数据库操作)","date":"2019-01-28T14:22:00.000Z","_content":"\n\n# 数据库操作\n\n## 1. 安装需要的包\n\n* pip install flask-sqlalchemy\n\n\nhello.py\n\n```py\n#coding=utf=8\nimport pymysql\npymysql.install_as_MySQLdb()\n\nimport MySQLdb # MySQLdb 只支持python2 ,我这limitlinux转不上，只能装pymysql代替，但是需要上面2行代码\n\n# 引入核心模块和模板加载模块\nfrom flask import Flask, render_template,session,redirect,url_for,flash\n# 引入bootstrap前端框架\nfrom flask_bootstrap import Bootstrap\n# 引入时间模块,实现了momment.js\nfrom flask_moment import Moment\n# 引入manage模块，服务器启动参数控制\nfrom flask_script import Manager\n# 引入表单模块\nfrom flask_wtf import FlaskForm\n# 引入表单字段类\nfrom wtforms import StringField,SubmitField\n# 引入表单验证函数\nfrom wtforms.validators import Required\n#导入数据库包\nfrom flask_sqlalchemy import SQLAlchemy\n\n# 每个web表单都有一个继承自FlaskForm的类表示,所以先定义一个类\nclass NameForm(FlaskForm):\n    name = StringField(\"what is your name ?\",validators=[Required()]) # 字段对象可附加多个验证函数，所以是列表, Required确保非空\n    submit = SubmitField(\"Submit1\")\n\n\napp = Flask(__name__)\n# 生成加密令牌的密钥,再用令牌验证请求的表单数据真伪\napp.config['SECRET_KEY'] = 'this random string！'\n\n# 数据库配置\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://appwriter:appwr@zxcv@192.168.43.186/flask?charset=utf8\"\napp.config[\"SQLALCHEMY_COMMIT_ON_TEARDOWN\"] = True # 请求结束自动提交数据库变动\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = True # 这行不能缺\n#SQLALCHEMY_COMMIT_TEARDOWN = True\n\ndb = SQLAlchemy(app) # 数据库实例 模型继承于db.model, 模型在python就是一个类，数据库中是一个表，类属性就是表字段\n\nbootstrap = Bootstrap(app)\nmoment = Moment(app)\nmanager = Manager(app)\n\n\n# 定义模型\nclass Role(db.Model):\n    __tablename__ = 'roles'\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(64),unique=True)\n    users = db.relationship(\"User\", backref='role')\n\n    def __repr__(self):\n        return '<Role %r> ' % self.name\n\nclass User(db.Model):\n    __tablename__ = \"users\"\n    id = db.Column(db.Integer,primary_key=True)\n    username = db.Column(db.String(64),unique=True)\n    role_id = db.Column(db.Integer, db.ForeignKey('roles.id'))\n\n    \n    def __repr__(self):\n        return '<User %r> ' % self.username\n\n@app.errorhandler(404)\ndef page_not_found(e):\n    return render_template('404.html'), 404\n\n\n@app.errorhandler(500)\ndef internal_server_error(e):\n    return render_template('500.html'), 500\n\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    form = NameForm()\n    if form.validate_on_submit():\n        old_name = session.get(\"name\")\n        if old_name is not None and old_name != form.name.data:\n            flash(\"your are changing your name .\")\n        session[\"name\"] = form.name.data\n        return redirect(url_for(\"index\")) # 一般endpoint就是视图函数名\n    return render_template(\"index.html\", form=form, name = session.get('name'))\n    #return render_template(\"index.html\", form=form, name = None)\n\nif __name__ == \"__main__\":\n    manager.run()\n\n```\n\n\n## 2. SQLAlchemy 常用的列类型\n\n|类型名|python类型|说明|\n|-|-|-|\n|Integer|int|普通整数一般32位|\n|Smallinteger|int|一般16位的整数|\n|BigInteger|int|不限制精度的整数|\n|Float|float|浮点数|\n|Numeric|decimal.Decimal|定点数，小数|\n|String|str|字符串|\n|Text|str|较长的字符串，做了优化，或不限制长度|\n|Unicode|unicode|变长unicode字符串，对不限长度的字符串做了优化|\n|Boolean|bool|布尔值|\n|Date|datetime.date|日期|\n|Time|datetime.time|时间|\n|DateTime|datetime.datetime|日期和时间|\n|Interval|datetime.timedelta|时间间隔|\n|Enum|str|一组字符串|\n|PickleType|任何python对象|石洞使用Pickle序列化|\n|LargeBinary|str|二进制文件|\n\n\n## 3. SQLAlchemy常用的列选项\n\n|选项名|说明|\n|-|-|\n|primary_key|表主键|\n|unique|设为true，表示这列不允许重复|\n|index|设为True,表示这列建立索引|\n|nullalbe|设为True,表示这列允许位空值NULL，fasle表示不允许为空|\n|default|为这列默认值|\n\n\n\n最复杂的就是多对多的关系，需要第三张表，使用db.relationship()设置。\n\n## 4. 数据库操作\n\n* python shell中操作\n\n```py\n\tpython hello.py shell\n\tfrom hello import db\n\tdb.create_all()\n```\n","source":"_posts/language/python/5_数据库1.md","raw":"---\nlayout: post\ntitle: flask 第5章(数据库操作)\ncategory: flask\ndate: 2019-01-28 22:22:00\n\n---\n\n\n# 数据库操作\n\n## 1. 安装需要的包\n\n* pip install flask-sqlalchemy\n\n\nhello.py\n\n```py\n#coding=utf=8\nimport pymysql\npymysql.install_as_MySQLdb()\n\nimport MySQLdb # MySQLdb 只支持python2 ,我这limitlinux转不上，只能装pymysql代替，但是需要上面2行代码\n\n# 引入核心模块和模板加载模块\nfrom flask import Flask, render_template,session,redirect,url_for,flash\n# 引入bootstrap前端框架\nfrom flask_bootstrap import Bootstrap\n# 引入时间模块,实现了momment.js\nfrom flask_moment import Moment\n# 引入manage模块，服务器启动参数控制\nfrom flask_script import Manager\n# 引入表单模块\nfrom flask_wtf import FlaskForm\n# 引入表单字段类\nfrom wtforms import StringField,SubmitField\n# 引入表单验证函数\nfrom wtforms.validators import Required\n#导入数据库包\nfrom flask_sqlalchemy import SQLAlchemy\n\n# 每个web表单都有一个继承自FlaskForm的类表示,所以先定义一个类\nclass NameForm(FlaskForm):\n    name = StringField(\"what is your name ?\",validators=[Required()]) # 字段对象可附加多个验证函数，所以是列表, Required确保非空\n    submit = SubmitField(\"Submit1\")\n\n\napp = Flask(__name__)\n# 生成加密令牌的密钥,再用令牌验证请求的表单数据真伪\napp.config['SECRET_KEY'] = 'this random string！'\n\n# 数据库配置\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://appwriter:appwr@zxcv@192.168.43.186/flask?charset=utf8\"\napp.config[\"SQLALCHEMY_COMMIT_ON_TEARDOWN\"] = True # 请求结束自动提交数据库变动\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = True # 这行不能缺\n#SQLALCHEMY_COMMIT_TEARDOWN = True\n\ndb = SQLAlchemy(app) # 数据库实例 模型继承于db.model, 模型在python就是一个类，数据库中是一个表，类属性就是表字段\n\nbootstrap = Bootstrap(app)\nmoment = Moment(app)\nmanager = Manager(app)\n\n\n# 定义模型\nclass Role(db.Model):\n    __tablename__ = 'roles'\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(64),unique=True)\n    users = db.relationship(\"User\", backref='role')\n\n    def __repr__(self):\n        return '<Role %r> ' % self.name\n\nclass User(db.Model):\n    __tablename__ = \"users\"\n    id = db.Column(db.Integer,primary_key=True)\n    username = db.Column(db.String(64),unique=True)\n    role_id = db.Column(db.Integer, db.ForeignKey('roles.id'))\n\n    \n    def __repr__(self):\n        return '<User %r> ' % self.username\n\n@app.errorhandler(404)\ndef page_not_found(e):\n    return render_template('404.html'), 404\n\n\n@app.errorhandler(500)\ndef internal_server_error(e):\n    return render_template('500.html'), 500\n\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    form = NameForm()\n    if form.validate_on_submit():\n        old_name = session.get(\"name\")\n        if old_name is not None and old_name != form.name.data:\n            flash(\"your are changing your name .\")\n        session[\"name\"] = form.name.data\n        return redirect(url_for(\"index\")) # 一般endpoint就是视图函数名\n    return render_template(\"index.html\", form=form, name = session.get('name'))\n    #return render_template(\"index.html\", form=form, name = None)\n\nif __name__ == \"__main__\":\n    manager.run()\n\n```\n\n\n## 2. SQLAlchemy 常用的列类型\n\n|类型名|python类型|说明|\n|-|-|-|\n|Integer|int|普通整数一般32位|\n|Smallinteger|int|一般16位的整数|\n|BigInteger|int|不限制精度的整数|\n|Float|float|浮点数|\n|Numeric|decimal.Decimal|定点数，小数|\n|String|str|字符串|\n|Text|str|较长的字符串，做了优化，或不限制长度|\n|Unicode|unicode|变长unicode字符串，对不限长度的字符串做了优化|\n|Boolean|bool|布尔值|\n|Date|datetime.date|日期|\n|Time|datetime.time|时间|\n|DateTime|datetime.datetime|日期和时间|\n|Interval|datetime.timedelta|时间间隔|\n|Enum|str|一组字符串|\n|PickleType|任何python对象|石洞使用Pickle序列化|\n|LargeBinary|str|二进制文件|\n\n\n## 3. SQLAlchemy常用的列选项\n\n|选项名|说明|\n|-|-|\n|primary_key|表主键|\n|unique|设为true，表示这列不允许重复|\n|index|设为True,表示这列建立索引|\n|nullalbe|设为True,表示这列允许位空值NULL，fasle表示不允许为空|\n|default|为这列默认值|\n\n\n\n最复杂的就是多对多的关系，需要第三张表，使用db.relationship()设置。\n\n## 4. 数据库操作\n\n* python shell中操作\n\n```py\n\tpython hello.py shell\n\tfrom hello import db\n\tdb.create_all()\n```\n","slug":"language/python/5_数据库1","published":1,"updated":"2019-05-19T14:30:17.031Z","comments":1,"photos":[],"link":"","_id":"cjwxes5ed003fhdliexl6g5l7","content":"<h1 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h1><h2 id=\"1-安装需要的包\"><a href=\"#1-安装需要的包\" class=\"headerlink\" title=\"1. 安装需要的包\"></a>1. 安装需要的包</h2><ul>\n<li>pip install flask-sqlalchemy</li>\n</ul>\n<p>hello.py</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding=utf=8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\">pymysql.install_as_MySQLdb()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> MySQLdb <span class=\"comment\"># MySQLdb 只支持python2 ,我这limitlinux转不上，只能装pymysql代替，但是需要上面2行代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 引入核心模块和模板加载模块</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template,session,redirect,url_for,flash</span><br><span class=\"line\"><span class=\"comment\"># 引入bootstrap前端框架</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_bootstrap <span class=\"keyword\">import</span> Bootstrap</span><br><span class=\"line\"><span class=\"comment\"># 引入时间模块,实现了momment.js</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_moment <span class=\"keyword\">import</span> Moment</span><br><span class=\"line\"><span class=\"comment\"># 引入manage模块，服务器启动参数控制</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_script <span class=\"keyword\">import</span> Manager</span><br><span class=\"line\"><span class=\"comment\"># 引入表单模块</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_wtf <span class=\"keyword\">import</span> FlaskForm</span><br><span class=\"line\"><span class=\"comment\"># 引入表单字段类</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> wtforms <span class=\"keyword\">import</span> StringField,SubmitField</span><br><span class=\"line\"><span class=\"comment\"># 引入表单验证函数</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> wtforms.validators <span class=\"keyword\">import</span> Required</span><br><span class=\"line\"><span class=\"comment\">#导入数据库包</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_sqlalchemy <span class=\"keyword\">import</span> SQLAlchemy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每个web表单都有一个继承自FlaskForm的类表示,所以先定义一个类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameForm</span><span class=\"params\">(FlaskForm)</span>:</span></span><br><span class=\"line\">    name = StringField(<span class=\"string\">\"what is your name ?\"</span>,validators=[Required()]) <span class=\"comment\"># 字段对象可附加多个验证函数，所以是列表, Required确保非空</span></span><br><span class=\"line\">    submit = SubmitField(<span class=\"string\">\"Submit1\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"><span class=\"comment\"># 生成加密令牌的密钥,再用令牌验证请求的表单数据真伪</span></span><br><span class=\"line\">app.config[<span class=\"string\">'SECRET_KEY'</span>] = <span class=\"string\">'this random string！'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据库配置</span></span><br><span class=\"line\">app.config[<span class=\"string\">\"SQLALCHEMY_DATABASE_URI\"</span>] = <span class=\"string\">\"mysql://appwriter:appwr@zxcv@192.168.43.186/flask?charset=utf8\"</span></span><br><span class=\"line\">app.config[<span class=\"string\">\"SQLALCHEMY_COMMIT_ON_TEARDOWN\"</span>] = <span class=\"keyword\">True</span> <span class=\"comment\"># 请求结束自动提交数据库变动</span></span><br><span class=\"line\">app.config[<span class=\"string\">\"SQLALCHEMY_TRACK_MODIFICATIONS\"</span>] = <span class=\"keyword\">True</span> <span class=\"comment\"># 这行不能缺</span></span><br><span class=\"line\"><span class=\"comment\">#SQLALCHEMY_COMMIT_TEARDOWN = True</span></span><br><span class=\"line\"></span><br><span class=\"line\">db = SQLAlchemy(app) <span class=\"comment\"># 数据库实例 模型继承于db.model, 模型在python就是一个类，数据库中是一个表，类属性就是表字段</span></span><br><span class=\"line\"></span><br><span class=\"line\">bootstrap = Bootstrap(app)</span><br><span class=\"line\">moment = Moment(app)</span><br><span class=\"line\">manager = Manager(app)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义模型</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Role</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'roles'</span></span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    name = db.Column(db.String(<span class=\"number\">64</span>),unique=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    users = db.relationship(<span class=\"string\">\"User\"</span>, backref=<span class=\"string\">'role'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;Role %r&gt; '</span> % self.name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">\"users\"</span></span><br><span class=\"line\">    id = db.Column(db.Integer,primary_key=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    username = db.Column(db.String(<span class=\"number\">64</span>),unique=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    role_id = db.Column(db.Integer, db.ForeignKey(<span class=\"string\">'roles.id'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;User %r&gt; '</span> % self.username</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.errorhandler(404)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">page_not_found</span><span class=\"params\">(e)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'404.html'</span>), <span class=\"number\">404</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.errorhandler(500)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">internal_server_error</span><span class=\"params\">(e)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'500.html'</span>), <span class=\"number\">500</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/', methods=['GET', 'POST'])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    form = NameForm()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> form.validate_on_submit():</span><br><span class=\"line\">        old_name = session.get(<span class=\"string\">\"name\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> old_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span> <span class=\"keyword\">and</span> old_name != form.name.data:</span><br><span class=\"line\">            flash(<span class=\"string\">\"your are changing your name .\"</span>)</span><br><span class=\"line\">        session[<span class=\"string\">\"name\"</span>] = form.name.data</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">\"index\"</span>)) <span class=\"comment\"># 一般endpoint就是视图函数名</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">\"index.html\"</span>, form=form, name = session.get(<span class=\"string\">'name'</span>))</span><br><span class=\"line\">    <span class=\"comment\">#return render_template(\"index.html\", form=form, name = None)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    manager.run()</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-SQLAlchemy-常用的列类型\"><a href=\"#2-SQLAlchemy-常用的列类型\" class=\"headerlink\" title=\"2. SQLAlchemy 常用的列类型\"></a>2. SQLAlchemy 常用的列类型</h2><table>\n<thead>\n<tr>\n<th>类型名</th>\n<th>python类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Integer</td>\n<td>int</td>\n<td>普通整数一般32位</td>\n</tr>\n<tr>\n<td>Smallinteger</td>\n<td>int</td>\n<td>一般16位的整数</td>\n</tr>\n<tr>\n<td>BigInteger</td>\n<td>int</td>\n<td>不限制精度的整数</td>\n</tr>\n<tr>\n<td>Float</td>\n<td>float</td>\n<td>浮点数</td>\n</tr>\n<tr>\n<td>Numeric</td>\n<td>decimal.Decimal</td>\n<td>定点数，小数</td>\n</tr>\n<tr>\n<td>String</td>\n<td>str</td>\n<td>字符串</td>\n</tr>\n<tr>\n<td>Text</td>\n<td>str</td>\n<td>较长的字符串，做了优化，或不限制长度</td>\n</tr>\n<tr>\n<td>Unicode</td>\n<td>unicode</td>\n<td>变长unicode字符串，对不限长度的字符串做了优化</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>bool</td>\n<td>布尔值</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>datetime.date</td>\n<td>日期</td>\n</tr>\n<tr>\n<td>Time</td>\n<td>datetime.time</td>\n<td>时间</td>\n</tr>\n<tr>\n<td>DateTime</td>\n<td>datetime.datetime</td>\n<td>日期和时间</td>\n</tr>\n<tr>\n<td>Interval</td>\n<td>datetime.timedelta</td>\n<td>时间间隔</td>\n</tr>\n<tr>\n<td>Enum</td>\n<td>str</td>\n<td>一组字符串</td>\n</tr>\n<tr>\n<td>PickleType</td>\n<td>任何python对象</td>\n<td>石洞使用Pickle序列化</td>\n</tr>\n<tr>\n<td>LargeBinary</td>\n<td>str</td>\n<td>二进制文件</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"3-SQLAlchemy常用的列选项\"><a href=\"#3-SQLAlchemy常用的列选项\" class=\"headerlink\" title=\"3. SQLAlchemy常用的列选项\"></a>3. SQLAlchemy常用的列选项</h2><table>\n<thead>\n<tr>\n<th>选项名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>primary_key</td>\n<td>表主键</td>\n</tr>\n<tr>\n<td>unique</td>\n<td>设为true，表示这列不允许重复</td>\n</tr>\n<tr>\n<td>index</td>\n<td>设为True,表示这列建立索引</td>\n</tr>\n<tr>\n<td>nullalbe</td>\n<td>设为True,表示这列允许位空值NULL，fasle表示不允许为空</td>\n</tr>\n<tr>\n<td>default</td>\n<td>为这列默认值</td>\n</tr>\n</tbody>\n</table>\n<p>最复杂的就是多对多的关系，需要第三张表，使用db.relationship()设置。</p>\n<h2 id=\"4-数据库操作\"><a href=\"#4-数据库操作\" class=\"headerlink\" title=\"4. 数据库操作\"></a>4. 数据库操作</h2><ul>\n<li>python shell中操作</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python hello.py shell</span><br><span class=\"line\"><span class=\"keyword\">from</span> hello <span class=\"keyword\">import</span> db</span><br><span class=\"line\">db.create_all()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h1><h2 id=\"1-安装需要的包\"><a href=\"#1-安装需要的包\" class=\"headerlink\" title=\"1. 安装需要的包\"></a>1. 安装需要的包</h2><ul>\n<li>pip install flask-sqlalchemy</li>\n</ul>\n<p>hello.py</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding=utf=8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\">pymysql.install_as_MySQLdb()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> MySQLdb <span class=\"comment\"># MySQLdb 只支持python2 ,我这limitlinux转不上，只能装pymysql代替，但是需要上面2行代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 引入核心模块和模板加载模块</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template,session,redirect,url_for,flash</span><br><span class=\"line\"><span class=\"comment\"># 引入bootstrap前端框架</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_bootstrap <span class=\"keyword\">import</span> Bootstrap</span><br><span class=\"line\"><span class=\"comment\"># 引入时间模块,实现了momment.js</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_moment <span class=\"keyword\">import</span> Moment</span><br><span class=\"line\"><span class=\"comment\"># 引入manage模块，服务器启动参数控制</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_script <span class=\"keyword\">import</span> Manager</span><br><span class=\"line\"><span class=\"comment\"># 引入表单模块</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_wtf <span class=\"keyword\">import</span> FlaskForm</span><br><span class=\"line\"><span class=\"comment\"># 引入表单字段类</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> wtforms <span class=\"keyword\">import</span> StringField,SubmitField</span><br><span class=\"line\"><span class=\"comment\"># 引入表单验证函数</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> wtforms.validators <span class=\"keyword\">import</span> Required</span><br><span class=\"line\"><span class=\"comment\">#导入数据库包</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_sqlalchemy <span class=\"keyword\">import</span> SQLAlchemy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每个web表单都有一个继承自FlaskForm的类表示,所以先定义一个类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameForm</span><span class=\"params\">(FlaskForm)</span>:</span></span><br><span class=\"line\">    name = StringField(<span class=\"string\">\"what is your name ?\"</span>,validators=[Required()]) <span class=\"comment\"># 字段对象可附加多个验证函数，所以是列表, Required确保非空</span></span><br><span class=\"line\">    submit = SubmitField(<span class=\"string\">\"Submit1\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"><span class=\"comment\"># 生成加密令牌的密钥,再用令牌验证请求的表单数据真伪</span></span><br><span class=\"line\">app.config[<span class=\"string\">'SECRET_KEY'</span>] = <span class=\"string\">'this random string！'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据库配置</span></span><br><span class=\"line\">app.config[<span class=\"string\">\"SQLALCHEMY_DATABASE_URI\"</span>] = <span class=\"string\">\"mysql://appwriter:appwr@zxcv@192.168.43.186/flask?charset=utf8\"</span></span><br><span class=\"line\">app.config[<span class=\"string\">\"SQLALCHEMY_COMMIT_ON_TEARDOWN\"</span>] = <span class=\"keyword\">True</span> <span class=\"comment\"># 请求结束自动提交数据库变动</span></span><br><span class=\"line\">app.config[<span class=\"string\">\"SQLALCHEMY_TRACK_MODIFICATIONS\"</span>] = <span class=\"keyword\">True</span> <span class=\"comment\"># 这行不能缺</span></span><br><span class=\"line\"><span class=\"comment\">#SQLALCHEMY_COMMIT_TEARDOWN = True</span></span><br><span class=\"line\"></span><br><span class=\"line\">db = SQLAlchemy(app) <span class=\"comment\"># 数据库实例 模型继承于db.model, 模型在python就是一个类，数据库中是一个表，类属性就是表字段</span></span><br><span class=\"line\"></span><br><span class=\"line\">bootstrap = Bootstrap(app)</span><br><span class=\"line\">moment = Moment(app)</span><br><span class=\"line\">manager = Manager(app)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义模型</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Role</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'roles'</span></span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    name = db.Column(db.String(<span class=\"number\">64</span>),unique=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    users = db.relationship(<span class=\"string\">\"User\"</span>, backref=<span class=\"string\">'role'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;Role %r&gt; '</span> % self.name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">\"users\"</span></span><br><span class=\"line\">    id = db.Column(db.Integer,primary_key=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    username = db.Column(db.String(<span class=\"number\">64</span>),unique=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    role_id = db.Column(db.Integer, db.ForeignKey(<span class=\"string\">'roles.id'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;User %r&gt; '</span> % self.username</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.errorhandler(404)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">page_not_found</span><span class=\"params\">(e)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'404.html'</span>), <span class=\"number\">404</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.errorhandler(500)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">internal_server_error</span><span class=\"params\">(e)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'500.html'</span>), <span class=\"number\">500</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/', methods=['GET', 'POST'])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    form = NameForm()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> form.validate_on_submit():</span><br><span class=\"line\">        old_name = session.get(<span class=\"string\">\"name\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> old_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span> <span class=\"keyword\">and</span> old_name != form.name.data:</span><br><span class=\"line\">            flash(<span class=\"string\">\"your are changing your name .\"</span>)</span><br><span class=\"line\">        session[<span class=\"string\">\"name\"</span>] = form.name.data</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">\"index\"</span>)) <span class=\"comment\"># 一般endpoint就是视图函数名</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">\"index.html\"</span>, form=form, name = session.get(<span class=\"string\">'name'</span>))</span><br><span class=\"line\">    <span class=\"comment\">#return render_template(\"index.html\", form=form, name = None)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    manager.run()</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-SQLAlchemy-常用的列类型\"><a href=\"#2-SQLAlchemy-常用的列类型\" class=\"headerlink\" title=\"2. SQLAlchemy 常用的列类型\"></a>2. SQLAlchemy 常用的列类型</h2><table>\n<thead>\n<tr>\n<th>类型名</th>\n<th>python类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Integer</td>\n<td>int</td>\n<td>普通整数一般32位</td>\n</tr>\n<tr>\n<td>Smallinteger</td>\n<td>int</td>\n<td>一般16位的整数</td>\n</tr>\n<tr>\n<td>BigInteger</td>\n<td>int</td>\n<td>不限制精度的整数</td>\n</tr>\n<tr>\n<td>Float</td>\n<td>float</td>\n<td>浮点数</td>\n</tr>\n<tr>\n<td>Numeric</td>\n<td>decimal.Decimal</td>\n<td>定点数，小数</td>\n</tr>\n<tr>\n<td>String</td>\n<td>str</td>\n<td>字符串</td>\n</tr>\n<tr>\n<td>Text</td>\n<td>str</td>\n<td>较长的字符串，做了优化，或不限制长度</td>\n</tr>\n<tr>\n<td>Unicode</td>\n<td>unicode</td>\n<td>变长unicode字符串，对不限长度的字符串做了优化</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>bool</td>\n<td>布尔值</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>datetime.date</td>\n<td>日期</td>\n</tr>\n<tr>\n<td>Time</td>\n<td>datetime.time</td>\n<td>时间</td>\n</tr>\n<tr>\n<td>DateTime</td>\n<td>datetime.datetime</td>\n<td>日期和时间</td>\n</tr>\n<tr>\n<td>Interval</td>\n<td>datetime.timedelta</td>\n<td>时间间隔</td>\n</tr>\n<tr>\n<td>Enum</td>\n<td>str</td>\n<td>一组字符串</td>\n</tr>\n<tr>\n<td>PickleType</td>\n<td>任何python对象</td>\n<td>石洞使用Pickle序列化</td>\n</tr>\n<tr>\n<td>LargeBinary</td>\n<td>str</td>\n<td>二进制文件</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"3-SQLAlchemy常用的列选项\"><a href=\"#3-SQLAlchemy常用的列选项\" class=\"headerlink\" title=\"3. SQLAlchemy常用的列选项\"></a>3. SQLAlchemy常用的列选项</h2><table>\n<thead>\n<tr>\n<th>选项名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>primary_key</td>\n<td>表主键</td>\n</tr>\n<tr>\n<td>unique</td>\n<td>设为true，表示这列不允许重复</td>\n</tr>\n<tr>\n<td>index</td>\n<td>设为True,表示这列建立索引</td>\n</tr>\n<tr>\n<td>nullalbe</td>\n<td>设为True,表示这列允许位空值NULL，fasle表示不允许为空</td>\n</tr>\n<tr>\n<td>default</td>\n<td>为这列默认值</td>\n</tr>\n</tbody>\n</table>\n<p>最复杂的就是多对多的关系，需要第三张表，使用db.relationship()设置。</p>\n<h2 id=\"4-数据库操作\"><a href=\"#4-数据库操作\" class=\"headerlink\" title=\"4. 数据库操作\"></a>4. 数据库操作</h2><ul>\n<li>python shell中操作</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python hello.py shell</span><br><span class=\"line\"><span class=\"keyword\">from</span> hello <span class=\"keyword\">import</span> db</span><br><span class=\"line\">db.create_all()</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"flask 第6章(数据库操作2)","date":"2019-01-28T14:22:00.000Z","_content":"\n\n## 创建数据写入数据\n\n```py\n>>> db.create_all()\n>>> from hello import Role,User\n>>> admin_role=Role(name=\"Admin\")\n>>> mod_role = Role(name=\"Moderator\")\n>>> user_role=Role(name=\"User\")\n>>> user_john=User(username=\"john\",role=admin_role)\n>>> user_susan=User(username=\"susan\",role=user_role)\n>>> user_david = Ueser(username=\"david\",role=user_role)\n\n这个时候还没有写入数据库，比如打印\n>>> print(admin_role.id)\nNone\n\n然后可以这样将之前的对象加入到回话中即可\n>>> db.session.add(mod_role)\u0000\u0000\u0000\n>>> db.session.add(user_role)\n>>> db.session.add(user_john)\n>>> db.session.add(user_david)\n>>> db.session.commit() # 没有这一句是不行的。\n\n或者可以全部添加\n>>> db.session.add([admin_role,mod_role,...])\n\n再次查看admin_role.id就有值了\n>>> print admin_role.id\n1\n\n\n```\n\n## 修改一行\n\n```py\n# 比如修改admin_role的name为new_admin\n\n>>> admin_role.name = \"new_admin\"\n>>> db.session.add(admin_role)\n>>> db.session.commit()\n>>> print admin_role.name\nnew_admin\n>>> \n\n\n```\n\n\n## 删除一行\n\n```py\n\tdb.session.delete(mod_role)\n\tdb.session.commit()\n\t\n```\n\n## 查询行\n\n```py\n\n查询2个表所有字段\n>>> Role.query.all()\n[<Role u'Moderator'> , <Role u'new_admin'> , <Role u'User'> ]\n>>> User.query.all()\n[<User u'john'> , <User u'susan'> , <User u'david'> ]\n>>>\n\n```\n\n## 常用的sql过滤器\n\n|过滤器|说明|\n||-|\n|filter|把过滤器添加到查询上，返回一个新查询|\n|filter_by|把等值过滤添加到原查询上，返回一个新查询|\n|limit|指定原查询的数量限制|\n|offset|便宜原查询的结果，返回一个新查询|\n|order_by|根据指定条件对原查询进行排序，返回一个新查询|\n|group_by|执行分组条件|\n\n\n## 过滤器之后可以跟执行函数\n\n|方法|说明|\n|-|-|\n|all|以列表的形式返回所有结果|\n|first|返回查询的第一个结果，没有返回None|\n|first_or_404|返回第一个查询结果，否则终止请求，返回404|\n|get|返回指定主键对应的列，否则返回None|\n|get_or_404|返回指定主键对应的行，否则返回404|\n|count|返回结果数量|\n|paginate|返回一个paginate对象，包含指定范围的结果|\n\n\n\n","source":"_posts/language/python/6_数据库2.md","raw":"---\nlayout: post\ntitle: flask 第6章(数据库操作2)\ncategory: flask\ndate: 2019-01-28 22:22:00\n\n---\n\n\n## 创建数据写入数据\n\n```py\n>>> db.create_all()\n>>> from hello import Role,User\n>>> admin_role=Role(name=\"Admin\")\n>>> mod_role = Role(name=\"Moderator\")\n>>> user_role=Role(name=\"User\")\n>>> user_john=User(username=\"john\",role=admin_role)\n>>> user_susan=User(username=\"susan\",role=user_role)\n>>> user_david = Ueser(username=\"david\",role=user_role)\n\n这个时候还没有写入数据库，比如打印\n>>> print(admin_role.id)\nNone\n\n然后可以这样将之前的对象加入到回话中即可\n>>> db.session.add(mod_role)\u0000\u0000\u0000\n>>> db.session.add(user_role)\n>>> db.session.add(user_john)\n>>> db.session.add(user_david)\n>>> db.session.commit() # 没有这一句是不行的。\n\n或者可以全部添加\n>>> db.session.add([admin_role,mod_role,...])\n\n再次查看admin_role.id就有值了\n>>> print admin_role.id\n1\n\n\n```\n\n## 修改一行\n\n```py\n# 比如修改admin_role的name为new_admin\n\n>>> admin_role.name = \"new_admin\"\n>>> db.session.add(admin_role)\n>>> db.session.commit()\n>>> print admin_role.name\nnew_admin\n>>> \n\n\n```\n\n\n## 删除一行\n\n```py\n\tdb.session.delete(mod_role)\n\tdb.session.commit()\n\t\n```\n\n## 查询行\n\n```py\n\n查询2个表所有字段\n>>> Role.query.all()\n[<Role u'Moderator'> , <Role u'new_admin'> , <Role u'User'> ]\n>>> User.query.all()\n[<User u'john'> , <User u'susan'> , <User u'david'> ]\n>>>\n\n```\n\n## 常用的sql过滤器\n\n|过滤器|说明|\n||-|\n|filter|把过滤器添加到查询上，返回一个新查询|\n|filter_by|把等值过滤添加到原查询上，返回一个新查询|\n|limit|指定原查询的数量限制|\n|offset|便宜原查询的结果，返回一个新查询|\n|order_by|根据指定条件对原查询进行排序，返回一个新查询|\n|group_by|执行分组条件|\n\n\n## 过滤器之后可以跟执行函数\n\n|方法|说明|\n|-|-|\n|all|以列表的形式返回所有结果|\n|first|返回查询的第一个结果，没有返回None|\n|first_or_404|返回第一个查询结果，否则终止请求，返回404|\n|get|返回指定主键对应的列，否则返回None|\n|get_or_404|返回指定主键对应的行，否则返回404|\n|count|返回结果数量|\n|paginate|返回一个paginate对象，包含指定范围的结果|\n\n\n\n","slug":"language/python/6_数据库2","published":1,"updated":"2019-05-19T14:30:17.032Z","comments":1,"photos":[],"link":"","_id":"cjwxes5ee003ihdlifj7pl14x","content":"<h2 id=\"创建数据写入数据\"><a href=\"#创建数据写入数据\" class=\"headerlink\" title=\"创建数据写入数据\"></a>创建数据写入数据</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>db.create_all()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> hello <span class=\"keyword\">import</span> Role,User</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>admin_role=Role(name=<span class=\"string\">\"Admin\"</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>mod_role = Role(name=<span class=\"string\">\"Moderator\"</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_role=Role(name=<span class=\"string\">\"User\"</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_john=User(username=<span class=\"string\">\"john\"</span>,role=admin_role)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_susan=User(username=<span class=\"string\">\"susan\"</span>,role=user_role)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_david = Ueser(username=<span class=\"string\">\"david\"</span>,role=user_role)</span><br><span class=\"line\"></span><br><span class=\"line\">这个时候还没有写入数据库，比如打印</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(admin_role.id)</span><br><span class=\"line\"><span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">然后可以这样将之前的对象加入到回话中即可</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>db.session.add(mod_role)\u0000\u0000\u0000</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>db.session.add(user_role)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>db.session.add(user_john)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>db.session.add(user_david)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>db.session.commit() <span class=\"comment\"># 没有这一句是不行的。</span></span><br><span class=\"line\"></span><br><span class=\"line\">或者可以全部添加</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>db.session.add([admin_role,mod_role,...])</span><br><span class=\"line\"></span><br><span class=\"line\">再次查看admin_role.id就有值了</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> admin_role.id</span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"修改一行\"><a href=\"#修改一行\" class=\"headerlink\" title=\"修改一行\"></a>修改一行</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 比如修改admin_role的name为new_admin</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>admin_role.name = <span class=\"string\">\"new_admin\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>db.session.add(admin_role)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>db.session.commit()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> admin_role.name</span><br><span class=\"line\">new_admin</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除一行\"><a href=\"#删除一行\" class=\"headerlink\" title=\"删除一行\"></a>删除一行</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.session.delete(mod_role)</span><br><span class=\"line\">db.session.commit()</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询行\"><a href=\"#查询行\" class=\"headerlink\" title=\"查询行\"></a>查询行</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">查询<span class=\"number\">2</span>个表所有字段</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Role.query.all()</span><br><span class=\"line\">[&lt;Role <span class=\"string\">u'Moderator'</span>&gt; , &lt;Role <span class=\"string\">u'new_admin'</span>&gt; , &lt;Role <span class=\"string\">u'User'</span>&gt; ]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>User.query.all()</span><br><span class=\"line\">[&lt;User <span class=\"string\">u'john'</span>&gt; , &lt;User <span class=\"string\">u'susan'</span>&gt; , &lt;User <span class=\"string\">u'david'</span>&gt; ]</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用的sql过滤器\"><a href=\"#常用的sql过滤器\" class=\"headerlink\" title=\"常用的sql过滤器\"></a>常用的sql过滤器</h2><p>|过滤器|说明|<br>||-|<br>|filter|把过滤器添加到查询上，返回一个新查询|<br>|filter_by|把等值过滤添加到原查询上，返回一个新查询|<br>|limit|指定原查询的数量限制|<br>|offset|便宜原查询的结果，返回一个新查询|<br>|order_by|根据指定条件对原查询进行排序，返回一个新查询|<br>|group_by|执行分组条件|</p>\n<h2 id=\"过滤器之后可以跟执行函数\"><a href=\"#过滤器之后可以跟执行函数\" class=\"headerlink\" title=\"过滤器之后可以跟执行函数\"></a>过滤器之后可以跟执行函数</h2><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>all</td>\n<td>以列表的形式返回所有结果</td>\n</tr>\n<tr>\n<td>first</td>\n<td>返回查询的第一个结果，没有返回None</td>\n</tr>\n<tr>\n<td>first_or_404</td>\n<td>返回第一个查询结果，否则终止请求，返回404</td>\n</tr>\n<tr>\n<td>get</td>\n<td>返回指定主键对应的列，否则返回None</td>\n</tr>\n<tr>\n<td>get_or_404</td>\n<td>返回指定主键对应的行，否则返回404</td>\n</tr>\n<tr>\n<td>count</td>\n<td>返回结果数量</td>\n</tr>\n<tr>\n<td>paginate</td>\n<td>返回一个paginate对象，包含指定范围的结果</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"创建数据写入数据\"><a href=\"#创建数据写入数据\" class=\"headerlink\" title=\"创建数据写入数据\"></a>创建数据写入数据</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>db.create_all()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> hello <span class=\"keyword\">import</span> Role,User</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>admin_role=Role(name=<span class=\"string\">\"Admin\"</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>mod_role = Role(name=<span class=\"string\">\"Moderator\"</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_role=Role(name=<span class=\"string\">\"User\"</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_john=User(username=<span class=\"string\">\"john\"</span>,role=admin_role)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_susan=User(username=<span class=\"string\">\"susan\"</span>,role=user_role)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_david = Ueser(username=<span class=\"string\">\"david\"</span>,role=user_role)</span><br><span class=\"line\"></span><br><span class=\"line\">这个时候还没有写入数据库，比如打印</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(admin_role.id)</span><br><span class=\"line\"><span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">然后可以这样将之前的对象加入到回话中即可</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>db.session.add(mod_role)\u0000\u0000\u0000</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>db.session.add(user_role)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>db.session.add(user_john)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>db.session.add(user_david)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>db.session.commit() <span class=\"comment\"># 没有这一句是不行的。</span></span><br><span class=\"line\"></span><br><span class=\"line\">或者可以全部添加</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>db.session.add([admin_role,mod_role,...])</span><br><span class=\"line\"></span><br><span class=\"line\">再次查看admin_role.id就有值了</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> admin_role.id</span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"修改一行\"><a href=\"#修改一行\" class=\"headerlink\" title=\"修改一行\"></a>修改一行</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 比如修改admin_role的name为new_admin</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>admin_role.name = <span class=\"string\">\"new_admin\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>db.session.add(admin_role)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>db.session.commit()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> admin_role.name</span><br><span class=\"line\">new_admin</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除一行\"><a href=\"#删除一行\" class=\"headerlink\" title=\"删除一行\"></a>删除一行</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.session.delete(mod_role)</span><br><span class=\"line\">db.session.commit()</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询行\"><a href=\"#查询行\" class=\"headerlink\" title=\"查询行\"></a>查询行</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">查询<span class=\"number\">2</span>个表所有字段</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Role.query.all()</span><br><span class=\"line\">[&lt;Role <span class=\"string\">u'Moderator'</span>&gt; , &lt;Role <span class=\"string\">u'new_admin'</span>&gt; , &lt;Role <span class=\"string\">u'User'</span>&gt; ]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>User.query.all()</span><br><span class=\"line\">[&lt;User <span class=\"string\">u'john'</span>&gt; , &lt;User <span class=\"string\">u'susan'</span>&gt; , &lt;User <span class=\"string\">u'david'</span>&gt; ]</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用的sql过滤器\"><a href=\"#常用的sql过滤器\" class=\"headerlink\" title=\"常用的sql过滤器\"></a>常用的sql过滤器</h2><p>|过滤器|说明|<br>||-|<br>|filter|把过滤器添加到查询上，返回一个新查询|<br>|filter_by|把等值过滤添加到原查询上，返回一个新查询|<br>|limit|指定原查询的数量限制|<br>|offset|便宜原查询的结果，返回一个新查询|<br>|order_by|根据指定条件对原查询进行排序，返回一个新查询|<br>|group_by|执行分组条件|</p>\n<h2 id=\"过滤器之后可以跟执行函数\"><a href=\"#过滤器之后可以跟执行函数\" class=\"headerlink\" title=\"过滤器之后可以跟执行函数\"></a>过滤器之后可以跟执行函数</h2><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>all</td>\n<td>以列表的形式返回所有结果</td>\n</tr>\n<tr>\n<td>first</td>\n<td>返回查询的第一个结果，没有返回None</td>\n</tr>\n<tr>\n<td>first_or_404</td>\n<td>返回第一个查询结果，否则终止请求，返回404</td>\n</tr>\n<tr>\n<td>get</td>\n<td>返回指定主键对应的列，否则返回None</td>\n</tr>\n<tr>\n<td>get_or_404</td>\n<td>返回指定主键对应的行，否则返回404</td>\n</tr>\n<tr>\n<td>count</td>\n<td>返回结果数量</td>\n</tr>\n<tr>\n<td>paginate</td>\n<td>返回一个paginate对象，包含指定范围的结果</td>\n</tr>\n</tbody>\n</table>\n"},{"layout":"post","title":"flask 第7章（数据迁移模块）","date":"2019-02-13T03:41:00.000Z","_content":"\n\n##  安装模块\n\n```py\n\tpip install flask-migrate\n```\n\n## 配置模块\n\n```py\n\t# 导入模块类\n\tfrom flask_migrate import Migrate,MigrateCommand\n\t# ...\n\tmigrate = Migrate(app,db)\n\tmanger.add_command('db', MigrateCommand)\n```\n\n\n## 执行顺序\n\n### 1. 初始化迁移仓库\n```py\npython hello.py db init\n# 会创建migrations 文件夹\n```\n\n### 2. 创建迁移脚本模板\n```py\npython hello.py db migrate -m \"migrate initial\"\n# version文件夹会生成一个py文件里面有2个函数，升级数据库函数upgrade，降级数据库函数downgrade，需要用户自己重写所需操作\n\n```\n\n### 3. 升级更新数据库\n```py\npython hello.py db upgrade \n# 执行该命令会自动执行version目录下的py脚本中的upgrade函数，前提是数据库alembic_version表中没有该版本的升级记录。\n\n# 对于第一个迁移，和db.create_all()方法一样，后续版本升级，upgrade命令会把改动应用到数据库中。\n```\n","source":"_posts/language/python/7_数据迁移.md","raw":"---\nlayout: post\ntitle: flask 第7章（数据迁移模块）\ncategory: flask\ndate: 2019-02-13 11:41:00\n\n---\n\n\n##  安装模块\n\n```py\n\tpip install flask-migrate\n```\n\n## 配置模块\n\n```py\n\t# 导入模块类\n\tfrom flask_migrate import Migrate,MigrateCommand\n\t# ...\n\tmigrate = Migrate(app,db)\n\tmanger.add_command('db', MigrateCommand)\n```\n\n\n## 执行顺序\n\n### 1. 初始化迁移仓库\n```py\npython hello.py db init\n# 会创建migrations 文件夹\n```\n\n### 2. 创建迁移脚本模板\n```py\npython hello.py db migrate -m \"migrate initial\"\n# version文件夹会生成一个py文件里面有2个函数，升级数据库函数upgrade，降级数据库函数downgrade，需要用户自己重写所需操作\n\n```\n\n### 3. 升级更新数据库\n```py\npython hello.py db upgrade \n# 执行该命令会自动执行version目录下的py脚本中的upgrade函数，前提是数据库alembic_version表中没有该版本的升级记录。\n\n# 对于第一个迁移，和db.create_all()方法一样，后续版本升级，upgrade命令会把改动应用到数据库中。\n```\n","slug":"language/python/7_数据迁移","published":1,"updated":"2019-05-19T14:30:17.032Z","comments":1,"photos":[],"link":"","_id":"cjwxes5ef003jhdliayjenyud","content":"<h2 id=\"安装模块\"><a href=\"#安装模块\" class=\"headerlink\" title=\"安装模块\"></a>安装模块</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install flask-migrate</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置模块\"><a href=\"#配置模块\" class=\"headerlink\" title=\"配置模块\"></a>配置模块</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入模块类</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_migrate <span class=\"keyword\">import</span> Migrate,MigrateCommand</span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">migrate = Migrate(app,db)</span><br><span class=\"line\">manger.add_command(<span class=\"string\">'db'</span>, MigrateCommand)</span><br></pre></td></tr></table></figure>\n<h2 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h2><h3 id=\"1-初始化迁移仓库\"><a href=\"#1-初始化迁移仓库\" class=\"headerlink\" title=\"1. 初始化迁移仓库\"></a>1. 初始化迁移仓库</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python hello.py db init</span><br><span class=\"line\"><span class=\"comment\"># 会创建migrations 文件夹</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-创建迁移脚本模板\"><a href=\"#2-创建迁移脚本模板\" class=\"headerlink\" title=\"2. 创建迁移脚本模板\"></a>2. 创建迁移脚本模板</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python hello.py db migrate -m <span class=\"string\">\"migrate initial\"</span></span><br><span class=\"line\"><span class=\"comment\"># version文件夹会生成一个py文件里面有2个函数，升级数据库函数upgrade，降级数据库函数downgrade，需要用户自己重写所需操作</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-升级更新数据库\"><a href=\"#3-升级更新数据库\" class=\"headerlink\" title=\"3. 升级更新数据库\"></a>3. 升级更新数据库</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python hello.py db upgrade </span><br><span class=\"line\"><span class=\"comment\"># 执行该命令会自动执行version目录下的py脚本中的upgrade函数，前提是数据库alembic_version表中没有该版本的升级记录。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对于第一个迁移，和db.create_all()方法一样，后续版本升级，upgrade命令会把改动应用到数据库中。</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装模块\"><a href=\"#安装模块\" class=\"headerlink\" title=\"安装模块\"></a>安装模块</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install flask-migrate</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置模块\"><a href=\"#配置模块\" class=\"headerlink\" title=\"配置模块\"></a>配置模块</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入模块类</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_migrate <span class=\"keyword\">import</span> Migrate,MigrateCommand</span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">migrate = Migrate(app,db)</span><br><span class=\"line\">manger.add_command(<span class=\"string\">'db'</span>, MigrateCommand)</span><br></pre></td></tr></table></figure>\n<h2 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h2><h3 id=\"1-初始化迁移仓库\"><a href=\"#1-初始化迁移仓库\" class=\"headerlink\" title=\"1. 初始化迁移仓库\"></a>1. 初始化迁移仓库</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python hello.py db init</span><br><span class=\"line\"><span class=\"comment\"># 会创建migrations 文件夹</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-创建迁移脚本模板\"><a href=\"#2-创建迁移脚本模板\" class=\"headerlink\" title=\"2. 创建迁移脚本模板\"></a>2. 创建迁移脚本模板</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python hello.py db migrate -m <span class=\"string\">\"migrate initial\"</span></span><br><span class=\"line\"><span class=\"comment\"># version文件夹会生成一个py文件里面有2个函数，升级数据库函数upgrade，降级数据库函数downgrade，需要用户自己重写所需操作</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-升级更新数据库\"><a href=\"#3-升级更新数据库\" class=\"headerlink\" title=\"3. 升级更新数据库\"></a>3. 升级更新数据库</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python hello.py db upgrade </span><br><span class=\"line\"><span class=\"comment\"># 执行该命令会自动执行version目录下的py脚本中的upgrade函数，前提是数据库alembic_version表中没有该版本的升级记录。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对于第一个迁移，和db.create_all()方法一样，后续版本升级，upgrade命令会把改动应用到数据库中。</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"flask 第9章（大型程序目录结构）","date":"2019-02-13T13:18:00.000Z","_content":"\n## 1. 创建目录结构\n```shell\n    mkdir myflask & cd myflask\n\n    touch reuirments.txt\n    touch config.py # 配置\n    touch manger.py \n\n    mkdir app # 一个应用一个app这样的目录\n    touch app/__init__.py # 说明这是一个包\n    touch app/emails.py\n    touch app/models.py\n\n    mkdir app/templates\n    mkdir app/static\n    mkdir app/main\n\n    touch app/main/__init__.py  #为了保存蓝本，整一个子包\n    touch app/main/errors.py\n    touch app/main/forms.py\n    touch app/main/views.py\n\n    # 迁移目录\n    mkdir migrations\n\n    # 单元测试目录\n    mkdir test\n    touch test/__init__.py\n    touch test/test.py\n    \n    # venv  这个目录是虚拟环境目录，命令自动创建\n\n\n\n```\n\n## 2. 代码下载\n\n- 代码太多就不站粘贴了,下面是下载地址，前面是每个章节是一个详细流程，这个结构中上下文这块还不是很懂，继续学习...\n```shell\n\tgit clone https://github.com/wedvefv/my_flask_learn.git\n```\n\n\n\n\n\n\n\n","source":"_posts/language/python/9_大型程序结构.md","raw":"---\nlayout: post\ntitle: flask 第9章（大型程序目录结构）\ncategory: flask\ndate: 2019-02-13 21:18:00\n\n---\n\n## 1. 创建目录结构\n```shell\n    mkdir myflask & cd myflask\n\n    touch reuirments.txt\n    touch config.py # 配置\n    touch manger.py \n\n    mkdir app # 一个应用一个app这样的目录\n    touch app/__init__.py # 说明这是一个包\n    touch app/emails.py\n    touch app/models.py\n\n    mkdir app/templates\n    mkdir app/static\n    mkdir app/main\n\n    touch app/main/__init__.py  #为了保存蓝本，整一个子包\n    touch app/main/errors.py\n    touch app/main/forms.py\n    touch app/main/views.py\n\n    # 迁移目录\n    mkdir migrations\n\n    # 单元测试目录\n    mkdir test\n    touch test/__init__.py\n    touch test/test.py\n    \n    # venv  这个目录是虚拟环境目录，命令自动创建\n\n\n\n```\n\n## 2. 代码下载\n\n- 代码太多就不站粘贴了,下面是下载地址，前面是每个章节是一个详细流程，这个结构中上下文这块还不是很懂，继续学习...\n```shell\n\tgit clone https://github.com/wedvefv/my_flask_learn.git\n```\n\n\n\n\n\n\n\n","slug":"language/python/9_大型程序结构","published":1,"updated":"2019-05-19T14:30:17.032Z","comments":1,"photos":[],"link":"","_id":"cjwxes5eh003mhdlilgzenyal","content":"<h2 id=\"1-创建目录结构\"><a href=\"#1-创建目录结构\" class=\"headerlink\" title=\"1. 创建目录结构\"></a>1. 创建目录结构</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir myflask &amp; cd myflask</span><br><span class=\"line\"></span><br><span class=\"line\">touch reuirments.txt</span><br><span class=\"line\">touch config.py # 配置</span><br><span class=\"line\">touch manger.py </span><br><span class=\"line\"></span><br><span class=\"line\">mkdir app # 一个应用一个app这样的目录</span><br><span class=\"line\">touch app/__init__.py # 说明这是一个包</span><br><span class=\"line\">touch app/emails.py</span><br><span class=\"line\">touch app/models.py</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir app/templates</span><br><span class=\"line\">mkdir app/static</span><br><span class=\"line\">mkdir app/main</span><br><span class=\"line\"></span><br><span class=\"line\">touch app/main/__init__.py  #为了保存蓝本，整一个子包</span><br><span class=\"line\">touch app/main/errors.py</span><br><span class=\"line\">touch app/main/forms.py</span><br><span class=\"line\">touch app/main/views.py</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 迁移目录</span><br><span class=\"line\">mkdir migrations</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 单元测试目录</span><br><span class=\"line\">mkdir test</span><br><span class=\"line\">touch test/__init__.py</span><br><span class=\"line\">touch test/test.py</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> venv  这个目录是虚拟环境目录，命令自动创建</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-代码下载\"><a href=\"#2-代码下载\" class=\"headerlink\" title=\"2. 代码下载\"></a>2. 代码下载</h2><ul>\n<li>代码太多就不站粘贴了,下面是下载地址，前面是每个章节是一个详细流程，这个结构中上下文这块还不是很懂，继续学习…<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/wedvefv/my_flask_learn.git</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-创建目录结构\"><a href=\"#1-创建目录结构\" class=\"headerlink\" title=\"1. 创建目录结构\"></a>1. 创建目录结构</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir myflask &amp; cd myflask</span><br><span class=\"line\"></span><br><span class=\"line\">touch reuirments.txt</span><br><span class=\"line\">touch config.py # 配置</span><br><span class=\"line\">touch manger.py </span><br><span class=\"line\"></span><br><span class=\"line\">mkdir app # 一个应用一个app这样的目录</span><br><span class=\"line\">touch app/__init__.py # 说明这是一个包</span><br><span class=\"line\">touch app/emails.py</span><br><span class=\"line\">touch app/models.py</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir app/templates</span><br><span class=\"line\">mkdir app/static</span><br><span class=\"line\">mkdir app/main</span><br><span class=\"line\"></span><br><span class=\"line\">touch app/main/__init__.py  #为了保存蓝本，整一个子包</span><br><span class=\"line\">touch app/main/errors.py</span><br><span class=\"line\">touch app/main/forms.py</span><br><span class=\"line\">touch app/main/views.py</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 迁移目录</span><br><span class=\"line\">mkdir migrations</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 单元测试目录</span><br><span class=\"line\">mkdir test</span><br><span class=\"line\">touch test/__init__.py</span><br><span class=\"line\">touch test/test.py</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> venv  这个目录是虚拟环境目录，命令自动创建</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-代码下载\"><a href=\"#2-代码下载\" class=\"headerlink\" title=\"2. 代码下载\"></a>2. 代码下载</h2><ul>\n<li>代码太多就不站粘贴了,下面是下载地址，前面是每个章节是一个详细流程，这个结构中上下文这块还不是很懂，继续学习…<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/wedvefv/my_flask_learn.git</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"layout":"post","title":"flask 第8章（邮件模块）","date":"2019-02-13T03:57:00.000Z","_content":"\n\n\n##  安装模块\n```py\npip install flask-mail\n```\n\n## smtp配置\n\n* smtp 简单邮件传输协议,如果不配置，默认使用localhost主机，25端口，无需验证即可发送邮件\n*  如果配置，这使用配置的服务器发送mail\n\n## smtp 配置选项\n\n|配置| 默认值|说明|\n|-|-|-|\n|MAIL_SERVER|localhost|电子邮件服务器的主机名或ip地址|\n|MAIL_PORT|25|电子邮件服务器的端口|\n|MAIL_USE_TLS|False|启用传输层安全|\n|MAIL_USE_SSL|False|启用安全套接层|\n|MAIL_USERNAME|None|邮件账户名|\n|MAIL_PASSWORD|None|邮件账户密码|\n\n\n## 整个hello.py文件\n\n```py\n#coding=utf=8\nimport pymysql\npymysql.install_as_MySQLdb()\n\nimport MySQLdb,os\n# 引入核心模块和模板加载模块\nfrom flask import Flask, render_template,session,redirect,url_for,flash\n# 引入bootstrap前端框架\nfrom flask_bootstrap import Bootstrap\n# 引入时间模块,实现了momment.js\nfrom flask_moment import Moment\n# 引入manage模块，服务器启动参数控制\nfrom flask_script import Manager\n# 引入表单模块\nfrom flask_wtf import FlaskForm\n# 引入表单字段类\nfrom wtforms import StringField,SubmitField\n# 引入表单验证函数\nfrom wtforms.validators import Required\n# 导入数据库包\nfrom flask_sqlalchemy import SQLAlchemy\n# 导入数据迁移模块\nfrom flask_migrate import Migrate,MigrateCommand\n# 导入mail 模块\nfrom flask_mail import Mail,Message\n# 每个web表单都有一个继承自FlaskForm的类表示,所以先定义一个类\nclass NameForm(FlaskForm):\n    name = StringField(\"what is your name ?\",validators=[Required()]) # 字段对象可附加多个验证函数，所以是列表, Required确保非空\n    submit = SubmitField(\"Submit1\")\n\n\napp = Flask(__name__)\n# 生成加密令牌的密钥,再用令牌验证请求的表单数据真伪\napp.config['SECRET_KEY'] = 'this random string！'\n\n# 数据库配置\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://appwriter:appwr@zxcv@127.0.0.1/flask1?charset=utf8\"\napp.config[\"SQLALCHEMY_COMMIT_ON_TEARDOWN\"] = True # 请求结束自动提交数据库变动\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = True # 这行不能缺\n\n# MAIL 配置\napp.config[\"MAIL_SERVER\"] = 'smtp.qq.com' ## qq邮箱smtp服务器\napp.config['MAIL_PORT']= 25\napp.config['MAIL_USE_TLS'] = False\napp.config['MAIL_USERNAME'] = os.environ.get('MAIL_USERNAME') #qq邮箱\napp.config['MAIL_PASSWORD'] = os.environ.get('MAIL_PASSWORD') #qq邮箱客户端登录授权码，相当于密码\n\napp.config['FLASK_MAIL_SUBJECT_PREFIX'] = '[Flasky]'\napp.config['FLASK_MAIL_SENDER'] = 'FLASK Admin<%s>' % os.environ.get('MAIL_USERNAME') #发送者\napp.config['FLASK_ADMIN'] = os.environ.get(\"FLASK_ADMIN\")\nprint app.config['FLASK_ADMIN']\n#SQLALCHEMY_COMMIT_TEARDOWN = True\n\ndb = SQLAlchemy(app) # 数据库实例 模型继承于db.model, 模型在python就是一个类，数据库中是一个表，类属性就是表字段\n\nbootstrap = Bootstrap(app)\nmoment = Moment(app)\nmanager = Manager(app)\nmigrate = Migrate(app, db)\nmanager.add_command('db',  MigrateCommand)\nmail = Mail(app)\n\n# 定义模型\nclass Role(db.Model):\n    __tablename__ = 'roles'\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(64),unique=True)\n    users = db.relationship(\"User\", backref='role')\n\n    def __repr__(self):\n        return '<Role %r> ' % self.name\n\nclass User(db.Model):\n    __tablename__ = \"users\"\n    id = db.Column(db.Integer,primary_key=True)\n    username = db.Column(db.String(64),unique=True)\n    role_id = db.Column(db.Integer, db.ForeignKey('roles.id'))\n\n    \n    def __repr__(self):\n        return '<User %r> ' % self.username\n\n@app.errorhandler(404)\ndef page_not_found(e):\n    return render_template('404.html'), 404\n\n\n@app.errorhandler(500)\ndef internal_server_error(e):\n    return render_template('500.html'), 500\n\n\n@app.route('/1', methods=['GET', 'POST'])\ndef index1():\n    form = NameForm()\n    if form.validate_on_submit():\n        old_name = session.get(\"name\")\n        if old_name is not None and old_name != form.name.data:\n            flash(\"your are changing your name .\")\n        session[\"name\"] = form.name.data\n        return redirect(url_for(\"index\")) # 一般endpoint就是视图函数名\n    return render_template(\"index.html\", form=form, name = session.get('name'))\n    #return render_template(\"index.html\", form=form, name = None)\n\n\n@app.route(\"/\", methods=['GET','POST'])\ndef index():\n    form = NameForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(username=form.name.data).first()\n        if user is None:\n            user = User(username=form.name.data)\n            db.session.add(user)\n            session['known'] = False\n        else:\n            session['known'] = True\n        session['name'] = form.name.data\n        form.name.data = ''\n        return redirect(url_for(\"index\"))\n    return render_template(\"index.html\", form = form, name = session.get(\"name\"), known=session.get('known',False) )\n\n\ndef send_email(to, subject, template, **kwargs):\n\tmsg = Message(app.config['FLASK_MAIL_SUBJECT_PREFIX'] + subject,\n\tsender=app.config['FLASK_MAIL_SENDER'], recipients=[to])      \n\t#msg.body = render_template(template + '.txt', **kwargs)\n\tmsg.html = render_template(template + '.html',**kwargs)\n\tmail.send(msg)\n\t\n@app.route(\"/mail\", methods=['GET','POST'])\ndef index2():\n\tprint 90\n\tform = NameForm()\n\tif form.validate_on_submit():\n\t\tuser = User.query.filter_by(username=form.name.data).first() # 如果数据库没有这个name，说明是新用户，就给管理员发封邮件。\n\t\t#print \"2222\", user\n\t\tif user is None:\n\t\t\tuser = User(username=form.name.data)\n\t\t\tdb.session.add(user)\n\t\t\tsession['known'] = False\n\t\t\tif app.config['FLASK_ADMIN']:\n\t\t\t\t#print \"123\",app.config['FLASK_ADMIN']\n\t\t\t\tsend_email(app.config['FLASK_ADMIN'], 'New User', 'mail/new_user',user=user)\n\t\telse:\n\t\t\tsession['known'] = True\n\t\tsession['name'] = form.name.data\n\t\tform.name.data = ''\n\t\treturn redirect(url_for('index2'))\n\treturn render_template('index.html',form=form,name=session.get('name'),known=session.get('known',False))\n\n\n\nif __name__ == \"__main__\":\n    manager.run()\n```\n\n## 邮件模板\n```py\n\tmkdir template/mail\n\ttouch template/mail/new_user.html\n\t写入邮件模板,用户提交用户名时，向ADMIN发送一封邮件。\n\tUser {{ user.username }} has joined.\n\t\n```\n\n\n## 需要配置的环境变量\n```py\nvim /etc/profile\nexport MAIL_USERNAME='' # 比如qq邮箱账号\nexport MAIL_PASSWORD='' # 如果是qq邮箱，这里是qq邮箱的客户端授权码，需要短信验证生成\nexport FLASK_ADMIN='' # 这封邮件的接受者\n\n```\n\n\n\n\n\n\n","source":"_posts/language/python/8_邮件模块.md","raw":"---\nlayout: post\ntitle: flask 第8章（邮件模块）\ncategory: flask\ndate: 2019-02-13 11:57:00\n\n---\n\n\n\n##  安装模块\n```py\npip install flask-mail\n```\n\n## smtp配置\n\n* smtp 简单邮件传输协议,如果不配置，默认使用localhost主机，25端口，无需验证即可发送邮件\n*  如果配置，这使用配置的服务器发送mail\n\n## smtp 配置选项\n\n|配置| 默认值|说明|\n|-|-|-|\n|MAIL_SERVER|localhost|电子邮件服务器的主机名或ip地址|\n|MAIL_PORT|25|电子邮件服务器的端口|\n|MAIL_USE_TLS|False|启用传输层安全|\n|MAIL_USE_SSL|False|启用安全套接层|\n|MAIL_USERNAME|None|邮件账户名|\n|MAIL_PASSWORD|None|邮件账户密码|\n\n\n## 整个hello.py文件\n\n```py\n#coding=utf=8\nimport pymysql\npymysql.install_as_MySQLdb()\n\nimport MySQLdb,os\n# 引入核心模块和模板加载模块\nfrom flask import Flask, render_template,session,redirect,url_for,flash\n# 引入bootstrap前端框架\nfrom flask_bootstrap import Bootstrap\n# 引入时间模块,实现了momment.js\nfrom flask_moment import Moment\n# 引入manage模块，服务器启动参数控制\nfrom flask_script import Manager\n# 引入表单模块\nfrom flask_wtf import FlaskForm\n# 引入表单字段类\nfrom wtforms import StringField,SubmitField\n# 引入表单验证函数\nfrom wtforms.validators import Required\n# 导入数据库包\nfrom flask_sqlalchemy import SQLAlchemy\n# 导入数据迁移模块\nfrom flask_migrate import Migrate,MigrateCommand\n# 导入mail 模块\nfrom flask_mail import Mail,Message\n# 每个web表单都有一个继承自FlaskForm的类表示,所以先定义一个类\nclass NameForm(FlaskForm):\n    name = StringField(\"what is your name ?\",validators=[Required()]) # 字段对象可附加多个验证函数，所以是列表, Required确保非空\n    submit = SubmitField(\"Submit1\")\n\n\napp = Flask(__name__)\n# 生成加密令牌的密钥,再用令牌验证请求的表单数据真伪\napp.config['SECRET_KEY'] = 'this random string！'\n\n# 数据库配置\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://appwriter:appwr@zxcv@127.0.0.1/flask1?charset=utf8\"\napp.config[\"SQLALCHEMY_COMMIT_ON_TEARDOWN\"] = True # 请求结束自动提交数据库变动\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = True # 这行不能缺\n\n# MAIL 配置\napp.config[\"MAIL_SERVER\"] = 'smtp.qq.com' ## qq邮箱smtp服务器\napp.config['MAIL_PORT']= 25\napp.config['MAIL_USE_TLS'] = False\napp.config['MAIL_USERNAME'] = os.environ.get('MAIL_USERNAME') #qq邮箱\napp.config['MAIL_PASSWORD'] = os.environ.get('MAIL_PASSWORD') #qq邮箱客户端登录授权码，相当于密码\n\napp.config['FLASK_MAIL_SUBJECT_PREFIX'] = '[Flasky]'\napp.config['FLASK_MAIL_SENDER'] = 'FLASK Admin<%s>' % os.environ.get('MAIL_USERNAME') #发送者\napp.config['FLASK_ADMIN'] = os.environ.get(\"FLASK_ADMIN\")\nprint app.config['FLASK_ADMIN']\n#SQLALCHEMY_COMMIT_TEARDOWN = True\n\ndb = SQLAlchemy(app) # 数据库实例 模型继承于db.model, 模型在python就是一个类，数据库中是一个表，类属性就是表字段\n\nbootstrap = Bootstrap(app)\nmoment = Moment(app)\nmanager = Manager(app)\nmigrate = Migrate(app, db)\nmanager.add_command('db',  MigrateCommand)\nmail = Mail(app)\n\n# 定义模型\nclass Role(db.Model):\n    __tablename__ = 'roles'\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(64),unique=True)\n    users = db.relationship(\"User\", backref='role')\n\n    def __repr__(self):\n        return '<Role %r> ' % self.name\n\nclass User(db.Model):\n    __tablename__ = \"users\"\n    id = db.Column(db.Integer,primary_key=True)\n    username = db.Column(db.String(64),unique=True)\n    role_id = db.Column(db.Integer, db.ForeignKey('roles.id'))\n\n    \n    def __repr__(self):\n        return '<User %r> ' % self.username\n\n@app.errorhandler(404)\ndef page_not_found(e):\n    return render_template('404.html'), 404\n\n\n@app.errorhandler(500)\ndef internal_server_error(e):\n    return render_template('500.html'), 500\n\n\n@app.route('/1', methods=['GET', 'POST'])\ndef index1():\n    form = NameForm()\n    if form.validate_on_submit():\n        old_name = session.get(\"name\")\n        if old_name is not None and old_name != form.name.data:\n            flash(\"your are changing your name .\")\n        session[\"name\"] = form.name.data\n        return redirect(url_for(\"index\")) # 一般endpoint就是视图函数名\n    return render_template(\"index.html\", form=form, name = session.get('name'))\n    #return render_template(\"index.html\", form=form, name = None)\n\n\n@app.route(\"/\", methods=['GET','POST'])\ndef index():\n    form = NameForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(username=form.name.data).first()\n        if user is None:\n            user = User(username=form.name.data)\n            db.session.add(user)\n            session['known'] = False\n        else:\n            session['known'] = True\n        session['name'] = form.name.data\n        form.name.data = ''\n        return redirect(url_for(\"index\"))\n    return render_template(\"index.html\", form = form, name = session.get(\"name\"), known=session.get('known',False) )\n\n\ndef send_email(to, subject, template, **kwargs):\n\tmsg = Message(app.config['FLASK_MAIL_SUBJECT_PREFIX'] + subject,\n\tsender=app.config['FLASK_MAIL_SENDER'], recipients=[to])      \n\t#msg.body = render_template(template + '.txt', **kwargs)\n\tmsg.html = render_template(template + '.html',**kwargs)\n\tmail.send(msg)\n\t\n@app.route(\"/mail\", methods=['GET','POST'])\ndef index2():\n\tprint 90\n\tform = NameForm()\n\tif form.validate_on_submit():\n\t\tuser = User.query.filter_by(username=form.name.data).first() # 如果数据库没有这个name，说明是新用户，就给管理员发封邮件。\n\t\t#print \"2222\", user\n\t\tif user is None:\n\t\t\tuser = User(username=form.name.data)\n\t\t\tdb.session.add(user)\n\t\t\tsession['known'] = False\n\t\t\tif app.config['FLASK_ADMIN']:\n\t\t\t\t#print \"123\",app.config['FLASK_ADMIN']\n\t\t\t\tsend_email(app.config['FLASK_ADMIN'], 'New User', 'mail/new_user',user=user)\n\t\telse:\n\t\t\tsession['known'] = True\n\t\tsession['name'] = form.name.data\n\t\tform.name.data = ''\n\t\treturn redirect(url_for('index2'))\n\treturn render_template('index.html',form=form,name=session.get('name'),known=session.get('known',False))\n\n\n\nif __name__ == \"__main__\":\n    manager.run()\n```\n\n## 邮件模板\n```py\n\tmkdir template/mail\n\ttouch template/mail/new_user.html\n\t写入邮件模板,用户提交用户名时，向ADMIN发送一封邮件。\n\tUser {{ user.username }} has joined.\n\t\n```\n\n\n## 需要配置的环境变量\n```py\nvim /etc/profile\nexport MAIL_USERNAME='' # 比如qq邮箱账号\nexport MAIL_PASSWORD='' # 如果是qq邮箱，这里是qq邮箱的客户端授权码，需要短信验证生成\nexport FLASK_ADMIN='' # 这封邮件的接受者\n\n```\n\n\n\n\n\n\n","slug":"language/python/8_邮件模块","published":1,"updated":"2019-05-19T14:30:17.032Z","comments":1,"photos":[],"link":"","_id":"cjwxes5ei003nhdliov1e4vvg","content":"<h2 id=\"安装模块\"><a href=\"#安装模块\" class=\"headerlink\" title=\"安装模块\"></a>安装模块</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install flask-mail</span><br></pre></td></tr></table></figure>\n<h2 id=\"smtp配置\"><a href=\"#smtp配置\" class=\"headerlink\" title=\"smtp配置\"></a>smtp配置</h2><ul>\n<li>smtp 简单邮件传输协议,如果不配置，默认使用localhost主机，25端口，无需验证即可发送邮件</li>\n<li>如果配置，这使用配置的服务器发送mail</li>\n</ul>\n<h2 id=\"smtp-配置选项\"><a href=\"#smtp-配置选项\" class=\"headerlink\" title=\"smtp 配置选项\"></a>smtp 配置选项</h2><table>\n<thead>\n<tr>\n<th>配置</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MAIL_SERVER</td>\n<td>localhost</td>\n<td>电子邮件服务器的主机名或ip地址</td>\n</tr>\n<tr>\n<td>MAIL_PORT</td>\n<td>25</td>\n<td>电子邮件服务器的端口</td>\n</tr>\n<tr>\n<td>MAIL_USE_TLS</td>\n<td>False</td>\n<td>启用传输层安全</td>\n</tr>\n<tr>\n<td>MAIL_USE_SSL</td>\n<td>False</td>\n<td>启用安全套接层</td>\n</tr>\n<tr>\n<td>MAIL_USERNAME</td>\n<td>None</td>\n<td>邮件账户名</td>\n</tr>\n<tr>\n<td>MAIL_PASSWORD</td>\n<td>None</td>\n<td>邮件账户密码</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"整个hello-py文件\"><a href=\"#整个hello-py文件\" class=\"headerlink\" title=\"整个hello.py文件\"></a>整个hello.py文件</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding=utf=8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\">pymysql.install_as_MySQLdb()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> MySQLdb,os</span><br><span class=\"line\"><span class=\"comment\"># 引入核心模块和模板加载模块</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template,session,redirect,url_for,flash</span><br><span class=\"line\"><span class=\"comment\"># 引入bootstrap前端框架</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_bootstrap <span class=\"keyword\">import</span> Bootstrap</span><br><span class=\"line\"><span class=\"comment\"># 引入时间模块,实现了momment.js</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_moment <span class=\"keyword\">import</span> Moment</span><br><span class=\"line\"><span class=\"comment\"># 引入manage模块，服务器启动参数控制</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_script <span class=\"keyword\">import</span> Manager</span><br><span class=\"line\"><span class=\"comment\"># 引入表单模块</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_wtf <span class=\"keyword\">import</span> FlaskForm</span><br><span class=\"line\"><span class=\"comment\"># 引入表单字段类</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> wtforms <span class=\"keyword\">import</span> StringField,SubmitField</span><br><span class=\"line\"><span class=\"comment\"># 引入表单验证函数</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> wtforms.validators <span class=\"keyword\">import</span> Required</span><br><span class=\"line\"><span class=\"comment\"># 导入数据库包</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_sqlalchemy <span class=\"keyword\">import</span> SQLAlchemy</span><br><span class=\"line\"><span class=\"comment\"># 导入数据迁移模块</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_migrate <span class=\"keyword\">import</span> Migrate,MigrateCommand</span><br><span class=\"line\"><span class=\"comment\"># 导入mail 模块</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_mail <span class=\"keyword\">import</span> Mail,Message</span><br><span class=\"line\"><span class=\"comment\"># 每个web表单都有一个继承自FlaskForm的类表示,所以先定义一个类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameForm</span><span class=\"params\">(FlaskForm)</span>:</span></span><br><span class=\"line\">    name = StringField(<span class=\"string\">\"what is your name ?\"</span>,validators=[Required()]) <span class=\"comment\"># 字段对象可附加多个验证函数，所以是列表, Required确保非空</span></span><br><span class=\"line\">    submit = SubmitField(<span class=\"string\">\"Submit1\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"><span class=\"comment\"># 生成加密令牌的密钥,再用令牌验证请求的表单数据真伪</span></span><br><span class=\"line\">app.config[<span class=\"string\">'SECRET_KEY'</span>] = <span class=\"string\">'this random string！'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据库配置</span></span><br><span class=\"line\">app.config[<span class=\"string\">\"SQLALCHEMY_DATABASE_URI\"</span>] = <span class=\"string\">\"mysql://appwriter:appwr@zxcv@127.0.0.1/flask1?charset=utf8\"</span></span><br><span class=\"line\">app.config[<span class=\"string\">\"SQLALCHEMY_COMMIT_ON_TEARDOWN\"</span>] = <span class=\"keyword\">True</span> <span class=\"comment\"># 请求结束自动提交数据库变动</span></span><br><span class=\"line\">app.config[<span class=\"string\">\"SQLALCHEMY_TRACK_MODIFICATIONS\"</span>] = <span class=\"keyword\">True</span> <span class=\"comment\"># 这行不能缺</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># MAIL 配置</span></span><br><span class=\"line\">app.config[<span class=\"string\">\"MAIL_SERVER\"</span>] = <span class=\"string\">'smtp.qq.com'</span> <span class=\"comment\">## qq邮箱smtp服务器</span></span><br><span class=\"line\">app.config[<span class=\"string\">'MAIL_PORT'</span>]= <span class=\"number\">25</span></span><br><span class=\"line\">app.config[<span class=\"string\">'MAIL_USE_TLS'</span>] = <span class=\"keyword\">False</span></span><br><span class=\"line\">app.config[<span class=\"string\">'MAIL_USERNAME'</span>] = os.environ.get(<span class=\"string\">'MAIL_USERNAME'</span>) <span class=\"comment\">#qq邮箱</span></span><br><span class=\"line\">app.config[<span class=\"string\">'MAIL_PASSWORD'</span>] = os.environ.get(<span class=\"string\">'MAIL_PASSWORD'</span>) <span class=\"comment\">#qq邮箱客户端登录授权码，相当于密码</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.config[<span class=\"string\">'FLASK_MAIL_SUBJECT_PREFIX'</span>] = <span class=\"string\">'[Flasky]'</span></span><br><span class=\"line\">app.config[<span class=\"string\">'FLASK_MAIL_SENDER'</span>] = <span class=\"string\">'FLASK Admin&lt;%s&gt;'</span> % os.environ.get(<span class=\"string\">'MAIL_USERNAME'</span>) <span class=\"comment\">#发送者</span></span><br><span class=\"line\">app.config[<span class=\"string\">'FLASK_ADMIN'</span>] = os.environ.get(<span class=\"string\">\"FLASK_ADMIN\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> app.config[<span class=\"string\">'FLASK_ADMIN'</span>]</span><br><span class=\"line\"><span class=\"comment\">#SQLALCHEMY_COMMIT_TEARDOWN = True</span></span><br><span class=\"line\"></span><br><span class=\"line\">db = SQLAlchemy(app) <span class=\"comment\"># 数据库实例 模型继承于db.model, 模型在python就是一个类，数据库中是一个表，类属性就是表字段</span></span><br><span class=\"line\"></span><br><span class=\"line\">bootstrap = Bootstrap(app)</span><br><span class=\"line\">moment = Moment(app)</span><br><span class=\"line\">manager = Manager(app)</span><br><span class=\"line\">migrate = Migrate(app, db)</span><br><span class=\"line\">manager.add_command(<span class=\"string\">'db'</span>,  MigrateCommand)</span><br><span class=\"line\">mail = Mail(app)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义模型</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Role</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'roles'</span></span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    name = db.Column(db.String(<span class=\"number\">64</span>),unique=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    users = db.relationship(<span class=\"string\">\"User\"</span>, backref=<span class=\"string\">'role'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;Role %r&gt; '</span> % self.name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">\"users\"</span></span><br><span class=\"line\">    id = db.Column(db.Integer,primary_key=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    username = db.Column(db.String(<span class=\"number\">64</span>),unique=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    role_id = db.Column(db.Integer, db.ForeignKey(<span class=\"string\">'roles.id'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;User %r&gt; '</span> % self.username</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.errorhandler(404)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">page_not_found</span><span class=\"params\">(e)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'404.html'</span>), <span class=\"number\">404</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.errorhandler(500)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">internal_server_error</span><span class=\"params\">(e)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'500.html'</span>), <span class=\"number\">500</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/1', methods=['GET', 'POST'])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    form = NameForm()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> form.validate_on_submit():</span><br><span class=\"line\">        old_name = session.get(<span class=\"string\">\"name\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> old_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span> <span class=\"keyword\">and</span> old_name != form.name.data:</span><br><span class=\"line\">            flash(<span class=\"string\">\"your are changing your name .\"</span>)</span><br><span class=\"line\">        session[<span class=\"string\">\"name\"</span>] = form.name.data</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">\"index\"</span>)) <span class=\"comment\"># 一般endpoint就是视图函数名</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">\"index.html\"</span>, form=form, name = session.get(<span class=\"string\">'name'</span>))</span><br><span class=\"line\">    <span class=\"comment\">#return render_template(\"index.html\", form=form, name = None)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(\"/\", methods=['GET','POST'])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    form = NameForm()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> form.validate_on_submit():</span><br><span class=\"line\">        user = User.query.filter_by(username=form.name.data).first()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> user <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            user = User(username=form.name.data)</span><br><span class=\"line\">            db.session.add(user)</span><br><span class=\"line\">            session[<span class=\"string\">'known'</span>] = <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            session[<span class=\"string\">'known'</span>] = <span class=\"keyword\">True</span></span><br><span class=\"line\">        session[<span class=\"string\">'name'</span>] = form.name.data</span><br><span class=\"line\">        form.name.data = <span class=\"string\">''</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">\"index\"</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">\"index.html\"</span>, form = form, name = session.get(<span class=\"string\">\"name\"</span>), known=session.get(<span class=\"string\">'known'</span>,<span class=\"keyword\">False</span>) )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_email</span><span class=\"params\">(to, subject, template, **kwargs)</span>:</span></span><br><span class=\"line\">\tmsg = Message(app.config[<span class=\"string\">'FLASK_MAIL_SUBJECT_PREFIX'</span>] + subject,</span><br><span class=\"line\">\tsender=app.config[<span class=\"string\">'FLASK_MAIL_SENDER'</span>], recipients=[to])      </span><br><span class=\"line\">\t<span class=\"comment\">#msg.body = render_template(template + '.txt', **kwargs)</span></span><br><span class=\"line\">\tmsg.html = render_template(template + <span class=\"string\">'.html'</span>,**kwargs)</span><br><span class=\"line\">\tmail.send(msg)</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"meta\">@app.route(\"/mail\", methods=['GET','POST'])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index2</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"number\">90</span></span><br><span class=\"line\">\tform = NameForm()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> form.validate_on_submit():</span><br><span class=\"line\">\t\tuser = User.query.filter_by(username=form.name.data).first() <span class=\"comment\"># 如果数据库没有这个name，说明是新用户，就给管理员发封邮件。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">#print \"2222\", user</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> user <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">\t\t\tuser = User(username=form.name.data)</span><br><span class=\"line\">\t\t\tdb.session.add(user)</span><br><span class=\"line\">\t\t\tsession[<span class=\"string\">'known'</span>] = <span class=\"keyword\">False</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> app.config[<span class=\"string\">'FLASK_ADMIN'</span>]:</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">#print \"123\",app.config['FLASK_ADMIN']</span></span><br><span class=\"line\">\t\t\t\tsend_email(app.config[<span class=\"string\">'FLASK_ADMIN'</span>], <span class=\"string\">'New User'</span>, <span class=\"string\">'mail/new_user'</span>,user=user)</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\tsession[<span class=\"string\">'known'</span>] = <span class=\"keyword\">True</span></span><br><span class=\"line\">\t\tsession[<span class=\"string\">'name'</span>] = form.name.data</span><br><span class=\"line\">\t\tform.name.data = <span class=\"string\">''</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">'index2'</span>))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> render_template(<span class=\"string\">'index.html'</span>,form=form,name=session.get(<span class=\"string\">'name'</span>),known=session.get(<span class=\"string\">'known'</span>,<span class=\"keyword\">False</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    manager.run()</span><br></pre></td></tr></table></figure>\n<h2 id=\"邮件模板\"><a href=\"#邮件模板\" class=\"headerlink\" title=\"邮件模板\"></a>邮件模板</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir template/mail</span><br><span class=\"line\">touch template/mail/new_user.html</span><br><span class=\"line\">写入邮件模板,用户提交用户名时，向ADMIN发送一封邮件。</span><br><span class=\"line\">User &#123;&#123; user.username &#125;&#125; has joined.</span><br></pre></td></tr></table></figure>\n<h2 id=\"需要配置的环境变量\"><a href=\"#需要配置的环境变量\" class=\"headerlink\" title=\"需要配置的环境变量\"></a>需要配置的环境变量</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">export MAIL_USERNAME=<span class=\"string\">''</span> <span class=\"comment\"># 比如qq邮箱账号</span></span><br><span class=\"line\">export MAIL_PASSWORD=<span class=\"string\">''</span> <span class=\"comment\"># 如果是qq邮箱，这里是qq邮箱的客户端授权码，需要短信验证生成</span></span><br><span class=\"line\">export FLASK_ADMIN=<span class=\"string\">''</span> <span class=\"comment\"># 这封邮件的接受者</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装模块\"><a href=\"#安装模块\" class=\"headerlink\" title=\"安装模块\"></a>安装模块</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install flask-mail</span><br></pre></td></tr></table></figure>\n<h2 id=\"smtp配置\"><a href=\"#smtp配置\" class=\"headerlink\" title=\"smtp配置\"></a>smtp配置</h2><ul>\n<li>smtp 简单邮件传输协议,如果不配置，默认使用localhost主机，25端口，无需验证即可发送邮件</li>\n<li>如果配置，这使用配置的服务器发送mail</li>\n</ul>\n<h2 id=\"smtp-配置选项\"><a href=\"#smtp-配置选项\" class=\"headerlink\" title=\"smtp 配置选项\"></a>smtp 配置选项</h2><table>\n<thead>\n<tr>\n<th>配置</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MAIL_SERVER</td>\n<td>localhost</td>\n<td>电子邮件服务器的主机名或ip地址</td>\n</tr>\n<tr>\n<td>MAIL_PORT</td>\n<td>25</td>\n<td>电子邮件服务器的端口</td>\n</tr>\n<tr>\n<td>MAIL_USE_TLS</td>\n<td>False</td>\n<td>启用传输层安全</td>\n</tr>\n<tr>\n<td>MAIL_USE_SSL</td>\n<td>False</td>\n<td>启用安全套接层</td>\n</tr>\n<tr>\n<td>MAIL_USERNAME</td>\n<td>None</td>\n<td>邮件账户名</td>\n</tr>\n<tr>\n<td>MAIL_PASSWORD</td>\n<td>None</td>\n<td>邮件账户密码</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"整个hello-py文件\"><a href=\"#整个hello-py文件\" class=\"headerlink\" title=\"整个hello.py文件\"></a>整个hello.py文件</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding=utf=8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\">pymysql.install_as_MySQLdb()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> MySQLdb,os</span><br><span class=\"line\"><span class=\"comment\"># 引入核心模块和模板加载模块</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template,session,redirect,url_for,flash</span><br><span class=\"line\"><span class=\"comment\"># 引入bootstrap前端框架</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_bootstrap <span class=\"keyword\">import</span> Bootstrap</span><br><span class=\"line\"><span class=\"comment\"># 引入时间模块,实现了momment.js</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_moment <span class=\"keyword\">import</span> Moment</span><br><span class=\"line\"><span class=\"comment\"># 引入manage模块，服务器启动参数控制</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_script <span class=\"keyword\">import</span> Manager</span><br><span class=\"line\"><span class=\"comment\"># 引入表单模块</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_wtf <span class=\"keyword\">import</span> FlaskForm</span><br><span class=\"line\"><span class=\"comment\"># 引入表单字段类</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> wtforms <span class=\"keyword\">import</span> StringField,SubmitField</span><br><span class=\"line\"><span class=\"comment\"># 引入表单验证函数</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> wtforms.validators <span class=\"keyword\">import</span> Required</span><br><span class=\"line\"><span class=\"comment\"># 导入数据库包</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_sqlalchemy <span class=\"keyword\">import</span> SQLAlchemy</span><br><span class=\"line\"><span class=\"comment\"># 导入数据迁移模块</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_migrate <span class=\"keyword\">import</span> Migrate,MigrateCommand</span><br><span class=\"line\"><span class=\"comment\"># 导入mail 模块</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_mail <span class=\"keyword\">import</span> Mail,Message</span><br><span class=\"line\"><span class=\"comment\"># 每个web表单都有一个继承自FlaskForm的类表示,所以先定义一个类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameForm</span><span class=\"params\">(FlaskForm)</span>:</span></span><br><span class=\"line\">    name = StringField(<span class=\"string\">\"what is your name ?\"</span>,validators=[Required()]) <span class=\"comment\"># 字段对象可附加多个验证函数，所以是列表, Required确保非空</span></span><br><span class=\"line\">    submit = SubmitField(<span class=\"string\">\"Submit1\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"><span class=\"comment\"># 生成加密令牌的密钥,再用令牌验证请求的表单数据真伪</span></span><br><span class=\"line\">app.config[<span class=\"string\">'SECRET_KEY'</span>] = <span class=\"string\">'this random string！'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据库配置</span></span><br><span class=\"line\">app.config[<span class=\"string\">\"SQLALCHEMY_DATABASE_URI\"</span>] = <span class=\"string\">\"mysql://appwriter:appwr@zxcv@127.0.0.1/flask1?charset=utf8\"</span></span><br><span class=\"line\">app.config[<span class=\"string\">\"SQLALCHEMY_COMMIT_ON_TEARDOWN\"</span>] = <span class=\"keyword\">True</span> <span class=\"comment\"># 请求结束自动提交数据库变动</span></span><br><span class=\"line\">app.config[<span class=\"string\">\"SQLALCHEMY_TRACK_MODIFICATIONS\"</span>] = <span class=\"keyword\">True</span> <span class=\"comment\"># 这行不能缺</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># MAIL 配置</span></span><br><span class=\"line\">app.config[<span class=\"string\">\"MAIL_SERVER\"</span>] = <span class=\"string\">'smtp.qq.com'</span> <span class=\"comment\">## qq邮箱smtp服务器</span></span><br><span class=\"line\">app.config[<span class=\"string\">'MAIL_PORT'</span>]= <span class=\"number\">25</span></span><br><span class=\"line\">app.config[<span class=\"string\">'MAIL_USE_TLS'</span>] = <span class=\"keyword\">False</span></span><br><span class=\"line\">app.config[<span class=\"string\">'MAIL_USERNAME'</span>] = os.environ.get(<span class=\"string\">'MAIL_USERNAME'</span>) <span class=\"comment\">#qq邮箱</span></span><br><span class=\"line\">app.config[<span class=\"string\">'MAIL_PASSWORD'</span>] = os.environ.get(<span class=\"string\">'MAIL_PASSWORD'</span>) <span class=\"comment\">#qq邮箱客户端登录授权码，相当于密码</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.config[<span class=\"string\">'FLASK_MAIL_SUBJECT_PREFIX'</span>] = <span class=\"string\">'[Flasky]'</span></span><br><span class=\"line\">app.config[<span class=\"string\">'FLASK_MAIL_SENDER'</span>] = <span class=\"string\">'FLASK Admin&lt;%s&gt;'</span> % os.environ.get(<span class=\"string\">'MAIL_USERNAME'</span>) <span class=\"comment\">#发送者</span></span><br><span class=\"line\">app.config[<span class=\"string\">'FLASK_ADMIN'</span>] = os.environ.get(<span class=\"string\">\"FLASK_ADMIN\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> app.config[<span class=\"string\">'FLASK_ADMIN'</span>]</span><br><span class=\"line\"><span class=\"comment\">#SQLALCHEMY_COMMIT_TEARDOWN = True</span></span><br><span class=\"line\"></span><br><span class=\"line\">db = SQLAlchemy(app) <span class=\"comment\"># 数据库实例 模型继承于db.model, 模型在python就是一个类，数据库中是一个表，类属性就是表字段</span></span><br><span class=\"line\"></span><br><span class=\"line\">bootstrap = Bootstrap(app)</span><br><span class=\"line\">moment = Moment(app)</span><br><span class=\"line\">manager = Manager(app)</span><br><span class=\"line\">migrate = Migrate(app, db)</span><br><span class=\"line\">manager.add_command(<span class=\"string\">'db'</span>,  MigrateCommand)</span><br><span class=\"line\">mail = Mail(app)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义模型</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Role</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'roles'</span></span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    name = db.Column(db.String(<span class=\"number\">64</span>),unique=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    users = db.relationship(<span class=\"string\">\"User\"</span>, backref=<span class=\"string\">'role'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;Role %r&gt; '</span> % self.name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">\"users\"</span></span><br><span class=\"line\">    id = db.Column(db.Integer,primary_key=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    username = db.Column(db.String(<span class=\"number\">64</span>),unique=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    role_id = db.Column(db.Integer, db.ForeignKey(<span class=\"string\">'roles.id'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;User %r&gt; '</span> % self.username</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.errorhandler(404)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">page_not_found</span><span class=\"params\">(e)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'404.html'</span>), <span class=\"number\">404</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.errorhandler(500)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">internal_server_error</span><span class=\"params\">(e)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'500.html'</span>), <span class=\"number\">500</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/1', methods=['GET', 'POST'])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    form = NameForm()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> form.validate_on_submit():</span><br><span class=\"line\">        old_name = session.get(<span class=\"string\">\"name\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> old_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span> <span class=\"keyword\">and</span> old_name != form.name.data:</span><br><span class=\"line\">            flash(<span class=\"string\">\"your are changing your name .\"</span>)</span><br><span class=\"line\">        session[<span class=\"string\">\"name\"</span>] = form.name.data</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">\"index\"</span>)) <span class=\"comment\"># 一般endpoint就是视图函数名</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">\"index.html\"</span>, form=form, name = session.get(<span class=\"string\">'name'</span>))</span><br><span class=\"line\">    <span class=\"comment\">#return render_template(\"index.html\", form=form, name = None)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(\"/\", methods=['GET','POST'])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    form = NameForm()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> form.validate_on_submit():</span><br><span class=\"line\">        user = User.query.filter_by(username=form.name.data).first()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> user <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            user = User(username=form.name.data)</span><br><span class=\"line\">            db.session.add(user)</span><br><span class=\"line\">            session[<span class=\"string\">'known'</span>] = <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            session[<span class=\"string\">'known'</span>] = <span class=\"keyword\">True</span></span><br><span class=\"line\">        session[<span class=\"string\">'name'</span>] = form.name.data</span><br><span class=\"line\">        form.name.data = <span class=\"string\">''</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">\"index\"</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">\"index.html\"</span>, form = form, name = session.get(<span class=\"string\">\"name\"</span>), known=session.get(<span class=\"string\">'known'</span>,<span class=\"keyword\">False</span>) )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_email</span><span class=\"params\">(to, subject, template, **kwargs)</span>:</span></span><br><span class=\"line\">\tmsg = Message(app.config[<span class=\"string\">'FLASK_MAIL_SUBJECT_PREFIX'</span>] + subject,</span><br><span class=\"line\">\tsender=app.config[<span class=\"string\">'FLASK_MAIL_SENDER'</span>], recipients=[to])      </span><br><span class=\"line\">\t<span class=\"comment\">#msg.body = render_template(template + '.txt', **kwargs)</span></span><br><span class=\"line\">\tmsg.html = render_template(template + <span class=\"string\">'.html'</span>,**kwargs)</span><br><span class=\"line\">\tmail.send(msg)</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"meta\">@app.route(\"/mail\", methods=['GET','POST'])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index2</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"number\">90</span></span><br><span class=\"line\">\tform = NameForm()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> form.validate_on_submit():</span><br><span class=\"line\">\t\tuser = User.query.filter_by(username=form.name.data).first() <span class=\"comment\"># 如果数据库没有这个name，说明是新用户，就给管理员发封邮件。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">#print \"2222\", user</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> user <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">\t\t\tuser = User(username=form.name.data)</span><br><span class=\"line\">\t\t\tdb.session.add(user)</span><br><span class=\"line\">\t\t\tsession[<span class=\"string\">'known'</span>] = <span class=\"keyword\">False</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> app.config[<span class=\"string\">'FLASK_ADMIN'</span>]:</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">#print \"123\",app.config['FLASK_ADMIN']</span></span><br><span class=\"line\">\t\t\t\tsend_email(app.config[<span class=\"string\">'FLASK_ADMIN'</span>], <span class=\"string\">'New User'</span>, <span class=\"string\">'mail/new_user'</span>,user=user)</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\tsession[<span class=\"string\">'known'</span>] = <span class=\"keyword\">True</span></span><br><span class=\"line\">\t\tsession[<span class=\"string\">'name'</span>] = form.name.data</span><br><span class=\"line\">\t\tform.name.data = <span class=\"string\">''</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">'index2'</span>))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> render_template(<span class=\"string\">'index.html'</span>,form=form,name=session.get(<span class=\"string\">'name'</span>),known=session.get(<span class=\"string\">'known'</span>,<span class=\"keyword\">False</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    manager.run()</span><br></pre></td></tr></table></figure>\n<h2 id=\"邮件模板\"><a href=\"#邮件模板\" class=\"headerlink\" title=\"邮件模板\"></a>邮件模板</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir template/mail</span><br><span class=\"line\">touch template/mail/new_user.html</span><br><span class=\"line\">写入邮件模板,用户提交用户名时，向ADMIN发送一封邮件。</span><br><span class=\"line\">User &#123;&#123; user.username &#125;&#125; has joined.</span><br></pre></td></tr></table></figure>\n<h2 id=\"需要配置的环境变量\"><a href=\"#需要配置的环境变量\" class=\"headerlink\" title=\"需要配置的环境变量\"></a>需要配置的环境变量</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">export MAIL_USERNAME=<span class=\"string\">''</span> <span class=\"comment\"># 比如qq邮箱账号</span></span><br><span class=\"line\">export MAIL_PASSWORD=<span class=\"string\">''</span> <span class=\"comment\"># 如果是qq邮箱，这里是qq邮箱的客户端授权码，需要短信验证生成</span></span><br><span class=\"line\">export FLASK_ADMIN=<span class=\"string\">''</span> <span class=\"comment\"># 这封邮件的接受者</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"html5标签","date":"2016-08-10T03:30:55.000Z","comments":1,"_content":"\n\n# html5标签总结\n\n```html\n\n1. <!---->       注释\n2. <!DOCTYPE>    定义html文本类型\n3. <a>           定义超链接\n4. <abbr>        把一段字符串用缩写表示<abbr title =\"People world\">PW </abbr>\n5. <address>     在article元素内部，表示该文章的作者身份信息\n6. <applet>      定义嵌入的applet ，html5不支持了。请用object代替\n7. <acronym>     html5不支持了，请用<abbr代替哦\n8. <area>        标签定义图像映射内部的区域，图像中部分区域可以点击，就是说有链接的\n9. 两栏式架构   \n    |header---------------------------------------------------------------------------------------|顶部\n    |nav------------------------------------------------------------------------------------------|外链\n    |article---包含<section>-----------------<aside>--------------------------|文章主体--段落或章节-侧边栏\n    |footer---------------------------------------------------------------------------------------|底部\n   以前都是用<div id=\"header\">  <div id =\"nav\">......\n   这样来定义页面的结构，html5新定义了这些，避免div太多混乱.\n\n10. <aside>     可用于文章的侧边栏\n11. <audio>     定义声音链接\n12. <b>         定义粗体字体，强调\n13. <base>      放在head里面，用于页面中的链接的基地址。后面的链接就可以写相对地址了。\n                比如base =www.xxx000.com/img  ,链接一个图片就可以不写全路径，直接src=\"xxx.jpeg\"\n14. <basefont>  html不支持了。设置文档中所有字体的默认颜色，大小\n15. <bdi>       通过脱离父元素的文本设置方向\n16. <bdo>       定义文本方向，指定dir属性是rtl还是ltr\n17. <big>       html不支持了。请用css控制 ，制作更大的文本\n18. <blockquote>摘自另一个源的块引用\n19. <body>      定义文档主体\n20. <br >       换行符\n21. <button>    定义按钮，多种属性，可以是按钮，提交，重置.....\n22. <canvas>    只是承载图形的容器。需要script脚本绘制图形，然后传给canvas标签中\n23. <caption>   放在table后面，定义表格的标题的\n24. <canter>    5不支持了，请用CSS定义居中\n25. <cite>      定义歌曲，影视，书籍等作品的标题\n26. <code>      HTML5 <em> <strong> <dfn> <code> <samp> <kbd> <var> <cite> 等短标签，\n                不推荐使用了。css能有更丰富的表现\n27. <col>       只能在table或者colgroup元素内使用，定义一列或多列表格的属性值。默认\n                至少一列，只有span属性能用了，其他的用css\n28. <colgroup>  里面只能有col元素 H5已经不支持大部分属性了，用于对表格中的列进行组合，\n                并格式化。要区别于col\n29. <command>   可以指定消息事件处理函数。目前只支持ＩＥ\n30. <datalist>  定义选项列表。和input元素配合使用，对于输入框提示作用\n31. <dd>　　　  dl定义列表，dt定义项目,dd对项目进行描述\n32. <del>       定义已经删除的文本。中划线\n33. <details>   描述文档中的某个细节。目前只chrome支持\n34. <div>       定义文档中的分割和部分。以便对块元素进行格式化。\n35. <dl>        定义一个list　配合dt和dd使用。dt是项目。dd是项目具体描述\n36. <em>        被强调的文本。一般配合css使用啦。\n37. <embed>     定义嵌入的内容。属性src=\"\"\n38. <fieldset>  表单中 配合legend标签定义fieldset的标题。相当与通过legend定义的标题话一个框框,\\\n                把许多表单元素圈住。\n39. <figcaptio> 标签定义 figure 元素的标题（caption）。\n40. <figure>    标签规定独立的流内容（图像、图表、照片、代码等等）。定义的内容与主内容无关，              定义的内容不存在时也不对文档有影响\n41. <font>      H5不支持了，请用CSS\n42. <footer>    定义页脚，作者信息等等\n43. <form>      form 元素包含一个或多个表单元素，比如：\n                button\n                input\n                keygen\n                object\n                output\n                select\n                textarea\n\n44. <frame>     H5不支持了。\n45. <frameset>  5也不支持了。\n46. <h1-h6>     定义标题大小\n47. <head>      头部元素，下面是可用在 head 部分的标签：\n                base\n                link\n                meta\n                script\n                style\n                title\n48. <header>    定义文档的页眉\n49. <hgroup>    对标题进行组合 .H5的新标签\n50. <hr>        定义主题变化，表现为一条水平线。\n51. <html>      定义html文档\n52. <i>         斜体。应该使用CSS\n53. <iframe>    创建包含另个文档的内嵌框架。\n54. <img>       必须要的两个属性src和alt（指定图片表述，以备图片无法加载时显示文字）\n55. <input>     定义用户的输入字段，根据不同的 type 属性，输入字段有多种形态。输入字段可以是 文本字段、复选框、密码字段、单选按钮、按钮等等。\n56. <ins>       地难以插入文本，一般和del一起使用。ins定义的文字会加入下划线\n57. <keygen>    类似input,定义表单的密钥生成器字段。H5新标签\n58.  <kbd>      表示文本是键盘输入的\n59. <label>     input标签配合使用。点击label标签定义的文字，相当与自动点击input控件\n60.  <legend>   给一下元素定义标题的：<fieldset>、<figure>、<details>。\n61.  <li>       定义列表项。在<ul>标签和<ol>标签中使用/有序和无序列表\n62. <link>      文档链接外部资源的。大部分用来链接外部样式表css文件\n63.  <map>      定义图像区域映射，name属性和ｉｍｇ的usemap属性关联，包含area元素。\n64. <mark>      突出显示文本。文本背景黄色。\n65. <menu>      标签定义菜单列表。用于排列表单控件\n\n                <menu>\n                <li><input type=\"checkbox\" />Red</li>\n                <li><input type=\"checkbox\" />blue</li>\n                </menu>\n\n67. <meta>      定义页面相关信息。位于head中定义关键词，利于搜索引擎检索：\n\n                <meta name=\"keywords\" content=\"HTML, CSS, XML, XHTML, JavaScript\" />\n                定义对页面的描述：\n                <meta name=\"description\" content=\"w3c html web 技术标准教程。\" />\n                每５秒刷新一次页面：\n                <meta http-equiv=\"refresh\" content=\"5\" />\n\n68. <meter>     定义度量范围，可以用属性,max/min　也可以用文本中定义范围。\n69. <nav>       定义导航栏的链接的部分\n70. <noframes>  H5不支持了，用于不能显示框架的时候提示文本\n71. <noscript>  当不支持脚本时。显示提示的文本\n72. <object>    定义一个嵌入的对象，多媒体等。图像请使用ｉｍｇ代替。大部分html4中的属性H5不支持了。\n73. <ol>        有序列表\n74. <optgroup>  组合选项：\n\n              <select>\n              <optgroup label=\"Swedish Cars\">\n              <option value =\"volvo\">Volvo</option>\n              <option value =\"saab\">Saab</option>\n              </optgroup>\n              <optgroup label=\"German Cars\">\n              <option value =\"mercedes\">Mercedes</option>\n              <option value =\"audi\">Audi</option>\n              </optgroup>\n              </select>\n\n75. <optlon>    定义一个下拉列表选项：\n76.\n              <select>\n              <option value=\"volvo\">Volvo</option>\n              <option value=\"saab\">Saab</option>\n              <option value=\"opel\" selected=\"selected\">Opel</option>\n              <option value=\"audi\">Audi</option>\n              </select>\n\n76. <output>    标签定义不同类型的输出，比如脚本的输出。:\n\n              <form oninput=\"x.value=parseInt(a.value)+parseInt(b.value)\">0<input type=\"range\" id=\"a\" value=\"50\">100+<input type=\"number\" id=\"b\" value=\"50\">\n              =<output name=\"x\" for=\"a b\"></output>\n              </form>\n              计算0-100的随机数加50＝多少，<input type=\"range\" id=\"a\" value=\"50\">表示一个随机滚动条。\n\n77. <p>         段落\n78. <param>     http://www.w3chtml.com/html5/tag/param.html\n79. <pre>       文本原样输出。不会改变格式\n80. <progress>  表示时间函数有关的进度条：\n\n                <progress>\n                <span id=\"objprogress\">85</span>%\n                </progress>\n\n81. <q>         短引用，cite属性指定来源地址，显示是会插入了一个引号，表示后面的内容是引用的内容。\n82. <rp>        指示不支持ruby元素时，显示的文本注释\n83. <ruby>      显示中文注音或者字符。里面用<rt>和<rp>元素包裹。\n84. <s>         增加删除线文本。H5不支持了。请用css，\n85. <samp>      如下标签都是不推荐使用的，请用css样式表，更好。\n    <em>        呈现为被强调的文本。\n    <strong>    定义重要的文本。\n    <dfn>       定义一个定义项目。\n    <code>      定义计算机代码文本。\n    <samp>      定义样本文本。\n    <kbd>       定义键盘文本。它表示文本是从键盘上键入的。它经常用在与计算机相关的文档或手册中。\n    <var>       定义变量。您可以将此标签与 <pre> 及 <code> 标签配合使用。\n    <cite>      定义引用。可使用该标签对参考文献的引用进行定义，比如书籍或杂志的标题。\n86. <script>    javascript脚本置于其中。可链接外部ｊｓ脚本，一般脚本用于图像操作，表单验证和动态内容更改。\n87. <select>    多个option标签置于其中，形成选择下拉列表。\n88. <small>     小型文本，一般作为旁注信息\n89. <source>    多媒体资源标签：\n\n                <audio controls>\n                <source src=\"horse.ogg\" type=\"audio/ogg\">\n                <source src=\"horse.mp3\" type=\"audio/mpeg\">\n                Your browser does not support the audio element.\n                </audio>\n\n90 .<span>      对文档中行内元素进行分组。一遍对单独的一组文本进行样式控制。\n91 .<strike>    加删除线。请用del代替。不建议使用，用css吧\n92. <strong>    加粗文本\n93. <style>     html插入样式信息标签。\n94 .<sub>       定义上标文本，相当于脚注信息\n95. <summary>   <datails>元素的地一个元素，定义details的标题内容。\n96. <sup>       定义上标文本，相当于脚注信息\n97. <table>     定义表格　<tr>定义一行,<th>定义表的第一行头。<td>定义表的内容\n\n                <table border=\"1\">\n                <tr>\n                <th>月份</th>\n                <th>存款</th>\n                </tr>\n                <tr>\n                <td>一月</td>\n                <td>1000 元</td>\n                </tr>\n                </table>\n\n98. <tbody>     表格的正文部分。H５已废除\n99. <td>        表格内容行\n100. <textarea> 文本域，相当于MFC中的编辑框\n101. <tfoot> \t  表格的页脚部分，H5已废除\n102. <th>       表格的头一行\n103. <thead>    表格的头部分，需要有tr行\n104. <time>     定义时间或者日期，目前浏览器还都不支持\n105 .<title>    浏览器显示的标题\n106. <tr>       定义表格中的行\n107. <track>    为视频媒体文件制定外部文本轨道。比如字幕啥的。目前浏览器还不要支持此标签。\n\n                <video width=\"320\" height=\"240\" controls=\"controls\">\n                <source src=\"forrest_gump.mp4\" type=\"video/mp4\" />\n                <source src=\"forrest_gump.ogg\" type=\"video/ogg\" />\n                <track kind=\"subtitles\" src=\"subs_chi.srt\" srclang=\"zh\" label=\"Chinese\">\n                <track kind=\"subtitles\" src=\"subs_eng.srt\" srclang=\"en\" label=\"English\">\n                </video>\n\n108. <tt>       定义打印机文本。目前h5已经不支持了。\n109. <u>        下划线。目前已不支持\n110. <ul>       无需列表。\n111. <var>      定义变量。您可以将此标签与 <pre> 及 <code> 标签配合使用。\n112. <video>    视频标签：\n                <video src=\"movie.ogg\" controls=\"controls\">\n                您的浏览器不支持 video 标签。\n                </video>\n\n113. <wbr>      标志在何处适合加入换行符，避免有些单词加入换行符没拆开，不明意义。\n114. <rt>       在ruby元素中加入汉字的注音：\n\n                <ruby>\n                漢 <rt> ㄏㄢˋ </rt>\n                </ruby>\n\n115. <section>  定义区段。页眉，页脚.......\n116. <label>    定义一个选项组的标注\t\t\n```\n","source":"_posts/language/html/html5_tags.md","raw":"---\nlayout: post\ntitle: html5标签\ncategory: html\ndate: 2016-8-10 11:30:55\ntags: html5\ncomments: true\n\n---\n\n\n# html5标签总结\n\n```html\n\n1. <!---->       注释\n2. <!DOCTYPE>    定义html文本类型\n3. <a>           定义超链接\n4. <abbr>        把一段字符串用缩写表示<abbr title =\"People world\">PW </abbr>\n5. <address>     在article元素内部，表示该文章的作者身份信息\n6. <applet>      定义嵌入的applet ，html5不支持了。请用object代替\n7. <acronym>     html5不支持了，请用<abbr代替哦\n8. <area>        标签定义图像映射内部的区域，图像中部分区域可以点击，就是说有链接的\n9. 两栏式架构   \n    |header---------------------------------------------------------------------------------------|顶部\n    |nav------------------------------------------------------------------------------------------|外链\n    |article---包含<section>-----------------<aside>--------------------------|文章主体--段落或章节-侧边栏\n    |footer---------------------------------------------------------------------------------------|底部\n   以前都是用<div id=\"header\">  <div id =\"nav\">......\n   这样来定义页面的结构，html5新定义了这些，避免div太多混乱.\n\n10. <aside>     可用于文章的侧边栏\n11. <audio>     定义声音链接\n12. <b>         定义粗体字体，强调\n13. <base>      放在head里面，用于页面中的链接的基地址。后面的链接就可以写相对地址了。\n                比如base =www.xxx000.com/img  ,链接一个图片就可以不写全路径，直接src=\"xxx.jpeg\"\n14. <basefont>  html不支持了。设置文档中所有字体的默认颜色，大小\n15. <bdi>       通过脱离父元素的文本设置方向\n16. <bdo>       定义文本方向，指定dir属性是rtl还是ltr\n17. <big>       html不支持了。请用css控制 ，制作更大的文本\n18. <blockquote>摘自另一个源的块引用\n19. <body>      定义文档主体\n20. <br >       换行符\n21. <button>    定义按钮，多种属性，可以是按钮，提交，重置.....\n22. <canvas>    只是承载图形的容器。需要script脚本绘制图形，然后传给canvas标签中\n23. <caption>   放在table后面，定义表格的标题的\n24. <canter>    5不支持了，请用CSS定义居中\n25. <cite>      定义歌曲，影视，书籍等作品的标题\n26. <code>      HTML5 <em> <strong> <dfn> <code> <samp> <kbd> <var> <cite> 等短标签，\n                不推荐使用了。css能有更丰富的表现\n27. <col>       只能在table或者colgroup元素内使用，定义一列或多列表格的属性值。默认\n                至少一列，只有span属性能用了，其他的用css\n28. <colgroup>  里面只能有col元素 H5已经不支持大部分属性了，用于对表格中的列进行组合，\n                并格式化。要区别于col\n29. <command>   可以指定消息事件处理函数。目前只支持ＩＥ\n30. <datalist>  定义选项列表。和input元素配合使用，对于输入框提示作用\n31. <dd>　　　  dl定义列表，dt定义项目,dd对项目进行描述\n32. <del>       定义已经删除的文本。中划线\n33. <details>   描述文档中的某个细节。目前只chrome支持\n34. <div>       定义文档中的分割和部分。以便对块元素进行格式化。\n35. <dl>        定义一个list　配合dt和dd使用。dt是项目。dd是项目具体描述\n36. <em>        被强调的文本。一般配合css使用啦。\n37. <embed>     定义嵌入的内容。属性src=\"\"\n38. <fieldset>  表单中 配合legend标签定义fieldset的标题。相当与通过legend定义的标题话一个框框,\\\n                把许多表单元素圈住。\n39. <figcaptio> 标签定义 figure 元素的标题（caption）。\n40. <figure>    标签规定独立的流内容（图像、图表、照片、代码等等）。定义的内容与主内容无关，              定义的内容不存在时也不对文档有影响\n41. <font>      H5不支持了，请用CSS\n42. <footer>    定义页脚，作者信息等等\n43. <form>      form 元素包含一个或多个表单元素，比如：\n                button\n                input\n                keygen\n                object\n                output\n                select\n                textarea\n\n44. <frame>     H5不支持了。\n45. <frameset>  5也不支持了。\n46. <h1-h6>     定义标题大小\n47. <head>      头部元素，下面是可用在 head 部分的标签：\n                base\n                link\n                meta\n                script\n                style\n                title\n48. <header>    定义文档的页眉\n49. <hgroup>    对标题进行组合 .H5的新标签\n50. <hr>        定义主题变化，表现为一条水平线。\n51. <html>      定义html文档\n52. <i>         斜体。应该使用CSS\n53. <iframe>    创建包含另个文档的内嵌框架。\n54. <img>       必须要的两个属性src和alt（指定图片表述，以备图片无法加载时显示文字）\n55. <input>     定义用户的输入字段，根据不同的 type 属性，输入字段有多种形态。输入字段可以是 文本字段、复选框、密码字段、单选按钮、按钮等等。\n56. <ins>       地难以插入文本，一般和del一起使用。ins定义的文字会加入下划线\n57. <keygen>    类似input,定义表单的密钥生成器字段。H5新标签\n58.  <kbd>      表示文本是键盘输入的\n59. <label>     input标签配合使用。点击label标签定义的文字，相当与自动点击input控件\n60.  <legend>   给一下元素定义标题的：<fieldset>、<figure>、<details>。\n61.  <li>       定义列表项。在<ul>标签和<ol>标签中使用/有序和无序列表\n62. <link>      文档链接外部资源的。大部分用来链接外部样式表css文件\n63.  <map>      定义图像区域映射，name属性和ｉｍｇ的usemap属性关联，包含area元素。\n64. <mark>      突出显示文本。文本背景黄色。\n65. <menu>      标签定义菜单列表。用于排列表单控件\n\n                <menu>\n                <li><input type=\"checkbox\" />Red</li>\n                <li><input type=\"checkbox\" />blue</li>\n                </menu>\n\n67. <meta>      定义页面相关信息。位于head中定义关键词，利于搜索引擎检索：\n\n                <meta name=\"keywords\" content=\"HTML, CSS, XML, XHTML, JavaScript\" />\n                定义对页面的描述：\n                <meta name=\"description\" content=\"w3c html web 技术标准教程。\" />\n                每５秒刷新一次页面：\n                <meta http-equiv=\"refresh\" content=\"5\" />\n\n68. <meter>     定义度量范围，可以用属性,max/min　也可以用文本中定义范围。\n69. <nav>       定义导航栏的链接的部分\n70. <noframes>  H5不支持了，用于不能显示框架的时候提示文本\n71. <noscript>  当不支持脚本时。显示提示的文本\n72. <object>    定义一个嵌入的对象，多媒体等。图像请使用ｉｍｇ代替。大部分html4中的属性H5不支持了。\n73. <ol>        有序列表\n74. <optgroup>  组合选项：\n\n              <select>\n              <optgroup label=\"Swedish Cars\">\n              <option value =\"volvo\">Volvo</option>\n              <option value =\"saab\">Saab</option>\n              </optgroup>\n              <optgroup label=\"German Cars\">\n              <option value =\"mercedes\">Mercedes</option>\n              <option value =\"audi\">Audi</option>\n              </optgroup>\n              </select>\n\n75. <optlon>    定义一个下拉列表选项：\n76.\n              <select>\n              <option value=\"volvo\">Volvo</option>\n              <option value=\"saab\">Saab</option>\n              <option value=\"opel\" selected=\"selected\">Opel</option>\n              <option value=\"audi\">Audi</option>\n              </select>\n\n76. <output>    标签定义不同类型的输出，比如脚本的输出。:\n\n              <form oninput=\"x.value=parseInt(a.value)+parseInt(b.value)\">0<input type=\"range\" id=\"a\" value=\"50\">100+<input type=\"number\" id=\"b\" value=\"50\">\n              =<output name=\"x\" for=\"a b\"></output>\n              </form>\n              计算0-100的随机数加50＝多少，<input type=\"range\" id=\"a\" value=\"50\">表示一个随机滚动条。\n\n77. <p>         段落\n78. <param>     http://www.w3chtml.com/html5/tag/param.html\n79. <pre>       文本原样输出。不会改变格式\n80. <progress>  表示时间函数有关的进度条：\n\n                <progress>\n                <span id=\"objprogress\">85</span>%\n                </progress>\n\n81. <q>         短引用，cite属性指定来源地址，显示是会插入了一个引号，表示后面的内容是引用的内容。\n82. <rp>        指示不支持ruby元素时，显示的文本注释\n83. <ruby>      显示中文注音或者字符。里面用<rt>和<rp>元素包裹。\n84. <s>         增加删除线文本。H5不支持了。请用css，\n85. <samp>      如下标签都是不推荐使用的，请用css样式表，更好。\n    <em>        呈现为被强调的文本。\n    <strong>    定义重要的文本。\n    <dfn>       定义一个定义项目。\n    <code>      定义计算机代码文本。\n    <samp>      定义样本文本。\n    <kbd>       定义键盘文本。它表示文本是从键盘上键入的。它经常用在与计算机相关的文档或手册中。\n    <var>       定义变量。您可以将此标签与 <pre> 及 <code> 标签配合使用。\n    <cite>      定义引用。可使用该标签对参考文献的引用进行定义，比如书籍或杂志的标题。\n86. <script>    javascript脚本置于其中。可链接外部ｊｓ脚本，一般脚本用于图像操作，表单验证和动态内容更改。\n87. <select>    多个option标签置于其中，形成选择下拉列表。\n88. <small>     小型文本，一般作为旁注信息\n89. <source>    多媒体资源标签：\n\n                <audio controls>\n                <source src=\"horse.ogg\" type=\"audio/ogg\">\n                <source src=\"horse.mp3\" type=\"audio/mpeg\">\n                Your browser does not support the audio element.\n                </audio>\n\n90 .<span>      对文档中行内元素进行分组。一遍对单独的一组文本进行样式控制。\n91 .<strike>    加删除线。请用del代替。不建议使用，用css吧\n92. <strong>    加粗文本\n93. <style>     html插入样式信息标签。\n94 .<sub>       定义上标文本，相当于脚注信息\n95. <summary>   <datails>元素的地一个元素，定义details的标题内容。\n96. <sup>       定义上标文本，相当于脚注信息\n97. <table>     定义表格　<tr>定义一行,<th>定义表的第一行头。<td>定义表的内容\n\n                <table border=\"1\">\n                <tr>\n                <th>月份</th>\n                <th>存款</th>\n                </tr>\n                <tr>\n                <td>一月</td>\n                <td>1000 元</td>\n                </tr>\n                </table>\n\n98. <tbody>     表格的正文部分。H５已废除\n99. <td>        表格内容行\n100. <textarea> 文本域，相当于MFC中的编辑框\n101. <tfoot> \t  表格的页脚部分，H5已废除\n102. <th>       表格的头一行\n103. <thead>    表格的头部分，需要有tr行\n104. <time>     定义时间或者日期，目前浏览器还都不支持\n105 .<title>    浏览器显示的标题\n106. <tr>       定义表格中的行\n107. <track>    为视频媒体文件制定外部文本轨道。比如字幕啥的。目前浏览器还不要支持此标签。\n\n                <video width=\"320\" height=\"240\" controls=\"controls\">\n                <source src=\"forrest_gump.mp4\" type=\"video/mp4\" />\n                <source src=\"forrest_gump.ogg\" type=\"video/ogg\" />\n                <track kind=\"subtitles\" src=\"subs_chi.srt\" srclang=\"zh\" label=\"Chinese\">\n                <track kind=\"subtitles\" src=\"subs_eng.srt\" srclang=\"en\" label=\"English\">\n                </video>\n\n108. <tt>       定义打印机文本。目前h5已经不支持了。\n109. <u>        下划线。目前已不支持\n110. <ul>       无需列表。\n111. <var>      定义变量。您可以将此标签与 <pre> 及 <code> 标签配合使用。\n112. <video>    视频标签：\n                <video src=\"movie.ogg\" controls=\"controls\">\n                您的浏览器不支持 video 标签。\n                </video>\n\n113. <wbr>      标志在何处适合加入换行符，避免有些单词加入换行符没拆开，不明意义。\n114. <rt>       在ruby元素中加入汉字的注音：\n\n                <ruby>\n                漢 <rt> ㄏㄢˋ </rt>\n                </ruby>\n\n115. <section>  定义区段。页眉，页脚.......\n116. <label>    定义一个选项组的标注\t\t\n```\n","slug":"language/html/html5_tags","published":1,"updated":"2019-05-19T14:30:17.030Z","photos":[],"link":"","_id":"cjwxes5er0046hdli10rfmihy","content":"<h1 id=\"html5标签总结\"><a href=\"#html5标签总结\" class=\"headerlink\" title=\"html5标签总结\"></a>html5标签总结</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">1. <span class=\"comment\">&lt;!----&gt;</span>       注释</span><br><span class=\"line\">2. <span class=\"meta\">&lt;!DOCTYPE&gt;</span>    定义html文本类型</span><br><span class=\"line\">3. <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>           定义超链接</span><br><span class=\"line\">4. <span class=\"tag\">&lt;<span class=\"name\">abbr</span>&gt;</span>        把一段字符串用缩写表示<span class=\"tag\">&lt;<span class=\"name\">abbr</span> <span class=\"attr\">title</span> =<span class=\"string\">\"People world\"</span>&gt;</span>PW <span class=\"tag\">&lt;/<span class=\"name\">abbr</span>&gt;</span></span><br><span class=\"line\">5. <span class=\"tag\">&lt;<span class=\"name\">address</span>&gt;</span>     在article元素内部，表示该文章的作者身份信息</span><br><span class=\"line\">6. <span class=\"tag\">&lt;<span class=\"name\">applet</span>&gt;</span>      定义嵌入的applet ，html5不支持了。请用object代替</span><br><span class=\"line\">7. <span class=\"tag\">&lt;<span class=\"name\">acronym</span>&gt;</span>     html5不支持了，请用<span class=\"tag\">&lt;<span class=\"name\">abbr代替哦</span></span></span><br><span class=\"line\">8. &lt;area&gt;        标签定义图像映射内部的区域，图像中部分区域可以点击，就是说有链接的</span><br><span class=\"line\">9. 两栏式架构   </span><br><span class=\"line\">    |header---------------------------------------------------------------------------------------|顶部</span><br><span class=\"line\">    |nav------------------------------------------------------------------------------------------|外链</span><br><span class=\"line\">    |article---包含<span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span>-----------------<span class=\"tag\">&lt;<span class=\"name\">aside</span>&gt;</span>--------------------------|文章主体--段落或章节-侧边栏</span><br><span class=\"line\">    |footer---------------------------------------------------------------------------------------|底部</span><br><span class=\"line\">   以前都是用<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span>&gt;</span>  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span> =<span class=\"string\">\"nav\"</span>&gt;</span>......</span><br><span class=\"line\">   这样来定义页面的结构，html5新定义了这些，避免div太多混乱.</span><br><span class=\"line\"></span><br><span class=\"line\">10. <span class=\"tag\">&lt;<span class=\"name\">aside</span>&gt;</span>     可用于文章的侧边栏</span><br><span class=\"line\">11. <span class=\"tag\">&lt;<span class=\"name\">audio</span>&gt;</span>     定义声音链接</span><br><span class=\"line\">12. <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>         定义粗体字体，强调</span><br><span class=\"line\">13. <span class=\"tag\">&lt;<span class=\"name\">base</span>&gt;</span>      放在head里面，用于页面中的链接的基地址。后面的链接就可以写相对地址了。</span><br><span class=\"line\">                比如base =www.xxx000.com/img  ,链接一个图片就可以不写全路径，直接src=\"xxx.jpeg\"</span><br><span class=\"line\">14. <span class=\"tag\">&lt;<span class=\"name\">basefont</span>&gt;</span>  html不支持了。设置文档中所有字体的默认颜色，大小</span><br><span class=\"line\">15. <span class=\"tag\">&lt;<span class=\"name\">bdi</span>&gt;</span>       通过脱离父元素的文本设置方向</span><br><span class=\"line\">16. <span class=\"tag\">&lt;<span class=\"name\">bdo</span>&gt;</span>       定义文本方向，指定dir属性是rtl还是ltr</span><br><span class=\"line\">17. <span class=\"tag\">&lt;<span class=\"name\">big</span>&gt;</span>       html不支持了。请用css控制 ，制作更大的文本</span><br><span class=\"line\">18. <span class=\"tag\">&lt;<span class=\"name\">blockquote</span>&gt;</span>摘自另一个源的块引用</span><br><span class=\"line\">19. <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>      定义文档主体</span><br><span class=\"line\">20. <span class=\"tag\">&lt;<span class=\"name\">br</span> &gt;</span>       换行符</span><br><span class=\"line\">21. <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>    定义按钮，多种属性，可以是按钮，提交，重置.....</span><br><span class=\"line\">22. <span class=\"tag\">&lt;<span class=\"name\">canvas</span>&gt;</span>    只是承载图形的容器。需要script脚本绘制图形，然后传给canvas标签中</span><br><span class=\"line\">23. <span class=\"tag\">&lt;<span class=\"name\">caption</span>&gt;</span>   放在table后面，定义表格的标题的</span><br><span class=\"line\">24. <span class=\"tag\">&lt;<span class=\"name\">canter</span>&gt;</span>    5不支持了，请用CSS定义居中</span><br><span class=\"line\">25. <span class=\"tag\">&lt;<span class=\"name\">cite</span>&gt;</span>      定义歌曲，影视，书籍等作品的标题</span><br><span class=\"line\">26. <span class=\"tag\">&lt;<span class=\"name\">code</span>&gt;</span>      HTML5 <span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">dfn</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">code</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">samp</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">var</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">cite</span>&gt;</span> 等短标签，</span><br><span class=\"line\">                不推荐使用了。css能有更丰富的表现</span><br><span class=\"line\">27. <span class=\"tag\">&lt;<span class=\"name\">col</span>&gt;</span>       只能在table或者colgroup元素内使用，定义一列或多列表格的属性值。默认</span><br><span class=\"line\">                至少一列，只有span属性能用了，其他的用css</span><br><span class=\"line\">28. <span class=\"tag\">&lt;<span class=\"name\">colgroup</span>&gt;</span>  里面只能有col元素 H5已经不支持大部分属性了，用于对表格中的列进行组合，</span><br><span class=\"line\">                并格式化。要区别于col</span><br><span class=\"line\">29. <span class=\"tag\">&lt;<span class=\"name\">command</span>&gt;</span>   可以指定消息事件处理函数。目前只支持ＩＥ</span><br><span class=\"line\">30. <span class=\"tag\">&lt;<span class=\"name\">datalist</span>&gt;</span>  定义选项列表。和input元素配合使用，对于输入框提示作用</span><br><span class=\"line\">31. <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>　　　  dl定义列表，dt定义项目,dd对项目进行描述</span><br><span class=\"line\">32. <span class=\"tag\">&lt;<span class=\"name\">del</span>&gt;</span>       定义已经删除的文本。中划线</span><br><span class=\"line\">33. <span class=\"tag\">&lt;<span class=\"name\">details</span>&gt;</span>   描述文档中的某个细节。目前只chrome支持</span><br><span class=\"line\">34. <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>       定义文档中的分割和部分。以便对块元素进行格式化。</span><br><span class=\"line\">35. <span class=\"tag\">&lt;<span class=\"name\">dl</span>&gt;</span>        定义一个list　配合dt和dd使用。dt是项目。dd是项目具体描述</span><br><span class=\"line\">36. <span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>        被强调的文本。一般配合css使用啦。</span><br><span class=\"line\">37. <span class=\"tag\">&lt;<span class=\"name\">embed</span>&gt;</span>     定义嵌入的内容。属性src=\"\"</span><br><span class=\"line\">38. <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span>  表单中 配合legend标签定义fieldset的标题。相当与通过legend定义的标题话一个框框,\\</span><br><span class=\"line\">                把许多表单元素圈住。</span><br><span class=\"line\">39. <span class=\"tag\">&lt;<span class=\"name\">figcaptio</span>&gt;</span> 标签定义 figure 元素的标题（caption）。</span><br><span class=\"line\">40. <span class=\"tag\">&lt;<span class=\"name\">figure</span>&gt;</span>    标签规定独立的流内容（图像、图表、照片、代码等等）。定义的内容与主内容无关，              定义的内容不存在时也不对文档有影响</span><br><span class=\"line\">41. <span class=\"tag\">&lt;<span class=\"name\">font</span>&gt;</span>      H5不支持了，请用CSS</span><br><span class=\"line\">42. <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span>    定义页脚，作者信息等等</span><br><span class=\"line\">43. <span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span>      form 元素包含一个或多个表单元素，比如：</span><br><span class=\"line\">                button</span><br><span class=\"line\">                input</span><br><span class=\"line\">                keygen</span><br><span class=\"line\">                object</span><br><span class=\"line\">                output</span><br><span class=\"line\">                select</span><br><span class=\"line\">                textarea</span><br><span class=\"line\"></span><br><span class=\"line\">44. <span class=\"tag\">&lt;<span class=\"name\">frame</span>&gt;</span>     H5不支持了。</span><br><span class=\"line\">45. <span class=\"tag\">&lt;<span class=\"name\">frameset</span>&gt;</span>  5也不支持了。</span><br><span class=\"line\">46. <span class=\"tag\">&lt;<span class=\"name\">h1-h6</span>&gt;</span>     定义标题大小</span><br><span class=\"line\">47. <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span>      头部元素，下面是可用在 head 部分的标签：</span><br><span class=\"line\">                base</span><br><span class=\"line\">                link</span><br><span class=\"line\">                meta</span><br><span class=\"line\">                script</span><br><span class=\"line\">                style</span><br><span class=\"line\">                title</span><br><span class=\"line\">48. <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span>    定义文档的页眉</span><br><span class=\"line\">49. <span class=\"tag\">&lt;<span class=\"name\">hgroup</span>&gt;</span>    对标题进行组合 .H5的新标签</span><br><span class=\"line\">50. <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span>        定义主题变化，表现为一条水平线。</span><br><span class=\"line\">51. <span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span>      定义html文档</span><br><span class=\"line\">52. <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>         斜体。应该使用CSS</span><br><span class=\"line\">53. <span class=\"tag\">&lt;<span class=\"name\">iframe</span>&gt;</span>    创建包含另个文档的内嵌框架。</span><br><span class=\"line\">54. <span class=\"tag\">&lt;<span class=\"name\">img</span>&gt;</span>       必须要的两个属性src和alt（指定图片表述，以备图片无法加载时显示文字）</span><br><span class=\"line\">55. <span class=\"tag\">&lt;<span class=\"name\">input</span>&gt;</span>     定义用户的输入字段，根据不同的 type 属性，输入字段有多种形态。输入字段可以是 文本字段、复选框、密码字段、单选按钮、按钮等等。</span><br><span class=\"line\">56. <span class=\"tag\">&lt;<span class=\"name\">ins</span>&gt;</span>       地难以插入文本，一般和del一起使用。ins定义的文字会加入下划线</span><br><span class=\"line\">57. <span class=\"tag\">&lt;<span class=\"name\">keygen</span>&gt;</span>    类似input,定义表单的密钥生成器字段。H5新标签</span><br><span class=\"line\">58.  <span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>      表示文本是键盘输入的</span><br><span class=\"line\">59. <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>     input标签配合使用。点击label标签定义的文字，相当与自动点击input控件</span><br><span class=\"line\">60.  <span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span>   给一下元素定义标题的：<span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">figure</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">details</span>&gt;</span>。</span><br><span class=\"line\">61.  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>       定义列表项。在<span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>标签和<span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span>标签中使用/有序和无序列表</span><br><span class=\"line\">62. <span class=\"tag\">&lt;<span class=\"name\">link</span>&gt;</span>      文档链接外部资源的。大部分用来链接外部样式表css文件</span><br><span class=\"line\">63.  <span class=\"tag\">&lt;<span class=\"name\">map</span>&gt;</span>      定义图像区域映射，name属性和ｉｍｇ的usemap属性关联，包含area元素。</span><br><span class=\"line\">64. <span class=\"tag\">&lt;<span class=\"name\">mark</span>&gt;</span>      突出显示文本。文本背景黄色。</span><br><span class=\"line\">65. <span class=\"tag\">&lt;<span class=\"name\">menu</span>&gt;</span>      标签定义菜单列表。用于排列表单控件</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">menu</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> /&gt;</span>Red<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> /&gt;</span>blue<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">67. <span class=\"tag\">&lt;<span class=\"name\">meta</span>&gt;</span>      定义页面相关信息。位于head中定义关键词，利于搜索引擎检索：</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"HTML, CSS, XML, XHTML, JavaScript\"</span> /&gt;</span></span><br><span class=\"line\">                定义对页面的描述：</span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"w3c html web 技术标准教程。\"</span> /&gt;</span></span><br><span class=\"line\">                每５秒刷新一次页面：</span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"5\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">68. <span class=\"tag\">&lt;<span class=\"name\">meter</span>&gt;</span>     定义度量范围，可以用属性,max/min　也可以用文本中定义范围。</span><br><span class=\"line\">69. <span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span>       定义导航栏的链接的部分</span><br><span class=\"line\">70. <span class=\"tag\">&lt;<span class=\"name\">noframes</span>&gt;</span>  H5不支持了，用于不能显示框架的时候提示文本</span><br><span class=\"line\">71. <span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span>  当不支持脚本时。显示提示的文本</span><br><span class=\"line\">72. <span class=\"tag\">&lt;<span class=\"name\">object</span>&gt;</span>    定义一个嵌入的对象，多媒体等。图像请使用ｉｍｇ代替。大部分html4中的属性H5不支持了。</span><br><span class=\"line\">73. <span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span>        有序列表</span><br><span class=\"line\">74. <span class=\"tag\">&lt;<span class=\"name\">optgroup</span>&gt;</span>  组合选项：</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">optgroup</span> <span class=\"attr\">label</span>=<span class=\"string\">\"Swedish Cars\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span> =<span class=\"string\">\"volvo\"</span>&gt;</span>Volvo<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span> =<span class=\"string\">\"saab\"</span>&gt;</span>Saab<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">optgroup</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">optgroup</span> <span class=\"attr\">label</span>=<span class=\"string\">\"German Cars\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span> =<span class=\"string\">\"mercedes\"</span>&gt;</span>Mercedes<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span> =<span class=\"string\">\"audi\"</span>&gt;</span>Audi<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">optgroup</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">75. <span class=\"tag\">&lt;<span class=\"name\">optlon</span>&gt;</span>    定义一个下拉列表选项：</span><br><span class=\"line\">76.</span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"volvo\"</span>&gt;</span>Volvo<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"saab\"</span>&gt;</span>Saab<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"opel\"</span> <span class=\"attr\">selected</span>=<span class=\"string\">\"selected\"</span>&gt;</span>Opel<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"audi\"</span>&gt;</span>Audi<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">76. <span class=\"tag\">&lt;<span class=\"name\">output</span>&gt;</span>    标签定义不同类型的输出，比如脚本的输出。:</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">oninput</span>=<span class=\"string\">\"x.value=parseInt(a.value)+parseInt(b.value)\"</span>&gt;</span>0<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"range\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"a\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"50\"</span>&gt;</span>100+<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"b\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"50\"</span>&gt;</span></span><br><span class=\"line\">              =<span class=\"tag\">&lt;<span class=\"name\">output</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x\"</span> <span class=\"attr\">for</span>=<span class=\"string\">\"a b\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">output</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">              计算0-100的随机数加50＝多少，<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"range\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"a\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"50\"</span>&gt;</span>表示一个随机滚动条。</span><br><span class=\"line\"></span><br><span class=\"line\">77. <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>         段落</span><br><span class=\"line\">78. <span class=\"tag\">&lt;<span class=\"name\">param</span>&gt;</span>     http://www.w3chtml.com/html5/tag/param.html</span><br><span class=\"line\">79. <span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>       文本原样输出。不会改变格式</span><br><span class=\"line\">80. <span class=\"tag\">&lt;<span class=\"name\">progress</span>&gt;</span>  表示时间函数有关的进度条：</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">progress</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"objprogress\"</span>&gt;</span>85<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>%</span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">progress</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">81. <span class=\"tag\">&lt;<span class=\"name\">q</span>&gt;</span>         短引用，cite属性指定来源地址，显示是会插入了一个引号，表示后面的内容是引用的内容。</span><br><span class=\"line\">82. <span class=\"tag\">&lt;<span class=\"name\">rp</span>&gt;</span>        指示不支持ruby元素时，显示的文本注释</span><br><span class=\"line\">83. <span class=\"tag\">&lt;<span class=\"name\">ruby</span>&gt;</span>      显示中文注音或者字符。里面用<span class=\"tag\">&lt;<span class=\"name\">rt</span>&gt;</span>和<span class=\"tag\">&lt;<span class=\"name\">rp</span>&gt;</span>元素包裹。</span><br><span class=\"line\">84. <span class=\"tag\">&lt;<span class=\"name\">s</span>&gt;</span>         增加删除线文本。H5不支持了。请用css，</span><br><span class=\"line\">85. <span class=\"tag\">&lt;<span class=\"name\">samp</span>&gt;</span>      如下标签都是不推荐使用的，请用css样式表，更好。</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>        呈现为被强调的文本。</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>    定义重要的文本。</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dfn</span>&gt;</span>       定义一个定义项目。</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">code</span>&gt;</span>      定义计算机代码文本。</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">samp</span>&gt;</span>      定义样本文本。</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>       定义键盘文本。它表示文本是从键盘上键入的。它经常用在与计算机相关的文档或手册中。</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">var</span>&gt;</span>       定义变量。您可以将此标签与 <span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span> 及 <span class=\"tag\">&lt;<span class=\"name\">code</span>&gt;</span> 标签配合使用。</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cite</span>&gt;</span>      定义引用。可使用该标签对参考文献的引用进行定义，比如书籍或杂志的标题。</span><br><span class=\"line\">86. <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\">    javascript脚本置于其中。可链接外部ｊｓ脚本，一般脚本用于图像操作，表单验证和动态内容更改。</span></span><br><span class=\"line\"><span class=\"xml\">87. <span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span>    多个option标签置于其中，形成选择下拉列表。</span></span><br><span class=\"line\"><span class=\"xml\">88. <span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span>     小型文本，一般作为旁注信息</span></span><br><span class=\"line\"><span class=\"xml\">89. <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>    多媒体资源标签：</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">audio</span> <span class=\"attr\">controls</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"horse.ogg\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"audio/ogg\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"horse.mp3\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"audio/mpeg\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">                Your browser does not support the audio element.</span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">90 .<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>      对文档中行内元素进行分组。一遍对单独的一组文本进行样式控制。</span></span><br><span class=\"line\"><span class=\"xml\">91 .<span class=\"tag\">&lt;<span class=\"name\">strike</span>&gt;</span>    加删除线。请用del代替。不建议使用，用css吧</span></span><br><span class=\"line\"><span class=\"xml\">92. <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>    加粗文本</span></span><br><span class=\"line\"><span class=\"xml\">93. <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\">     html插入样式信息标签。</span></span></span><br><span class=\"line\"><span class=\"xml\">94 .<span class=\"tag\">&lt;<span class=\"name\">sub</span>&gt;</span>       定义上标文本，相当于脚注信息</span></span><br><span class=\"line\"><span class=\"xml\">95. <span class=\"tag\">&lt;<span class=\"name\">summary</span>&gt;</span>   <span class=\"tag\">&lt;<span class=\"name\">datails</span>&gt;</span>元素的地一个元素，定义details的标题内容。</span></span><br><span class=\"line\"><span class=\"xml\">96. <span class=\"tag\">&lt;<span class=\"name\">sup</span>&gt;</span>       定义上标文本，相当于脚注信息</span></span><br><span class=\"line\"><span class=\"xml\">97. <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span>     定义表格　<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span>定义一行,<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>定义表的第一行头。<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>定义表的内容</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">\"1\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>月份<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>存款<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>一月<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>1000 元<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">98. <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span>     表格的正文部分。H５已废除</span></span><br><span class=\"line\"><span class=\"xml\">99. <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>        表格内容行</span></span><br><span class=\"line\"><span class=\"xml\">100. <span class=\"tag\">&lt;<span class=\"name\">textarea</span>&gt;</span> 文本域，相当于MFC中的编辑框</span></span><br><span class=\"line\"><span class=\"xml\">101. <span class=\"tag\">&lt;<span class=\"name\">tfoot</span>&gt;</span> \t  表格的页脚部分，H5已废除</span></span><br><span class=\"line\"><span class=\"xml\">102. <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>       表格的头一行</span></span><br><span class=\"line\"><span class=\"xml\">103. <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span>    表格的头部分，需要有tr行</span></span><br><span class=\"line\"><span class=\"xml\">104. <span class=\"tag\">&lt;<span class=\"name\">time</span>&gt;</span>     定义时间或者日期，目前浏览器还都不支持</span></span><br><span class=\"line\"><span class=\"xml\">105 .<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>    浏览器显示的标题</span></span><br><span class=\"line\"><span class=\"xml\">106. <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span>       定义表格中的行</span></span><br><span class=\"line\"><span class=\"xml\">107. <span class=\"tag\">&lt;<span class=\"name\">track</span>&gt;</span>    为视频媒体文件制定外部文本轨道。比如字幕啥的。目前浏览器还不要支持此标签。</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">width</span>=<span class=\"string\">\"320\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"240\"</span> <span class=\"attr\">controls</span>=<span class=\"string\">\"controls\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"forrest_gump.mp4\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/mp4\"</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"forrest_gump.ogg\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/ogg\"</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">track</span> <span class=\"attr\">kind</span>=<span class=\"string\">\"subtitles\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"subs_chi.srt\"</span> <span class=\"attr\">srclang</span>=<span class=\"string\">\"zh\"</span> <span class=\"attr\">label</span>=<span class=\"string\">\"Chinese\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">track</span> <span class=\"attr\">kind</span>=<span class=\"string\">\"subtitles\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"subs_eng.srt\"</span> <span class=\"attr\">srclang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">label</span>=<span class=\"string\">\"English\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">108. <span class=\"tag\">&lt;<span class=\"name\">tt</span>&gt;</span>       定义打印机文本。目前h5已经不支持了。</span></span><br><span class=\"line\"><span class=\"xml\">109. <span class=\"tag\">&lt;<span class=\"name\">u</span>&gt;</span>        下划线。目前已不支持</span></span><br><span class=\"line\"><span class=\"xml\">110. <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>       无需列表。</span></span><br><span class=\"line\"><span class=\"xml\">111. <span class=\"tag\">&lt;<span class=\"name\">var</span>&gt;</span>      定义变量。您可以将此标签与 <span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span> 及 <span class=\"tag\">&lt;<span class=\"name\">code</span>&gt;</span> 标签配合使用。</span></span><br><span class=\"line\"><span class=\"xml\">112. <span class=\"tag\">&lt;<span class=\"name\">video</span>&gt;</span>    视频标签：</span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">src</span>=<span class=\"string\">\"movie.ogg\"</span> <span class=\"attr\">controls</span>=<span class=\"string\">\"controls\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">                您的浏览器不支持 video 标签。</span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">113. <span class=\"tag\">&lt;<span class=\"name\">wbr</span>&gt;</span>      标志在何处适合加入换行符，避免有些单词加入换行符没拆开，不明意义。</span></span><br><span class=\"line\"><span class=\"xml\">114. <span class=\"tag\">&lt;<span class=\"name\">rt</span>&gt;</span>       在ruby元素中加入汉字的注音：</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">ruby</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                漢 <span class=\"tag\">&lt;<span class=\"name\">rt</span>&gt;</span> ㄏㄢˋ <span class=\"tag\">&lt;/<span class=\"name\">rt</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;/<span class=\"name\">ruby</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">115. <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span>  定义区段。页眉，页脚.......</span></span><br><span class=\"line\"><span class=\"xml\">116. <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>    定义一个选项组的标注</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"html5标签总结\"><a href=\"#html5标签总结\" class=\"headerlink\" title=\"html5标签总结\"></a>html5标签总结</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">1. <span class=\"comment\">&lt;!----&gt;</span>       注释</span><br><span class=\"line\">2. <span class=\"meta\">&lt;!DOCTYPE&gt;</span>    定义html文本类型</span><br><span class=\"line\">3. <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>           定义超链接</span><br><span class=\"line\">4. <span class=\"tag\">&lt;<span class=\"name\">abbr</span>&gt;</span>        把一段字符串用缩写表示<span class=\"tag\">&lt;<span class=\"name\">abbr</span> <span class=\"attr\">title</span> =<span class=\"string\">\"People world\"</span>&gt;</span>PW <span class=\"tag\">&lt;/<span class=\"name\">abbr</span>&gt;</span></span><br><span class=\"line\">5. <span class=\"tag\">&lt;<span class=\"name\">address</span>&gt;</span>     在article元素内部，表示该文章的作者身份信息</span><br><span class=\"line\">6. <span class=\"tag\">&lt;<span class=\"name\">applet</span>&gt;</span>      定义嵌入的applet ，html5不支持了。请用object代替</span><br><span class=\"line\">7. <span class=\"tag\">&lt;<span class=\"name\">acronym</span>&gt;</span>     html5不支持了，请用<span class=\"tag\">&lt;<span class=\"name\">abbr代替哦</span></span></span><br><span class=\"line\">8. &lt;area&gt;        标签定义图像映射内部的区域，图像中部分区域可以点击，就是说有链接的</span><br><span class=\"line\">9. 两栏式架构   </span><br><span class=\"line\">    |header---------------------------------------------------------------------------------------|顶部</span><br><span class=\"line\">    |nav------------------------------------------------------------------------------------------|外链</span><br><span class=\"line\">    |article---包含<span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span>-----------------<span class=\"tag\">&lt;<span class=\"name\">aside</span>&gt;</span>--------------------------|文章主体--段落或章节-侧边栏</span><br><span class=\"line\">    |footer---------------------------------------------------------------------------------------|底部</span><br><span class=\"line\">   以前都是用<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span>&gt;</span>  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span> =<span class=\"string\">\"nav\"</span>&gt;</span>......</span><br><span class=\"line\">   这样来定义页面的结构，html5新定义了这些，避免div太多混乱.</span><br><span class=\"line\"></span><br><span class=\"line\">10. <span class=\"tag\">&lt;<span class=\"name\">aside</span>&gt;</span>     可用于文章的侧边栏</span><br><span class=\"line\">11. <span class=\"tag\">&lt;<span class=\"name\">audio</span>&gt;</span>     定义声音链接</span><br><span class=\"line\">12. <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>         定义粗体字体，强调</span><br><span class=\"line\">13. <span class=\"tag\">&lt;<span class=\"name\">base</span>&gt;</span>      放在head里面，用于页面中的链接的基地址。后面的链接就可以写相对地址了。</span><br><span class=\"line\">                比如base =www.xxx000.com/img  ,链接一个图片就可以不写全路径，直接src=\"xxx.jpeg\"</span><br><span class=\"line\">14. <span class=\"tag\">&lt;<span class=\"name\">basefont</span>&gt;</span>  html不支持了。设置文档中所有字体的默认颜色，大小</span><br><span class=\"line\">15. <span class=\"tag\">&lt;<span class=\"name\">bdi</span>&gt;</span>       通过脱离父元素的文本设置方向</span><br><span class=\"line\">16. <span class=\"tag\">&lt;<span class=\"name\">bdo</span>&gt;</span>       定义文本方向，指定dir属性是rtl还是ltr</span><br><span class=\"line\">17. <span class=\"tag\">&lt;<span class=\"name\">big</span>&gt;</span>       html不支持了。请用css控制 ，制作更大的文本</span><br><span class=\"line\">18. <span class=\"tag\">&lt;<span class=\"name\">blockquote</span>&gt;</span>摘自另一个源的块引用</span><br><span class=\"line\">19. <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>      定义文档主体</span><br><span class=\"line\">20. <span class=\"tag\">&lt;<span class=\"name\">br</span> &gt;</span>       换行符</span><br><span class=\"line\">21. <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>    定义按钮，多种属性，可以是按钮，提交，重置.....</span><br><span class=\"line\">22. <span class=\"tag\">&lt;<span class=\"name\">canvas</span>&gt;</span>    只是承载图形的容器。需要script脚本绘制图形，然后传给canvas标签中</span><br><span class=\"line\">23. <span class=\"tag\">&lt;<span class=\"name\">caption</span>&gt;</span>   放在table后面，定义表格的标题的</span><br><span class=\"line\">24. <span class=\"tag\">&lt;<span class=\"name\">canter</span>&gt;</span>    5不支持了，请用CSS定义居中</span><br><span class=\"line\">25. <span class=\"tag\">&lt;<span class=\"name\">cite</span>&gt;</span>      定义歌曲，影视，书籍等作品的标题</span><br><span class=\"line\">26. <span class=\"tag\">&lt;<span class=\"name\">code</span>&gt;</span>      HTML5 <span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">dfn</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">code</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">samp</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">var</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">cite</span>&gt;</span> 等短标签，</span><br><span class=\"line\">                不推荐使用了。css能有更丰富的表现</span><br><span class=\"line\">27. <span class=\"tag\">&lt;<span class=\"name\">col</span>&gt;</span>       只能在table或者colgroup元素内使用，定义一列或多列表格的属性值。默认</span><br><span class=\"line\">                至少一列，只有span属性能用了，其他的用css</span><br><span class=\"line\">28. <span class=\"tag\">&lt;<span class=\"name\">colgroup</span>&gt;</span>  里面只能有col元素 H5已经不支持大部分属性了，用于对表格中的列进行组合，</span><br><span class=\"line\">                并格式化。要区别于col</span><br><span class=\"line\">29. <span class=\"tag\">&lt;<span class=\"name\">command</span>&gt;</span>   可以指定消息事件处理函数。目前只支持ＩＥ</span><br><span class=\"line\">30. <span class=\"tag\">&lt;<span class=\"name\">datalist</span>&gt;</span>  定义选项列表。和input元素配合使用，对于输入框提示作用</span><br><span class=\"line\">31. <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>　　　  dl定义列表，dt定义项目,dd对项目进行描述</span><br><span class=\"line\">32. <span class=\"tag\">&lt;<span class=\"name\">del</span>&gt;</span>       定义已经删除的文本。中划线</span><br><span class=\"line\">33. <span class=\"tag\">&lt;<span class=\"name\">details</span>&gt;</span>   描述文档中的某个细节。目前只chrome支持</span><br><span class=\"line\">34. <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>       定义文档中的分割和部分。以便对块元素进行格式化。</span><br><span class=\"line\">35. <span class=\"tag\">&lt;<span class=\"name\">dl</span>&gt;</span>        定义一个list　配合dt和dd使用。dt是项目。dd是项目具体描述</span><br><span class=\"line\">36. <span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>        被强调的文本。一般配合css使用啦。</span><br><span class=\"line\">37. <span class=\"tag\">&lt;<span class=\"name\">embed</span>&gt;</span>     定义嵌入的内容。属性src=\"\"</span><br><span class=\"line\">38. <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span>  表单中 配合legend标签定义fieldset的标题。相当与通过legend定义的标题话一个框框,\\</span><br><span class=\"line\">                把许多表单元素圈住。</span><br><span class=\"line\">39. <span class=\"tag\">&lt;<span class=\"name\">figcaptio</span>&gt;</span> 标签定义 figure 元素的标题（caption）。</span><br><span class=\"line\">40. <span class=\"tag\">&lt;<span class=\"name\">figure</span>&gt;</span>    标签规定独立的流内容（图像、图表、照片、代码等等）。定义的内容与主内容无关，              定义的内容不存在时也不对文档有影响</span><br><span class=\"line\">41. <span class=\"tag\">&lt;<span class=\"name\">font</span>&gt;</span>      H5不支持了，请用CSS</span><br><span class=\"line\">42. <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span>    定义页脚，作者信息等等</span><br><span class=\"line\">43. <span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span>      form 元素包含一个或多个表单元素，比如：</span><br><span class=\"line\">                button</span><br><span class=\"line\">                input</span><br><span class=\"line\">                keygen</span><br><span class=\"line\">                object</span><br><span class=\"line\">                output</span><br><span class=\"line\">                select</span><br><span class=\"line\">                textarea</span><br><span class=\"line\"></span><br><span class=\"line\">44. <span class=\"tag\">&lt;<span class=\"name\">frame</span>&gt;</span>     H5不支持了。</span><br><span class=\"line\">45. <span class=\"tag\">&lt;<span class=\"name\">frameset</span>&gt;</span>  5也不支持了。</span><br><span class=\"line\">46. <span class=\"tag\">&lt;<span class=\"name\">h1-h6</span>&gt;</span>     定义标题大小</span><br><span class=\"line\">47. <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span>      头部元素，下面是可用在 head 部分的标签：</span><br><span class=\"line\">                base</span><br><span class=\"line\">                link</span><br><span class=\"line\">                meta</span><br><span class=\"line\">                script</span><br><span class=\"line\">                style</span><br><span class=\"line\">                title</span><br><span class=\"line\">48. <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span>    定义文档的页眉</span><br><span class=\"line\">49. <span class=\"tag\">&lt;<span class=\"name\">hgroup</span>&gt;</span>    对标题进行组合 .H5的新标签</span><br><span class=\"line\">50. <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span>        定义主题变化，表现为一条水平线。</span><br><span class=\"line\">51. <span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span>      定义html文档</span><br><span class=\"line\">52. <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>         斜体。应该使用CSS</span><br><span class=\"line\">53. <span class=\"tag\">&lt;<span class=\"name\">iframe</span>&gt;</span>    创建包含另个文档的内嵌框架。</span><br><span class=\"line\">54. <span class=\"tag\">&lt;<span class=\"name\">img</span>&gt;</span>       必须要的两个属性src和alt（指定图片表述，以备图片无法加载时显示文字）</span><br><span class=\"line\">55. <span class=\"tag\">&lt;<span class=\"name\">input</span>&gt;</span>     定义用户的输入字段，根据不同的 type 属性，输入字段有多种形态。输入字段可以是 文本字段、复选框、密码字段、单选按钮、按钮等等。</span><br><span class=\"line\">56. <span class=\"tag\">&lt;<span class=\"name\">ins</span>&gt;</span>       地难以插入文本，一般和del一起使用。ins定义的文字会加入下划线</span><br><span class=\"line\">57. <span class=\"tag\">&lt;<span class=\"name\">keygen</span>&gt;</span>    类似input,定义表单的密钥生成器字段。H5新标签</span><br><span class=\"line\">58.  <span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>      表示文本是键盘输入的</span><br><span class=\"line\">59. <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>     input标签配合使用。点击label标签定义的文字，相当与自动点击input控件</span><br><span class=\"line\">60.  <span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span>   给一下元素定义标题的：<span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">figure</span>&gt;</span>、<span class=\"tag\">&lt;<span class=\"name\">details</span>&gt;</span>。</span><br><span class=\"line\">61.  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>       定义列表项。在<span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>标签和<span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span>标签中使用/有序和无序列表</span><br><span class=\"line\">62. <span class=\"tag\">&lt;<span class=\"name\">link</span>&gt;</span>      文档链接外部资源的。大部分用来链接外部样式表css文件</span><br><span class=\"line\">63.  <span class=\"tag\">&lt;<span class=\"name\">map</span>&gt;</span>      定义图像区域映射，name属性和ｉｍｇ的usemap属性关联，包含area元素。</span><br><span class=\"line\">64. <span class=\"tag\">&lt;<span class=\"name\">mark</span>&gt;</span>      突出显示文本。文本背景黄色。</span><br><span class=\"line\">65. <span class=\"tag\">&lt;<span class=\"name\">menu</span>&gt;</span>      标签定义菜单列表。用于排列表单控件</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">menu</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> /&gt;</span>Red<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> /&gt;</span>blue<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">67. <span class=\"tag\">&lt;<span class=\"name\">meta</span>&gt;</span>      定义页面相关信息。位于head中定义关键词，利于搜索引擎检索：</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"HTML, CSS, XML, XHTML, JavaScript\"</span> /&gt;</span></span><br><span class=\"line\">                定义对页面的描述：</span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"w3c html web 技术标准教程。\"</span> /&gt;</span></span><br><span class=\"line\">                每５秒刷新一次页面：</span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"5\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">68. <span class=\"tag\">&lt;<span class=\"name\">meter</span>&gt;</span>     定义度量范围，可以用属性,max/min　也可以用文本中定义范围。</span><br><span class=\"line\">69. <span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span>       定义导航栏的链接的部分</span><br><span class=\"line\">70. <span class=\"tag\">&lt;<span class=\"name\">noframes</span>&gt;</span>  H5不支持了，用于不能显示框架的时候提示文本</span><br><span class=\"line\">71. <span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span>  当不支持脚本时。显示提示的文本</span><br><span class=\"line\">72. <span class=\"tag\">&lt;<span class=\"name\">object</span>&gt;</span>    定义一个嵌入的对象，多媒体等。图像请使用ｉｍｇ代替。大部分html4中的属性H5不支持了。</span><br><span class=\"line\">73. <span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span>        有序列表</span><br><span class=\"line\">74. <span class=\"tag\">&lt;<span class=\"name\">optgroup</span>&gt;</span>  组合选项：</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">optgroup</span> <span class=\"attr\">label</span>=<span class=\"string\">\"Swedish Cars\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span> =<span class=\"string\">\"volvo\"</span>&gt;</span>Volvo<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span> =<span class=\"string\">\"saab\"</span>&gt;</span>Saab<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">optgroup</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">optgroup</span> <span class=\"attr\">label</span>=<span class=\"string\">\"German Cars\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span> =<span class=\"string\">\"mercedes\"</span>&gt;</span>Mercedes<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span> =<span class=\"string\">\"audi\"</span>&gt;</span>Audi<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">optgroup</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">75. <span class=\"tag\">&lt;<span class=\"name\">optlon</span>&gt;</span>    定义一个下拉列表选项：</span><br><span class=\"line\">76.</span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"volvo\"</span>&gt;</span>Volvo<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"saab\"</span>&gt;</span>Saab<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"opel\"</span> <span class=\"attr\">selected</span>=<span class=\"string\">\"selected\"</span>&gt;</span>Opel<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"audi\"</span>&gt;</span>Audi<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">76. <span class=\"tag\">&lt;<span class=\"name\">output</span>&gt;</span>    标签定义不同类型的输出，比如脚本的输出。:</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">oninput</span>=<span class=\"string\">\"x.value=parseInt(a.value)+parseInt(b.value)\"</span>&gt;</span>0<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"range\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"a\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"50\"</span>&gt;</span>100+<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"b\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"50\"</span>&gt;</span></span><br><span class=\"line\">              =<span class=\"tag\">&lt;<span class=\"name\">output</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x\"</span> <span class=\"attr\">for</span>=<span class=\"string\">\"a b\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">output</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">              计算0-100的随机数加50＝多少，<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"range\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"a\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"50\"</span>&gt;</span>表示一个随机滚动条。</span><br><span class=\"line\"></span><br><span class=\"line\">77. <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>         段落</span><br><span class=\"line\">78. <span class=\"tag\">&lt;<span class=\"name\">param</span>&gt;</span>     http://www.w3chtml.com/html5/tag/param.html</span><br><span class=\"line\">79. <span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>       文本原样输出。不会改变格式</span><br><span class=\"line\">80. <span class=\"tag\">&lt;<span class=\"name\">progress</span>&gt;</span>  表示时间函数有关的进度条：</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">progress</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"objprogress\"</span>&gt;</span>85<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>%</span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">progress</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">81. <span class=\"tag\">&lt;<span class=\"name\">q</span>&gt;</span>         短引用，cite属性指定来源地址，显示是会插入了一个引号，表示后面的内容是引用的内容。</span><br><span class=\"line\">82. <span class=\"tag\">&lt;<span class=\"name\">rp</span>&gt;</span>        指示不支持ruby元素时，显示的文本注释</span><br><span class=\"line\">83. <span class=\"tag\">&lt;<span class=\"name\">ruby</span>&gt;</span>      显示中文注音或者字符。里面用<span class=\"tag\">&lt;<span class=\"name\">rt</span>&gt;</span>和<span class=\"tag\">&lt;<span class=\"name\">rp</span>&gt;</span>元素包裹。</span><br><span class=\"line\">84. <span class=\"tag\">&lt;<span class=\"name\">s</span>&gt;</span>         增加删除线文本。H5不支持了。请用css，</span><br><span class=\"line\">85. <span class=\"tag\">&lt;<span class=\"name\">samp</span>&gt;</span>      如下标签都是不推荐使用的，请用css样式表，更好。</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>        呈现为被强调的文本。</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>    定义重要的文本。</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dfn</span>&gt;</span>       定义一个定义项目。</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">code</span>&gt;</span>      定义计算机代码文本。</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">samp</span>&gt;</span>      定义样本文本。</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>       定义键盘文本。它表示文本是从键盘上键入的。它经常用在与计算机相关的文档或手册中。</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">var</span>&gt;</span>       定义变量。您可以将此标签与 <span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span> 及 <span class=\"tag\">&lt;<span class=\"name\">code</span>&gt;</span> 标签配合使用。</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cite</span>&gt;</span>      定义引用。可使用该标签对参考文献的引用进行定义，比如书籍或杂志的标题。</span><br><span class=\"line\">86. <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\">    javascript脚本置于其中。可链接外部ｊｓ脚本，一般脚本用于图像操作，表单验证和动态内容更改。</span></span><br><span class=\"line\"><span class=\"xml\">87. <span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span>    多个option标签置于其中，形成选择下拉列表。</span></span><br><span class=\"line\"><span class=\"xml\">88. <span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span>     小型文本，一般作为旁注信息</span></span><br><span class=\"line\"><span class=\"xml\">89. <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>    多媒体资源标签：</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">audio</span> <span class=\"attr\">controls</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"horse.ogg\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"audio/ogg\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"horse.mp3\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"audio/mpeg\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">                Your browser does not support the audio element.</span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">90 .<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>      对文档中行内元素进行分组。一遍对单独的一组文本进行样式控制。</span></span><br><span class=\"line\"><span class=\"xml\">91 .<span class=\"tag\">&lt;<span class=\"name\">strike</span>&gt;</span>    加删除线。请用del代替。不建议使用，用css吧</span></span><br><span class=\"line\"><span class=\"xml\">92. <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>    加粗文本</span></span><br><span class=\"line\"><span class=\"xml\">93. <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\">     html插入样式信息标签。</span></span></span><br><span class=\"line\"><span class=\"xml\">94 .<span class=\"tag\">&lt;<span class=\"name\">sub</span>&gt;</span>       定义上标文本，相当于脚注信息</span></span><br><span class=\"line\"><span class=\"xml\">95. <span class=\"tag\">&lt;<span class=\"name\">summary</span>&gt;</span>   <span class=\"tag\">&lt;<span class=\"name\">datails</span>&gt;</span>元素的地一个元素，定义details的标题内容。</span></span><br><span class=\"line\"><span class=\"xml\">96. <span class=\"tag\">&lt;<span class=\"name\">sup</span>&gt;</span>       定义上标文本，相当于脚注信息</span></span><br><span class=\"line\"><span class=\"xml\">97. <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span>     定义表格　<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span>定义一行,<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>定义表的第一行头。<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>定义表的内容</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">\"1\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>月份<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>存款<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>一月<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>1000 元<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">98. <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span>     表格的正文部分。H５已废除</span></span><br><span class=\"line\"><span class=\"xml\">99. <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>        表格内容行</span></span><br><span class=\"line\"><span class=\"xml\">100. <span class=\"tag\">&lt;<span class=\"name\">textarea</span>&gt;</span> 文本域，相当于MFC中的编辑框</span></span><br><span class=\"line\"><span class=\"xml\">101. <span class=\"tag\">&lt;<span class=\"name\">tfoot</span>&gt;</span> \t  表格的页脚部分，H5已废除</span></span><br><span class=\"line\"><span class=\"xml\">102. <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>       表格的头一行</span></span><br><span class=\"line\"><span class=\"xml\">103. <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span>    表格的头部分，需要有tr行</span></span><br><span class=\"line\"><span class=\"xml\">104. <span class=\"tag\">&lt;<span class=\"name\">time</span>&gt;</span>     定义时间或者日期，目前浏览器还都不支持</span></span><br><span class=\"line\"><span class=\"xml\">105 .<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>    浏览器显示的标题</span></span><br><span class=\"line\"><span class=\"xml\">106. <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span>       定义表格中的行</span></span><br><span class=\"line\"><span class=\"xml\">107. <span class=\"tag\">&lt;<span class=\"name\">track</span>&gt;</span>    为视频媒体文件制定外部文本轨道。比如字幕啥的。目前浏览器还不要支持此标签。</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">width</span>=<span class=\"string\">\"320\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"240\"</span> <span class=\"attr\">controls</span>=<span class=\"string\">\"controls\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"forrest_gump.mp4\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/mp4\"</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"forrest_gump.ogg\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/ogg\"</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">track</span> <span class=\"attr\">kind</span>=<span class=\"string\">\"subtitles\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"subs_chi.srt\"</span> <span class=\"attr\">srclang</span>=<span class=\"string\">\"zh\"</span> <span class=\"attr\">label</span>=<span class=\"string\">\"Chinese\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">track</span> <span class=\"attr\">kind</span>=<span class=\"string\">\"subtitles\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"subs_eng.srt\"</span> <span class=\"attr\">srclang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">label</span>=<span class=\"string\">\"English\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">108. <span class=\"tag\">&lt;<span class=\"name\">tt</span>&gt;</span>       定义打印机文本。目前h5已经不支持了。</span></span><br><span class=\"line\"><span class=\"xml\">109. <span class=\"tag\">&lt;<span class=\"name\">u</span>&gt;</span>        下划线。目前已不支持</span></span><br><span class=\"line\"><span class=\"xml\">110. <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>       无需列表。</span></span><br><span class=\"line\"><span class=\"xml\">111. <span class=\"tag\">&lt;<span class=\"name\">var</span>&gt;</span>      定义变量。您可以将此标签与 <span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span> 及 <span class=\"tag\">&lt;<span class=\"name\">code</span>&gt;</span> 标签配合使用。</span></span><br><span class=\"line\"><span class=\"xml\">112. <span class=\"tag\">&lt;<span class=\"name\">video</span>&gt;</span>    视频标签：</span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">src</span>=<span class=\"string\">\"movie.ogg\"</span> <span class=\"attr\">controls</span>=<span class=\"string\">\"controls\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">                您的浏览器不支持 video 标签。</span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">113. <span class=\"tag\">&lt;<span class=\"name\">wbr</span>&gt;</span>      标志在何处适合加入换行符，避免有些单词加入换行符没拆开，不明意义。</span></span><br><span class=\"line\"><span class=\"xml\">114. <span class=\"tag\">&lt;<span class=\"name\">rt</span>&gt;</span>       在ruby元素中加入汉字的注音：</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">ruby</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                漢 <span class=\"tag\">&lt;<span class=\"name\">rt</span>&gt;</span> ㄏㄢˋ <span class=\"tag\">&lt;/<span class=\"name\">rt</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;/<span class=\"name\">ruby</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">115. <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span>  定义区段。页眉，页脚.......</span></span><br><span class=\"line\"><span class=\"xml\">116. <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>    定义一个选项组的标注</span></span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[{"_id":"source/_posts/linux/centos6和7的启动流程/centos6和7的启动流程.png","slug":"centos6和7的启动流程.png","post":"cjwxes5cw000ghdli1cu1dzsm","modified":0,"renderable":0},{"_id":"source/_posts/ngx_lua/cookie_and_session/cookie_and_session.png","slug":"cookie_and_session.png","post":"cjwxes5dg0021hdlio7uaoj5t","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjwxes5c90002hdlibyb9o4t4","category_id":"cjwxes5cg0004hdlif5kcjfyq","_id":"cjwxes5cs000chdli7mawsumb"},{"post_id":"cjwxes5ce0003hdlii5jr3lid","category_id":"cjwxes5cp0008hdlirlzclneb","_id":"cjwxes5cx000ihdlia0lksh4i"},{"post_id":"cjwxes5ci0005hdlidonbkxf6","category_id":"cjwxes5cp0008hdlirlzclneb","_id":"cjwxes5cz000nhdli0asigx60"},{"post_id":"cjwxes5cw000ghdli1cu1dzsm","category_id":"cjwxes5cp0008hdlirlzclneb","_id":"cjwxes5d0000qhdliij4okpp6"},{"post_id":"cjwxes5cj0006hdliyffad1kf","category_id":"cjwxes5cp0008hdlirlzclneb","_id":"cjwxes5d1000thdli9dtj8vn9"},{"post_id":"cjwxes5co0007hdliyzhgcchl","category_id":"cjwxes5cp0008hdlirlzclneb","_id":"cjwxes5d3000yhdlipx4w839x"},{"post_id":"cjwxes5d1000uhdlizdg2hb3y","category_id":"cjwxes5cp0008hdlirlzclneb","_id":"cjwxes5d60015hdliajp0bznf"},{"post_id":"cjwxes5cq000ahdlisvqc2m4h","category_id":"cjwxes5d1000shdli2tzlsqsr","_id":"cjwxes5d60018hdlikm5l3ohh"},{"post_id":"cjwxes5d3000xhdli1difgr5b","category_id":"cjwxes5cp0008hdlirlzclneb","_id":"cjwxes5d7001bhdliwtt5595t"},{"post_id":"cjwxes5d40011hdlihnleanpa","category_id":"cjwxes5cp0008hdlirlzclneb","_id":"cjwxes5d8001ehdlix7jlm658"},{"post_id":"cjwxes5cr000bhdli8zsptw7y","category_id":"cjwxes5d3000zhdliwazsm127","_id":"cjwxes5da001hhdliqzdgky71"},{"post_id":"cjwxes5d50014hdli1fwelcf9","category_id":"cjwxes5cp0008hdlirlzclneb","_id":"cjwxes5db001jhdli6ta9vhp2"},{"post_id":"cjwxes5d7001ahdlicw99m1rw","category_id":"cjwxes5cp0008hdlirlzclneb","_id":"cjwxes5dc001nhdlimbr66bjx"},{"post_id":"cjwxes5cx000jhdlif3hndw4l","category_id":"cjwxes5d60016hdli6wekixza","_id":"cjwxes5dd001phdli99nmbz39"},{"post_id":"cjwxes5d8001dhdli9y5pmm9z","category_id":"cjwxes5cp0008hdlirlzclneb","_id":"cjwxes5de001thdliw93tzgiv"},{"post_id":"cjwxes5cy000lhdliek80ptz8","category_id":"cjwxes5d60016hdli6wekixza","_id":"cjwxes5df001vhdlibrrz21bf"},{"post_id":"cjwxes5cz000phdli1b34tyk8","category_id":"cjwxes5d60016hdli6wekixza","_id":"cjwxes5dg001zhdli8jd174bq"},{"post_id":"cjwxes5d0000rhdlis6bjz5yq","category_id":"cjwxes5d60016hdli6wekixza","_id":"cjwxes5dh0022hdli4e4opod0"},{"post_id":"cjwxes5df001xhdlibozy1oht","category_id":"cjwxes5df001whdlirjbtbzxc","_id":"cjwxes5dj0028hdlifowdvytk"},{"post_id":"cjwxes5d60017hdliyam5r4hz","category_id":"cjwxes5df001whdlirjbtbzxc","_id":"cjwxes5dj002bhdli5zfv2wj2"},{"post_id":"cjwxes5dh0024hdli32vb1ykx","category_id":"cjwxes5cp0008hdlirlzclneb","_id":"cjwxes5dk002ehdli4dbenrhw"},{"post_id":"cjwxes5d9001ghdlikxlatzxv","category_id":"cjwxes5dh0023hdlios9dc935","_id":"cjwxes5dk002hhdlinodg8vx1"},{"post_id":"cjwxes5dc001mhdlij3d4yzze","category_id":"cjwxes5dh0023hdlios9dc935","_id":"cjwxes5dl002khdlizbo4543v"},{"post_id":"cjwxes5dd001ohdliqql5ax6j","category_id":"cjwxes5dh0023hdlios9dc935","_id":"cjwxes5dl002mhdli60gye1gm"},{"post_id":"cjwxes5de001shdlil4n4ogvs","category_id":"cjwxes5df001whdlirjbtbzxc","_id":"cjwxes5dm002ohdliktl1y227"},{"post_id":"cjwxes5df001uhdli7sz9v3po","category_id":"cjwxes5df001whdlirjbtbzxc","_id":"cjwxes5dm002phdlimmadqzzo"},{"post_id":"cjwxes5dg0021hdlio7uaoj5t","category_id":"cjwxes5dm002nhdliw86bktka","_id":"cjwxes5dm002qhdlij2nfiaer"},{"post_id":"cjwxes5dw002rhdlibs86473f","category_id":"cjwxes5df001whdlirjbtbzxc","_id":"cjwxes5dy002shdlijguo8q74"},{"post_id":"cjwxes5e3002thdlihoobsgi8","category_id":"cjwxes5e4002vhdliiv814o0v","_id":"cjwxes5e80034hdlil8gz8uu4"},{"post_id":"cjwxes5e3002uhdliks53jd37","category_id":"cjwxes5e4002vhdliiv814o0v","_id":"cjwxes5ea0039hdlizfpvcwdb"},{"post_id":"cjwxes5e4002whdli4v2rawp2","category_id":"cjwxes5e4002vhdliiv814o0v","_id":"cjwxes5eb003chdli2p238m50"},{"post_id":"cjwxes5e5002xhdlieyd0tsjk","category_id":"cjwxes5e90038hdlids7zgljs","_id":"cjwxes5ee003ghdli3djirra1"},{"post_id":"cjwxes5e5002yhdlibvvzo9do","category_id":"cjwxes5eb003dhdligd3w7fqi","_id":"cjwxes5eh003khdlifcgkykyp"},{"post_id":"cjwxes5ee003ihdlifj7pl14x","category_id":"cjwxes5ee003hhdlibukinaat","_id":"cjwxes5ei003ohdlimjr4a8tl"},{"post_id":"cjwxes5e60031hdlidb5zo60s","category_id":"cjwxes5ee003hhdlibukinaat","_id":"cjwxes5ej003phdliafnndogf"},{"post_id":"cjwxes5ef003jhdliayjenyud","category_id":"cjwxes5ee003hhdlibukinaat","_id":"cjwxes5ej003rhdlih5yrx07g"},{"post_id":"cjwxes5eh003mhdlilgzenyal","category_id":"cjwxes5ee003hhdlibukinaat","_id":"cjwxes5ej003shdlitsgmvq3y"},{"post_id":"cjwxes5ei003nhdliov1e4vvg","category_id":"cjwxes5ee003hhdlibukinaat","_id":"cjwxes5ek003uhdliist15b9t"},{"post_id":"cjwxes5e70032hdliyqpiexes","category_id":"cjwxes5eh003lhdli5au2hnqw","_id":"cjwxes5ek003vhdlindonws2u"},{"post_id":"cjwxes5e80035hdlif3tb0smw","category_id":"cjwxes5ee003hhdlibukinaat","_id":"cjwxes5ek003xhdlizoiykxz4"},{"post_id":"cjwxes5e90037hdlilvlh95b2","category_id":"cjwxes5eh003lhdli5au2hnqw","_id":"cjwxes5el003zhdliiz52ba8w"},{"post_id":"cjwxes5ea003ahdlicyk42hbg","category_id":"cjwxes5eh003lhdli5au2hnqw","_id":"cjwxes5el0041hdlig8pzep76"},{"post_id":"cjwxes5eb003bhdlipmgw1ixf","category_id":"cjwxes5ee003hhdlibukinaat","_id":"cjwxes5em0043hdlih0qsf6ey"},{"post_id":"cjwxes5eb003ehdliw4qclu7n","category_id":"cjwxes5ee003hhdlibukinaat","_id":"cjwxes5em0044hdli9p8kjetn"},{"post_id":"cjwxes5ed003fhdliexl6g5l7","category_id":"cjwxes5ee003hhdlibukinaat","_id":"cjwxes5em0045hdli00ymavub"},{"post_id":"cjwxes5er0046hdli10rfmihy","category_id":"cjwxes5e90038hdlids7zgljs","_id":"cjwxes5ew0048hdlirnumqlhq"}],"PostTag":[{"post_id":"cjwxes5cj0006hdliyffad1kf","tag_id":"cjwxes5cq0009hdliwndhm6vn","_id":"cjwxes5cw000fhdliquc1837t"},{"post_id":"cjwxes5cw000ghdli1cu1dzsm","tag_id":"cjwxes5cq0009hdliwndhm6vn","_id":"cjwxes5cy000khdli766dkwqb"},{"post_id":"cjwxes5d0000rhdlis6bjz5yq","tag_id":"cjwxes5cz000ohdli2j4zmsjm","_id":"cjwxes5d2000whdligfq58api"},{"post_id":"cjwxes5cx000jhdlif3hndw4l","tag_id":"cjwxes5cz000ohdli2j4zmsjm","_id":"cjwxes5d30010hdliq0srttfc"},{"post_id":"cjwxes5cy000lhdliek80ptz8","tag_id":"cjwxes5cz000ohdli2j4zmsjm","_id":"cjwxes5d50013hdliiacqz7qx"},{"post_id":"cjwxes5cz000phdli1b34tyk8","tag_id":"cjwxes5cz000ohdli2j4zmsjm","_id":"cjwxes5d70019hdlignwjrv2v"},{"post_id":"cjwxes5d60017hdliyam5r4hz","tag_id":"cjwxes5d8001chdlixt5vh90z","_id":"cjwxes5db001lhdli0qf98ph2"},{"post_id":"cjwxes5dc001mhdlij3d4yzze","tag_id":"cjwxes5de001rhdliahilfw05","_id":"cjwxes5dg0020hdlimp4fygpx"},{"post_id":"cjwxes5dd001ohdliqql5ax6j","tag_id":"cjwxes5de001rhdliahilfw05","_id":"cjwxes5di0026hdlibyjlvgci"},{"post_id":"cjwxes5dh0024hdli32vb1ykx","tag_id":"cjwxes5cq0009hdliwndhm6vn","_id":"cjwxes5dj002ahdlif06ii0ac"},{"post_id":"cjwxes5di0027hdlibqzw2v41","tag_id":"cjwxes5de001rhdliahilfw05","_id":"cjwxes5dk002dhdliwdkthf7f"},{"post_id":"cjwxes5de001shdlil4n4ogvs","tag_id":"cjwxes5di0025hdlixcbiztlp","_id":"cjwxes5dk002ghdlizsojohzf"},{"post_id":"cjwxes5df001uhdli7sz9v3po","tag_id":"cjwxes5dk002chdliviagolcv","_id":"cjwxes5dl002ihdli8bx2m9jo"},{"post_id":"cjwxes5e5002xhdlieyd0tsjk","tag_id":"cjwxes5e60030hdlikfpij1w3","_id":"cjwxes5e90036hdlil2fycfjk"},{"post_id":"cjwxes5er0046hdli10rfmihy","tag_id":"cjwxes5ev0047hdliwemjspn8","_id":"cjwxes5ew0049hdlitzigquti"}],"Tag":[{"name":"hexo","_id":"cjwxes5cq0009hdliwndhm6vn"},{"name":"git","_id":"cjwxes5cz000ohdli2j4zmsjm"},{"name":"encrypt","_id":"cjwxes5d8001chdlixt5vh90z"},{"name":"vim","_id":"cjwxes5de001rhdliahilfw05"},{"name":"c++","_id":"cjwxes5di0025hdlixcbiztlp"},{"name":"windows","_id":"cjwxes5dk002chdliviagolcv"},{"name":"ajax","_id":"cjwxes5e60030hdlikfpij1w3"},{"name":"html5","_id":"cjwxes5ev0047hdliwemjspn8"}]}}